schema {
  query: Query
  mutation: Mutation
}

type Access implements Node & ObjectWithMetadata {
  id: ID!
  accessGroup: AccessGroup
  objectId: ID
  description: String
  accessType: AccessTypeEnum
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  privateObjectId: ID
  storeType: StoreTypeEnum
}

type AccessCountableConnection {
  pageInfo: PageInfo!
  edges: [AccessCountableEdge!]!
  totalCount: Int
}

type AccessCountableEdge {
  node: Access!
  cursor: String!
}

type AccessCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  access: Access
  accessErrors: [AccessError!]!
}

input AccessCreateInput {
  accessType: AccessTypeEnum!
  objectId: ID!
  description: String!
  accessGroup: ID!
}

type AccessError {
  field: String
  message: String
  code: AccessErrorCode!
}

enum AccessErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

type AccessGroup implements Node {
  id: ID!
  name: String
  code: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  isMfaEnabled: Boolean
  smopUsertypeCode: SmopUserTypeCode
  accesses: [Access]!
}

type AccessGroupCountableConnection {
  pageInfo: PageInfo!
  edges: [AccessGroupCountableEdge!]!
  totalCount: Int
}

type AccessGroupCountableEdge {
  node: AccessGroup!
  cursor: String!
}

type AccessGroupCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accessGroupErrors: [AccessGroupError!]!
  accessGroup: AccessGroup
}

input AccessGroupCreateInput {
  name: String!
  code: String!
  description: String!
  isMfaEnabled: Boolean
}

type AccessGroupError {
  field: String
  message: String
  code: AccessGroupErrorCode!
}

enum AccessGroupErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input AccessGroupInput {
  search: String
  id: [ID]
}

type AccessGroupUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accessGroupErrors: [AccessGroupError!]!
  accessGroup: AccessGroup
}

input AccessGroupUpdateInput {
  name: String
  code: String
  description: String
  isMfaEnabled: Boolean
}

enum AccessTypeEnum {
  MALL
  TENANT
  BRAND
}

type AccountActivityLog implements Node {
  modelName: String!
  action: AccountActivityLogAction!
  subject: Int
  createdAt: DateTime
  updatedAt: DateTime
  message: String!
  newValues: JSONString
  field: String
  id: ID!
  user: User
}

enum AccountActivityLogAction {
  UPDATE
  DELETE
  CREATE
}

type AccountActivityLogCountableConnection {
  pageInfo: PageInfo!
  edges: [AccountActivityLogCountableEdge!]!
  totalCount: Int
}

type AccountActivityLogCountableEdge {
  node: AccountActivityLog!
  cursor: String!
}

type AccountAddressCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

type AccountAddressDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

type AccountAddressUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

type AccountDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

type AccountDeleteRequest {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  status: String
  accountErrors: [AccountError!]!
}

type AccountError {
  field: String
  message: String
  code: AccountErrorCode!
  user: User
}

enum AccountErrorCode {
  ACTIVATE_OWN_ACCOUNT
  ACTIVATE_SUPERUSER_ACCOUNT
  DUPLICATED_INPUT_ITEM
  DEACTIVATE_OWN_ACCOUNT
  DEACTIVATE_SUPERUSER_ACCOUNT
  DELETE_NON_STAFF_USER
  DELETE_OWN_ACCOUNT
  DELETE_STAFF_ACCOUNT
  DELETE_SUPERUSER_ACCOUNT
  GRAPHQL_ERROR
  INVALID
  INVALID_PASSWORD
  LEFT_NOT_MANAGEABLE_PERMISSION
  INVALID_CREDENTIALS
  NOT_FOUND
  OUT_OF_SCOPE_SERVICE_ACCOUNT
  OUT_OF_SCOPE_USER
  OUT_OF_SCOPE_GROUP
  OUT_OF_SCOPE_PERMISSION
  PASSWORD_ENTIRELY_NUMERIC
  PASSWORD_TOO_COMMON
  PASSWORD_TOO_SHORT
  PASSWORD_TOO_SIMILAR
  PASSWORD_TOO_PLAIN
  REQUIRED
  UNIQUE
  JWT_SIGNATURE_EXPIRED
  JWT_INVALID_TOKEN
  JWT_DECODE_ERROR
  JWT_MISSING_TOKEN
  JWT_INVALID_CSRF_TOKEN
  INVALID_ACCESS_OBJECT
  USER_BLOCKED
  USER_UNVERIFIED
  USER_DELETED
  PERMISSION_GROUP_NOT_FOUND
  OTP_UNVERIFIED
  OTP_ALREADY_USED
  INVALID_XENDIT_TOKEN
}

type AccountExists {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  exists: Boolean
  accountErrors: [AccountError!]!
}

input AccountInput {
  firstName: String
  lastName: String
  defaultBillingAddress: AddressInput
  defaultShippingAddress: AddressInput
  email: String!
  gender: Gender
  dateOfBirth: Date
  contactNo: String!
  age: UserAgeEnum
  birthMonth: UserBirthMonthEnum
  prefix: UserPrefixEnum
  smac: String
}

type AccountRegister {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  requiresConfirmation: Boolean
  accountErrors: [AccountError!]!
  user: User
}

input AccountRegisterInput {
  email: String!
  password: String!
  redirectUrl: String
}

type AccountRequestDeletion {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
}

type AccountSMACSet {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  accountErrors: [AccountError!]!
}

type AccountSMMarketReregister {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
}

type AccountSetDefaultAddress {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  accountErrors: [AccountError!]!
}

type AccountSetNewPassword {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

type AccountSetStatus {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  accountErrors: [AccountError!]!
}

type AccountUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

type AccountUpdateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

type ActivityLog implements Node {
  modelName: String!
  action: ActivityLogAction!
  subject: Int
  createdAt: DateTime
  updatedAt: DateTime
  message: String!
  newValues: JSONString
  field: String
  id: ID!
  user: User
}

enum ActivityLogAction {
  UPDATE
  DELETE
  CREATE
}

enum ActivityLogActionsEnum {
  UPDATE
  DELETE
  CREATE
}

type ActivityLogCountableConnection {
  pageInfo: PageInfo!
  edges: [ActivityLogCountableEdge!]!
  totalCount: Int
}

type ActivityLogCountableEdge {
  node: ActivityLog!
  cursor: String!
}

input ActivityLogFilterInput {
  search: String
  id: [ID]
  updatedBy: [ID]
  action: ActivityLogActionsEnum
  created: DateRangeInput
}

enum ActivityLogSortField {
  CREATED_AT
  UPDATED_AT
}

input ActivityLogSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: ActivityLogSortField!
}

type AddItemToCart {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  line: CartLine
  cartErrors: [CartError!]!
}

type Address implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  companyName: String!
  streetAddress1: String!
  streetAddress2: String!
  city: String!
  cityArea: String!
  postalCode: String!
  country: CountryDisplay!
  countryArea: String!
  phone: String
  longitude: Float
  latitude: Float
  mapPlaceId: String
  notes: String
  alias: String
  unitDetails: String
  streetBrgy: String
  landmark: String
  provinceCode: String
  provinceName: String
  areaCode: String
  portCode: String
  isDefaultShippingAddress: Boolean
  isDefaultBillingAddress: Boolean
  isComplete: Boolean
}

type AddressCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

type AddressDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

input AddressInput {
  firstName: String
  lastName: String
  companyName: String
  streetAddress1: String
  streetAddress2: String
  city: String
  cityArea: String
  postalCode: String
  country: CountryCode
  countryArea: String
  phone: String
  longitude: Decimal
  latitude: Decimal
  mapPlaceId: String
  alias: String
  notes: String
  unitDetails: String
  streetBrgy: String
  landmark: String
  provinceCode: String
  provinceName: String
}

type AddressSetDefault {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  accountErrors: [AccountError!]!
}

type AddressSetHome {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  accountErrors: [AccountError!]!
}

enum AddressTypeEnum {
  BILLING
  SHIPPING
}

type AddressUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

type AddressValidationData {
  countryCode: String
  countryName: String
  addressFormat: String
  addressLatinFormat: String
  allowedFields: [String]
  requiredFields: [String]
  upperFields: [String]
  countryAreaType: String
  countryAreaChoices: [ChoiceValue]
  cityType: String
  cityChoices: [ChoiceValue]
  cityAreaType: String
  cityAreaChoices: [ChoiceValue]
  postalCodeType: String
  postalCodeMatchers: [String]
  postalCodeExamples: [String]
  postalCodePrefix: String
}

type Allocation implements Node {
  id: ID!
  quantity: Int!
  warehouse: Warehouse!
}

type Announcement implements Node {
  title: String
  content: String
  image(size: Int): Image
  publishingStatus: AnnouncementPublishingStatusEnum
  createdBy: User
  startDate: DateTime
  endDate: DateTime
  createdAt: DateTime
  id: ID!
}

type AnnouncementBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  announcementErrors: [AnnouncementError!]!
}

type AnnouncementCountableConnection {
  pageInfo: PageInfo!
  edges: [AnnouncementCountableEdge!]!
  totalCount: Int
}

type AnnouncementCountableEdge {
  node: Announcement!
  cursor: String!
}

type AnnouncementCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  announcementError: [AnnouncementError!]!
  announcement: Announcement
}

input AnnouncementCreateInput {
  title: String!
  content: String!
  image: Upload
  startDate: DateTime!
  endDate: DateTime!
}

type AnnouncementDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  Announcement: Announcement
  announcementError: [AnnouncementError!]!
}

type AnnouncementError {
  field: String
  message: String
  code: AnnouncementErrorCode!
}

enum AnnouncementErrorCode {
  GRAPHQL_ERROR
  INVALID
  REQUIRED
  NOT_FOUND
}

input AnnouncementInput {
  search: String
  startDate: DateTimeRangeInput
  status: AnnouncementPublishingStatusEnum
  id: [ID]
}

enum AnnouncementPublishingStatusEnum {
  PUBLISHED
  UNPUBLISHED
  SCHEDULED
  DELETED
}

enum AnnouncementSortField {
  PUBLISHING_DATE
}

input AnnouncementSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: AnnouncementSortField!
}

type AnnouncementUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  announcementError: [AnnouncementError!]!
  announcement: Announcement
}

type App implements Node & ObjectWithMetadata {
  id: ID!
  name: String
  created: DateTime
  isActive: Boolean
  permissions: [Permission]
  tokens: [AppToken]
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  type: AppTypeEnum
  webhooks: [Webhook]
  aboutApp: String
  dataPrivacy: String
  dataPrivacyUrl: String
  homepageUrl: String
  supportUrl: String
  configurationUrl: String
  appUrl: String
  version: String
  accessToken: String
}

type AppActivate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  appErrors: [AppError!]!
  app: App
}

type AppConfig implements Node {
  id: ID!
  name: String!
  version: Int!
  file: String
  createdBy: User!
  createdAt: DateTime
  updatedAt: DateTime
  updatedBy: User
  apiKey: String
  apiSecret: String
  url: String
  appConfigs(filter: AppConfigInput, sortBy: AppConfigSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): AppConfigCountableConnection
  content: String
}

type AppConfigCountableConnection {
  pageInfo: PageInfo!
  edges: [AppConfigCountableEdge!]!
  totalCount: Int
}

type AppConfigCountableEdge {
  node: AppConfig!
  cursor: String!
}

type AppConfigCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  appconfigError: [AppConfigError!]!
  appConfig: AppConfig
}

input AppConfigCreateInput {
  name: String!
  json: Upload!
}

type AppConfigError {
  field: String
  message: String
  code: AppConfigErrorCode!
}

enum AppConfigErrorCode {
  GRAPHQL_ERROR
  INVALID
  REQUIRED
}

input AppConfigInput {
  search: String
  version: String
  createdBy: [ID]
  unique: Boolean
}

enum AppConfigOrderField {
  NAME
  VERSION
  RECENT
}

input AppConfigSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: AppConfigOrderField!
}

type AppConfigUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  appConfig: AppConfig
  appconfigError: [AppConfigError!]!
}

type AppCountableConnection {
  pageInfo: PageInfo!
  edges: [AppCountableEdge!]!
  totalCount: Int
}

type AppCountableEdge {
  node: App!
  cursor: String!
}

type AppCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  authToken: String
  appErrors: [AppError!]!
  app: App
}

type AppDeactivate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  appErrors: [AppError!]!
  app: App
}

type AppDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  appErrors: [AppError!]!
  app: App
}

type AppDeleteFailedInstallation {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  appErrors: [AppError!]!
  appInstallation: AppInstallation
}

type AppError {
  field: String
  message: String
  code: AppErrorCode!
  permissions: [PermissionEnum!]
}

enum AppErrorCode {
  FORBIDDEN
  GRAPHQL_ERROR
  INVALID
  INVALID_STATUS
  INVALID_PERMISSION
  INVALID_URL_FORMAT
  INVALID_MANIFEST_FORMAT
  MANIFEST_URL_CANT_CONNECT
  NOT_FOUND
  REQUIRED
  UNIQUE
  OUT_OF_SCOPE_APP
  OUT_OF_SCOPE_PERMISSION
}

type AppFetchManifest {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  manifest: Manifest
  appErrors: [AppError!]!
}

input AppFilterInput {
  search: String
  isActive: Boolean
  type: AppTypeEnum
}

input AppInput {
  name: String
  isActive: Boolean
  permissions: [PermissionEnum]
}

type AppInstall {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  appErrors: [AppError!]!
  appInstallation: AppInstallation
}

input AppInstallInput {
  appName: String
  manifestUrl: String
  activateAfterInstallation: Boolean = true
  permissions: [PermissionEnum]
}

type AppInstallation implements Node & Job {
  appName: String!
  manifestUrl: String!
  id: ID!
  status: JobStatusEnum!
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String
}

type AppRetryInstall {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  appErrors: [AppError!]!
  appInstallation: AppInstallation
}

enum AppSortField {
  NAME
  CREATION_DATE
}

input AppSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: AppSortField!
}

type AppToken implements Node {
  name: String
  authToken: String
  id: ID!
}

type AppTokenCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  authToken: String
  appErrors: [AppError!]!
  appToken: AppToken
}

type AppTokenDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  appErrors: [AppError!]!
  appToken: AppToken
}

input AppTokenInput {
  name: String
  app: ID!
}

type AppTokenVerify {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  valid: Boolean!
  appErrors: [AppError!]!
}

enum AppTypeEnum {
  LOCAL
  THIRDPARTY
}

type AppUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  appErrors: [AppError!]!
  app: App
}

type AssignNavigation {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  menu: Menu
  menuErrors: [MenuError!]!
}

type AssignRunnerToTaskAreas {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  runner: User
  taskAreaError: [TaskAreaError!]!
}

type AssignStoreOrderRunner {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  storeOrder: StoreOrder
  orderErrors: [OrderError!]!
}

type Attribute implements Node & ObjectWithMetadata {
  id: ID!
  productTypes(offset: Int, before: String, after: String, first: Int, last: Int): ProductTypeCountableConnection!
  productVariantTypes(offset: Int, before: String, after: String, first: Int, last: Int): ProductTypeCountableConnection!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  inputType: AttributeInputTypeEnum
  name: String
  slug: String
  values: [AttributeValue]
  valueRequired: Boolean!
  visibleInStorefront: Boolean!
  filterableInStorefront: Boolean!
  filterableInDashboard: Boolean!
  availableInGrid: Boolean!
  translation(languageCode: LanguageCodeEnum!): AttributeTranslation
  storefrontSearchPosition: Int!
}

type AttributeAssign {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productType: ProductType
  productErrors: [ProductError!]!
}

input AttributeAssignInput {
  id: ID!
  type: AttributeTypeEnum!
}

type AttributeBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  productErrors: [ProductError!]!
}

type AttributeClearMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  attribute: Attribute
}

type AttributeClearPrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  attribute: Attribute
}

type AttributeCountableConnection {
  pageInfo: PageInfo!
  edges: [AttributeCountableEdge!]!
  totalCount: Int
}

type AttributeCountableEdge {
  node: Attribute!
  cursor: String!
}

type AttributeCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  attribute: Attribute
  productErrors: [ProductError!]!
}

input AttributeCreateInput {
  inputType: AttributeInputTypeEnum
  name: String!
  slug: String
  values: [AttributeValueCreateInput]
  valueRequired: Boolean
  isVariantOnly: Boolean
  visibleInStorefront: Boolean
  filterableInStorefront: Boolean
  filterableInDashboard: Boolean
  storefrontSearchPosition: Int
  availableInGrid: Boolean
}

type AttributeDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  attribute: Attribute
}

input AttributeFilterInput {
  valueRequired: Boolean
  isVariantOnly: Boolean
  visibleInStorefront: Boolean
  filterableInStorefront: Boolean
  filterableInDashboard: Boolean
  availableInGrid: Boolean
  search: String
  ids: [ID]
  inCollection: ID
  inCategory: ID
}

input AttributeInput {
  slug: String!
  value: String
  values: [String]
}

enum AttributeInputTypeEnum {
  DROPDOWN
  MULTISELECT
}

type AttributeReorderValues {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  attribute: Attribute
  productErrors: [ProductError!]!
}

enum AttributeSortField {
  NAME
  SLUG
  VALUE_REQUIRED
  IS_VARIANT_ONLY
  VISIBLE_IN_STOREFRONT
  FILTERABLE_IN_STOREFRONT
  FILTERABLE_IN_DASHBOARD
  STOREFRONT_SEARCH_POSITION
  AVAILABLE_IN_GRID
}

input AttributeSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: AttributeSortField!
}

type AttributeTranslatableContent implements Node {
  id: ID!
  name: String!
  translation(languageCode: LanguageCodeEnum!): AttributeTranslation
  attribute: Attribute
}

type AttributeTranslate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  attribute: Attribute
}

type AttributeTranslation implements Node {
  id: ID!
  name: String!
  language: LanguageDisplay!
}

enum AttributeTypeEnum {
  PRODUCT
  VARIANT
}

type AttributeUnassign {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productType: ProductType
  productErrors: [ProductError!]!
}

type AttributeUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  attribute: Attribute
  productErrors: [ProductError!]!
}

input AttributeUpdateInput {
  name: String
  slug: String
  removeValues: [ID]
  addValues: [AttributeValueCreateInput]
  valueRequired: Boolean
  isVariantOnly: Boolean
  visibleInStorefront: Boolean
  filterableInStorefront: Boolean
  filterableInDashboard: Boolean
  storefrontSearchPosition: Int
  availableInGrid: Boolean
}

type AttributeUpdateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  attribute: Attribute
}

type AttributeUpdatePrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  attribute: Attribute
}

type AttributeValue implements Node {
  id: ID!
  name: String
  slug: String
  type: AttributeValueType @deprecated(reason: "Use the `inputType` field to determine the type of attribute's value. This field will be removed after 2020-07-31.")
  translation(languageCode: LanguageCodeEnum!): AttributeValueTranslation
  inputType: AttributeInputTypeEnum
}

type AttributeValueBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  productErrors: [ProductError!]!
}

type AttributeValueCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  attribute: Attribute
  productErrors: [ProductError!]!
  attributeValue: AttributeValue
}

input AttributeValueCreateInput {
  name: String!
}

type AttributeValueDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  attribute: Attribute
  productErrors: [ProductError!]!
  attributeValue: AttributeValue
}

input AttributeValueInput {
  id: ID
  values: [String]!
}

type AttributeValueTranslatableContent implements Node {
  id: ID!
  name: String!
  translation(languageCode: LanguageCodeEnum!): AttributeValueTranslation
  attributeValue: AttributeValue
}

type AttributeValueTranslate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  attributeValue: AttributeValue
}

type AttributeValueTranslation implements Node {
  id: ID!
  name: String!
  language: LanguageDisplay!
}

enum AttributeValueType {
  COLOR
  GRADIENT
  URL
  STRING
}

type AttributeValueUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  attribute: Attribute
  productErrors: [ProductError!]!
  attributeValue: AttributeValue
}

type AuthorizationKey {
  name: AuthorizationKeyType!
  key: String!
}

type AuthorizationKeyAdd {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  authorizationKey: AuthorizationKey
  shop: Shop
  shopErrors: [ShopError!]!
}

type AuthorizationKeyDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  authorizationKey: AuthorizationKey
  shop: Shop
  shopErrors: [ShopError!]!
}

input AuthorizationKeyInput {
  key: String!
  password: String!
}

enum AuthorizationKeyType {
  FACEBOOK
  GOOGLE_OAUTH2
}

type AutoBookingConfig implements Node {
  readyStatusMinutes: Int
  collectedStatusMinutes: Int
  anyStatusMinutes: Int
  isEnabled: Boolean!
  updatedAt: DateTime
  createdAt: DateTime
  id: ID!
  storeType: StoreTypeEnum
}

type AutoBookingError {
  field: String
  message: String
  code: AutoBookingErrorCode!
}

enum AutoBookingErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

type AutoBookingSetIsEnabled {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  malls: [Mall]
  autoBookingConfigs: [AutoBookingConfig]
  autoBookingError: [AutoBookingError!]!
}

input AutoBookingSetIsEnabledInput {
  storeTypes: [StoreTypeEnum]!
  enabled: Boolean!
}

input AutobookingConfigUpdateInput {
  readyStatusMinutes: Int
  collectedStatusMinutes: Int
  anyStatusMinutes: Int
  storeType: StoreTypeEnum!
  enabled: Boolean!
}

type Banner implements Node {
  id: ID!
  name: String
  imageUrl(size: Int, size2: Int): Image
  mall: Mall
  action: JSONString
  status: SmopStatusEnum
  createdAt: DateTime
  updatedAt: DateTime
  type: SmopBannerTypeEnum
  descriptionJson: JSONString!
  isSplashBanner: Boolean!
  deeplinkUrl: String
  shortDynamicLink: String
  targetDeeplink: String
  targetDynamicLink: String
  startDate: DateTime
  endDate: DateTime
  sale: Sale
  voucher: Voucher
  coupon: Coupon
  malls(offset: Int, before: String, after: String, first: Int, last: Int): MallCountableConnection
  isAppliedToAllMalls: Boolean
  brand: Brand
  collection: Collection
  product: Product
  category: Category
  page: DynamicLink
  verticals: [BannerVerticalEnum]
}

type BannerAddMalls {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  banner: Banner
  bannerErrors: [BannerError!]!
}

input BannerAnnouncementLinkInput {
  brandId: ID
  collectionId: ID
  productId: ID
  categoryId: ID
  couponId: ID
}

type BannerAnnouncementLinkUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  banner: Banner
  bannerErrors: [BannerError!]!
}

type BannerBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  bannerErrors: [BannerError!]!
}

type BannerCountableConnection {
  pageInfo: PageInfo!
  edges: [BannerCountableEdge!]!
  totalCount: Int
}

type BannerCountableEdge {
  node: Banner!
  cursor: String!
}

type BannerCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  bannerErrors: [BannerError!]!
  banner: Banner
}

input BannerCreateInput {
  name: String!
  action: JSONString
  startDate: DateTime
  endDate: DateTime
  status: SmopStatusEnum!
  mall: ID
  descriptionJson: JSONString
  sale: ID
  voucher: ID
  isSplashBanner: Boolean
  imageUrl: Upload
  dynamicLinkId: ID
  verticals: [BannerVerticalEnum]
  type: SmopBannerTypeEnum!
}

type BannerDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  banner: Banner
  bannerErrors: [BannerError!]!
}

type BannerError {
  field: String
  message: String
  code: BannerErrorCode!
}

enum BannerErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

type BannerGenerateDynamicLink {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  banner: Banner
  bannerErrors: [BannerError!]!
}

type BannerImageCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  banner: Banner
  bannerErrors: [BannerError!]!
}

input BannerImageCreateInput {
  image: Upload!
  banner: ID!
}

input BannerInput {
  search: String
  isSplashBanner: Boolean
  status: SmopStatusEnum
  mall: ID
  malls: [ID]
  startDate: DateTimeRangeInput
  type: SmopBannerTypeEnum
  verticals: [BannerVerticalEnum]
  couponIsClaimable: Boolean
  couponIsRedeemable: Boolean
}

input BannerMallsInput {
  malls: [ID]
  isAppliedToAllMalls: Boolean!
}

type BannerRemoveMalls {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  banner: Banner
  bannerErrors: [BannerError!]!
}

enum BannerSortField {
  NUMBER
  SORT_ORDER
  CREATION_DATE
  START_DATE
  END_DATE
  UPDATED_AT
  NAME
  BANNER_NAME
}

input BannerSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: BannerSortField!
}

type BannerUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  bannerErrors: [BannerError!]!
  banner: Banner
}

input BannerUpdateInput {
  name: String
  action: JSONString
  startDate: DateTime
  endDate: DateTime
  status: SmopStatusEnum
  mall: ID
  descriptionJson: JSONString
  sale: ID
  voucher: ID
  isSplashBanner: Boolean
  imageUrl: Upload
  dynamicLinkId: ID
  verticals: [BannerVerticalEnum]
}

enum BannerVerticalEnum {
  HOMEPAGE
  FOOD
  GROCERY
  SM_FULFILLED
  SHOPS
  CINEMA
  IN_MALL_DEALS
}

type Bin implements Node & ObjectWithMetadata {
  rack: Rack
  binNo: Int!
  isAvailable: Boolean
  isVisible: Boolean
  id: ID!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
}

type BinCountableConnection {
  pageInfo: PageInfo!
  edges: [BinCountableEdge!]!
  totalCount: Int
}

type BinCountableEdge {
  node: Bin!
  cursor: String!
}

type Book2go {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  orderErrors: [OrderError!]!
}

input Book2goInput {
  packageWeight: WeightScalar
  packageHeight: DistanceScalar
  packageWidth: DistanceScalar
  packageLength: DistanceScalar
}

type BookThirdPartyRider {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  event: OrderEvent
  orderErrors: [OrderError!]!
}

type Brand implements Node & ObjectWithMetadata {
  id: ID!
  name: String
  legalName: String
  code: String
  accountManager: User
  address: Address
  vendorId: String
  mobileNo: String
  status: SmopStatusEnum
  tinNo: String
  createdAt: DateTime
  updatedAt: DateTime
  isFeatured: Boolean!
  deeplinkUrl: String
  shortDynamicLink: String
  shopifyApiKey: String
  shopifyApiSecret: String
  shopifyApiShop: String
  cluster: Cluster
  brandGroup: BrandGroup
  swornDeclarationsFlag: Boolean
  fiscalYearTrigger: Date
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  storeType: StoreTypeEnum
  tenants(mallIds: [ID], mallDistance: [MallDistanceInput], status: SmopStatusEnum, withReservation: Boolean): [Tenant]
  logo(size: Int): Image
  originalLogo: Image
  vertical: BrandVerticalEnum
  shopifyExclusionTags: [ShopifyTags]
  shopifyNonCodTags: [ShopifyTags]
}

type BrandCountableConnection {
  pageInfo: PageInfo!
  edges: [BrandCountableEdge!]!
  totalCount: Int
}

type BrandCountableEdge {
  node: Brand!
  cursor: String!
}

type BrandCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  brandErrors: [BrandError!]!
  brand: BrandPrivate
}

input BrandCreateInput {
  name: String!
  code: String
  vertical: BrandVerticalEnum
  tagsStr: [String]
  tags: [ID]
  brands: [ID]
  classification: ClassificationTypeEnum
  dynamicLink: String
  image: Upload
  imageAlt: String
  isSmacAffiliate: Boolean
  legalName: String!
  accountManager: ID
  address: AddressInput
  mobileNo: String
  vendorId: String
  storeType: StoreTypeEnum
  status: SmopStatusEnum
  tinNo: String!
  completeAddress: String
  signatoryName: String!
  signatoryEmail: String!
  signatoryDesignation: String
  signatoryMobileNo: String!
  bankName: String!
  bankAccountName: String!
  bankAccountNo: String!
  financeName: String!
  financeEmail: String!
  financeMobileNo: String!
  customerCode: String
  vendorCode: String
  isLargeTaxpayer: Boolean
  isPayoutEligible: Boolean
  isFeatured: Boolean
  logo: Upload
  attachTo: ID
  cluster: ID
  shopifyApiKey: String
  shopifyApiSecret: String
  shopifyApiShop: String
  brandGroup: ID
  swornDeclarationsFlag: Boolean
  groupCode: String
}

type BrandError {
  field: String
  message: String
  code: BrandErrorCode!
}

enum BrandErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  MISSING_INTERNAL_DETAILS
}

type BrandGenerateDynamicLink {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  brand: BrandPrivate
  brandErrors: [BrandError!]!
}

type BrandGroup implements Node {
  name: String!
  code: String
  category: String
  classification: BrandGroupClassification
  vertical: BrandVerticalEnum
  tags: [BrandTag]
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  dynamicLink: String
  isSmacAffiliate: Boolean!
  id: ID!
  image: Image
  status: SmopStatusEnum
  sellers(mallDistance: [MallDistanceInput], withReservation: Boolean): [Brand]
}

enum BrandGroupClassification {
  FOOD_AND_BEVERAGES
  GENERAL_MERCHANDISE
}

type BrandGroupCountableConnection {
  pageInfo: PageInfo!
  edges: [BrandGroupCountableEdge!]!
  totalCount: Int
}

type BrandGroupCountableEdge {
  node: BrandGroup!
  cursor: String!
}

type BrandGroupCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  brandErrors: [BrandError!]!
  brandGroup: BrandGroup
}

input BrandGroupCreateInput {
  name: String!
  code: String!
  vertical: BrandVerticalEnum!
  tagsStr: [String]
  tags: [ID]
  brands: [ID]
  classification: ClassificationTypeEnum
  dynamicLink: String
  image: Upload
  imageAlt: String
  isSmacAffiliate: Boolean
}

type BrandGroupDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  brandGroup: BrandGroup
  brandErrors: [BrandError!]!
}

input BrandGroupInput {
  id: [ID]
  search: String
  searchInTags: String
  status: String
  vertical: BrandVerticalEnum
  classification: ClassificationTypeEnum
  isSmacAffiliate: Boolean
  malls: [ID]
  mallDistance: [MallDistanceInput]
  withReservation: Boolean
}

enum BrandGroupSortField {
  BRAND_GROUP_NAME
  CREATION_DATE
  UPDATE_DATE
  MALL_DISTANCE
}

input BrandGroupSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: BrandGroupSortField!
}

type BrandGroupUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  brandErrors: [BrandError!]!
  brandGroup: BrandGroup
}

input BrandGroupUpdateInput {
  name: String
  code: String
  vertical: BrandVerticalEnum
  tagsStr: [String]
  tags: [ID]
  brands: [ID]
  classification: ClassificationTypeEnum
  dynamicLink: String
  image: Upload
  imageAlt: String
  isSmacAffiliate: Boolean
}

input BrandInput {
  search: String
  mall: ID
  storeType: StoreTypeEnum
  accountManager: ID
  malls: [ID]
  createdAt: DateTimeRangeInput
  id: [ID]
  mallDistance: [MallDistanceInput]
  isSmacAffiliate: Boolean
}

type BrandPrivate implements Node & ObjectWithMetadata {
  id: ID!
  name: String
  legalName: String
  code: String
  accountManager: User
  address: Address
  vendorId: String
  mobileNo: String
  status: SmopStatusEnum
  tinNo: String
  createdAt: DateTime
  updatedAt: DateTime
  isFeatured: Boolean!
  deeplinkUrl: String
  shortDynamicLink: String
  shopifyApiKey: String
  shopifyApiSecret: String
  shopifyApiShop: String
  cluster: Cluster
  brandGroup: BrandGroup
  swornDeclarationsFlag: Boolean!
  fiscalYearTrigger: Date
  signatoryName: String
  signatoryEmail: String
  signatoryDesignation: String
  signatoryMobileNo: String
  bankName: String
  bankAccountName: String
  bankAccountNo: String
  financeName: String
  financeEmail: String
  financeMobileNo: String
  customerCode: String
  vendorCode: String
  isLargeTaxpayer: Boolean
  isPayoutEligible: Boolean
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  storeType: StoreTypeEnum
  tenants: [TenantPrivate]
  completeAddress: String
  sellerId: String
  logo(size: Int): Image
  vertical: BrandVerticalEnum
  shopifyExclusionTags: [ShopifyTags]
  shopifyNonCodTags: [ShopifyTags]
}

type BrandPrivateCountableConnection {
  pageInfo: PageInfo!
  edges: [BrandPrivateCountableEdge!]!
  totalCount: Int
}

type BrandPrivateCountableEdge {
  node: BrandPrivate!
  cursor: String!
}

enum BrandSortField {
  NUMBER
  CREATION_DATE
  MALL_DISTANCE
}

input BrandSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: BrandSortField!
}

type BrandTag implements Node {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  id: ID!
}

type BrandTagCountableConnection {
  pageInfo: PageInfo!
  edges: [BrandTagCountableEdge!]!
  totalCount: Int
}

type BrandTagCountableEdge {
  node: BrandTag!
  cursor: String!
}

type BrandTagCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  brandErrors: [BrandError!]!
  brandTag: BrandTag
}

input BrandTagCreateInput {
  name: String!
}

type BrandTagDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  brandTag: BrandTag
  brandErrors: [BrandError!]!
}

input BrandTagInput {
  id: [ID]
  search: String
}

type BrandTagUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  brandErrors: [BrandError!]!
  brandTag: BrandTag
}

type BrandUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  brandErrors: [BrandError!]!
  brand: BrandPrivate
}

input BrandUpdateInput {
  name: String
  legalName: String
  code: String
  accountManager: ID
  address: AddressInput
  mobileNo: String
  vendorId: String
  storeType: StoreTypeEnum
  status: SmopStatusEnum
  tinNo: String
  completeAddress: String
  signatoryName: String
  signatoryEmail: String
  signatoryDesignation: String
  signatoryMobileNo: String
  bankName: String
  bankAccountName: String
  bankAccountNo: String
  financeName: String
  financeEmail: String
  financeMobileNo: String
  customerCode: String
  vendorCode: String
  isLargeTaxpayer: Boolean
  isPayoutEligible: Boolean
  isFeatured: Boolean
  logo: Upload
  attachTo: ID
  vertical: BrandVerticalEnum
  cluster: ID
  shopifyApiKey: String
  shopifyApiSecret: String
  shopifyApiShop: String
  brandGroup: ID
  swornDeclarationsFlag: Boolean
}

enum BrandVerticalEnum {
  FOOD_AND_BEVERAGES
  RETAIL_AFFILIATES
  MARKETPLACE
  CYBERZONE
  GROCERY
  SM_FULFILLED
}

type BulkProductError {
  field: String
  message: String
  code: ProductErrorCode!
  attributes: [ID!]
  index: Int
  warehouses: [ID!]
  products: [ID!]
}

type BulkStockError {
  field: String
  message: String
  code: ProductErrorCode!
  attributes: [ID!]
  index: Int
}

type CancelAutoBooking {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  autoBookingError: [AutoBookingError!]!
}

type Cart implements Node & ObjectWithMetadata {
  created: DateTime!
  lastChange: DateTime!
  shippingMethod: ShippingMethod
  quantity: Int!
  user: User
  mall: Mall!
  verticalType: StoreTypeEnum!
  id: ID!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  lines: [CartLine]
  cartLines(filter: CartLineFilterInput, offset: Int, before: String, after: String, first: Int, last: Int): CartLineCountableConnection
  token: UUID!
}

type CartCountableConnection {
  pageInfo: PageInfo!
  edges: [CartCountableEdge!]!
  totalCount: Int
}

type CartCountableEdge {
  node: Cart!
  cursor: String!
}

type CartCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  created: Boolean
  cartErrors: [CartError!]!
  cart: Cart
}

input CartCreateInput {
  lines: [CartLineInput]!
  mall: ID!
  verticalType: StoreTypeEnum!
}

type CartError {
  field: String
  message: String
  code: CartErrorCode!
  variants: [ID!]
}

enum CartErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  PRODUCT_UNAVAILABLE_FOR_PURCHASE
  ZERO_QUANTITY
  QUANTITY_GREATER_THAN_LIMIT
  INSUFFICIENT_STOCK
}

input CartFilterInput {
  verticalType: [StoreTypeEnum]
  created: DateRangeInput
  mall: ID
  withQuantity: Boolean
  excludeEmpty: Boolean
  malls: [ID]
}

type CartLine implements Node {
  id: ID!
  variant: ProductVariant!
  quantity: Int!
  tenant: Tenant
  product: Product
  notes: String
  stockOnMall: Stock
  pricing(mallId: ID): VariantPricingInfo
}

type CartLineAddNote {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  cartLine: CartLine
  cartErrors: [CartError!]!
}

type CartLineCountableConnection {
  pageInfo: PageInfo!
  edges: [CartLineCountableEdge!]!
  totalCount: Int
}

type CartLineCountableEdge {
  node: CartLine!
  cursor: String!
}

type CartLineDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  cart: Cart
  cartErrors: [CartError!]!
}

input CartLineFilterInput {
  malls: [ID]
  brands: [ID]
}

input CartLineInput {
  quantity: Int!
  variantId: ID!
  tenantId: ID!
  notes: String
}

type CartLinesAdd {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  cart: Cart
  cartErrors: [CartError!]!
}

type CartLinesUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  cart: Cart
  cartErrors: [CartError!]!
}

enum CartSortField {
  MALL
  CREATION_DATE
  QUANTITY
  UPDATED_AT
}

input CartSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: CartSortField!
}

type CartSummaries implements Node {
  id: ID!
  fbCart: CartSummary
  gmCart: CartSummary
  groceryCart: CartSummary
  sfCart: CartSummary
}

type CartSummary {
  totalQuantity: Int
  carts(offset: Int, before: String, after: String, first: Int, last: Int): CartCountableConnection
  verticalType: StoreTypeEnum!
  subtotal: Decimal
}

input CartSummaryFilterInput {
  malls: [ID]
  vertical: StoreTypeEnum
}

type Category implements Node & ObjectWithMetadata {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: String!
  descriptionJson: JSONString!
  code: String
  slug: String!
  parent: Category
  storeType: StoreTypeEnum
  deeplinkUrl: String
  shortDynamicLink: String
  color: String
  isFeatured: Boolean!
  level: Int!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  ancestors(offset: Int, before: String, after: String, first: Int, last: Int): CategoryCountableConnection
  products(offset: Int, before: String, after: String, first: Int, last: Int): ProductCountableConnection
  url: String @deprecated(reason: "This field will be removed after 2020-07-31.")
  children(offset: Int, before: String, after: String, first: Int, last: Int): CategoryCountableConnection
  backgroundImage(size: Int): Image
  translation(languageCode: LanguageCodeEnum!): CategoryTranslation
  status: SmopStatusEnum
  rootCategory: Category
  smMarketsId: Int
  iconImage(size: Int): Image
}

type CategoryBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  productErrors: [ProductError!]!
}

type CategoryClearMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  category: Category
}

type CategoryClearPrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  category: Category
}

type CategoryCountableConnection {
  pageInfo: PageInfo!
  edges: [CategoryCountableEdge!]!
  totalCount: Int
}

type CategoryCountableEdge {
  node: Category!
  cursor: String!
}

type CategoryCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  category: Category
}

type CategoryDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  category: Category
}

input CategoryFilterInput {
  search: String
  storeType: StoreTypeEnum
  isFeatured: Boolean
  ids: [ID]
  smMarketsIds: [Int]
  isMappedToSmMarket: Boolean
  secondLevelWithSaleOnMall: ID
  productIds: [ID]
  malls: CategoryMallsInput
  onlyWithVisibleProducts: CategoryVisibilityInput
}

type CategoryGenerateDynamicLink {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  category: Category
  productErrors: [ProductError!]!
}

input CategoryInput {
  description: String
  descriptionJson: JSONString
  name: String
  slug: String
  seo: SeoInput
  backgroundImage: Upload
  backgroundImageAlt: String
  storeType: StoreTypeEnum
  smMarketsId: Int
  color: String
  iconImage: Upload
  iconImageAlt: String
  isFeatured: Boolean
}

input CategoryMallsInput {
  withPublishedProductOnMalls: [ID!]!
  collections: [ID!]
}

enum CategorySortField {
  NAME
  PRODUCT_COUNT
  SUBCATEGORY_COUNT
  RANDOM
}

input CategorySortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: CategorySortField!
}

type CategoryTranslatableContent implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: String!
  descriptionJson: JSONString!
  translation(languageCode: LanguageCodeEnum!): CategoryTranslation
  category: Category
}

type CategoryTranslate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  category: Category
}

type CategoryTranslation implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: String!
  descriptionJson: JSONString!
  language: LanguageDisplay!
}

type CategoryUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  category: Category
}

type CategoryUpdateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  category: Category
}

type CategoryUpdatePrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  category: Category
}

input CategoryVisibilityInput {
  level: Int!
  onlyWithVisibleProducts: Boolean!
  collections: [ID!]
  malls: [ID!]
}

type Checkout implements Node & ObjectWithMetadata {
  created: DateTime!
  lastChange: DateTime!
  user: User
  quantity: Int!
  billingAddress: Address
  shippingAddress: Address
  shippingMethod: ShippingMethod
  note: String!
  discount: Money
  discountName: String
  translatedDiscountName: String
  voucherCode: String
  giftCards: [GiftCard]
  distanceFromMall: Float
  mobileAppVersion: String
  isActive: Boolean!
  mall: Mall
  verticalType: CheckoutVerticalType
  hasCutlery: Boolean!
  linkSmac: Boolean
  travelTime: TravelTime
  isServiceable: Boolean!
  id: ID!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  availableShippingMethods: [ShippingMethod]!
  availablePaymentGateways: [PaymentGateway!]!
  email: String!
  isShippingRequired: Boolean!
  lines: [CheckoutLine]
  shippingPrice: TaxedMoney
  subtotalPrice: TaxedMoney
  token: UUID!
  totalPrice: TaxedMoney
  orderShopifyReference: String
  showSmac: Boolean
}

type CheckoutAddPromoCode {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type CheckoutAddressUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type CheckoutBillingAddressUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type CheckoutClearMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkoutErrors: [CheckoutError!]!
  checkout: Checkout
}

type CheckoutClearPrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkoutErrors: [CheckoutError!]!
  checkout: Checkout
}

type CheckoutComplete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  confirmationNeeded: Boolean!
  confirmationData: JSONString
  checkoutErrors: [CheckoutError!]!
}

type CheckoutCountableConnection {
  pageInfo: PageInfo!
  edges: [CheckoutCountableEdge!]!
  totalCount: Int
}

type CheckoutCountableEdge {
  node: Checkout!
  cursor: String!
}

type CheckoutCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  created: Boolean
  checkoutErrors: [CheckoutError!]!
  checkout: Checkout
}

input CheckoutCreateInput {
  verticalType: StoreTypeEnum!
  lines: [CheckoutLineInput]!
  email: String
  shippingAddress: AddressInput
  billingAddress: AddressInput
  mall: ID!
  mobileAppVersion: String
}

type CheckoutCustomerAttach {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type CheckoutCustomerDetach {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type CheckoutEmailUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type CheckoutError {
  field: String
  message: String
  code: CheckoutErrorCode!
  variants: [ID!]
}

enum CheckoutErrorCode {
  BILLING_ADDRESS_NOT_SET
  CHECKOUT_NOT_FULLY_PAID
  GRAPHQL_ERROR
  PRODUCT_NOT_PUBLISHED
  PRODUCT_UNAVAILABLE_FOR_PURCHASE
  INSUFFICIENT_STOCK
  INVALID
  INVALID_SHIPPING_METHOD
  NOT_FOUND
  PAYMENT_ERROR
  QUANTITY_GREATER_THAN_LIMIT
  REQUIRED
  SHIPPING_ADDRESS_NOT_SET
  SHIPPING_METHOD_NOT_APPLICABLE
  SHIPPING_METHOD_NOT_SET
  SHIPPING_NOT_REQUIRED
  TAX_ERROR
  TENANT_NOT_ACTIVE
  UNIQUE
  VOUCHER_NOT_APPLICABLE
  ZERO_QUANTITY
}

type CheckoutHasCutlery {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type CheckoutLine implements Node {
  id: ID!
  variant: ProductVariant!
  quantity: Int!
  notes: String!
  originalRetailPriceAmount: Float
  discountedRetailPriceAmount: Float
  appliedSale: Sale
  totalPrice: TaxedMoney
  requiresShipping: Boolean
}

type CheckoutLineAddNote {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkoutLine: CheckoutLine
  checkoutErrors: [CheckoutError!]!
}

type CheckoutLineCountableConnection {
  pageInfo: PageInfo!
  edges: [CheckoutLineCountableEdge!]!
  totalCount: Int
}

type CheckoutLineCountableEdge {
  node: CheckoutLine!
  cursor: String!
}

type CheckoutLineDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

input CheckoutLineInput {
  quantity: Int!
  variantId: ID!
  tenantId: ID!
  notes: String
}

type CheckoutLinesAdd {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type CheckoutLinesUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type CheckoutPaymentCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkout: Checkout
  payment: Payment
  paymentErrors: [PaymentError!]!
}

type CheckoutRemovePromoCode {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type CheckoutShippingAddressUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type CheckoutShippingMethodUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type CheckoutSubTotalError {
  code: CheckoutSubTotalErrorCodeEnum
  message: String
}

enum CheckoutSubTotalErrorCodeEnum {
  UNAVAILABLE_ERROR
  FOOD_MAX_AMOUNT_LIMIT_ERROR
  NON_FOOD_MAX_AMOUNT_LIMIT_ERROR
  MIN_AMOUNT_ERROR
  SOMETHING_WENT_WRONG_ERROR
}

type CheckoutUpdateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkoutErrors: [CheckoutError!]!
  checkout: Checkout
}

type CheckoutUpdatePrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  checkoutErrors: [CheckoutError!]!
  checkout: Checkout
}

enum CheckoutVerticalType {
  FOOD_AND_BEVERAGES
  GENERAL_MERCHANDISE
  GROCERY
  SM_FULFILLED
}

type Choice implements Node {
  id: ID!
  name: String
  description: String
  createdAt: DateTime
  tenant: Tenant
  minimumChoice: Int
  maximumChoice: Int
  updatedAt: DateTime
}

type ChoiceCountableConnection {
  pageInfo: PageInfo!
  edges: [ChoiceCountableEdge!]!
  totalCount: Int
}

type ChoiceCountableEdge {
  node: Choice!
  cursor: String!
}

type ChoiceCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  choiceErrors: [ChoiceError!]!
  choice: Choice
}

input ChoiceCreateInput {
  tenant: ID!
  name: String
  description: String
  minimumChoice: Int
  maximumChoice: Int
}

type ChoiceError {
  field: String
  message: String
  code: ChoiceErrorCode!
}

enum ChoiceErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

type ChoiceUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  choiceErrors: [ChoiceError!]!
  choice: Choice
}

input ChoiceUpdateInput {
  tenant: ID!
  name: String
  description: String
  minimumChoice: Int
  maximumChoice: Int
}

type ChoiceValue {
  raw: String
  verbose: String
}

enum ClassificationTypeEnum {
  FOOD_AND_BEVERAGES
  GENERAL_MERCHANDISE
}

type ClearCachePCB {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  success: Boolean
}

type Cluster implements Node {
  name: String
  productType: ProductType
  id: ID!
  lowerPrepTimeDays: Int
  lowerPrepTimeHours: Int
  lowerPrepTimeMins: Int
  upperPrepTimeDays: Int
  upperPrepTimeHours: Int
  upperPrepTimeMins: Int
}

type ClusterBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  clusterErrors: [ClusterError!]!
}

type ClusterCountableConnection {
  pageInfo: PageInfo!
  edges: [ClusterCountableEdge!]!
  totalCount: Int
}

type ClusterCountableEdge {
  node: Cluster!
  cursor: String!
}

type ClusterCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  cluster: Cluster
  pauseConfig: ServicePauseConfig
  clusterError: [ClusterError!]!
}

input ClusterCreateInput {
  name: String!
  productType: ID!
  lowerPrepTimeDays: Int!
  lowerPrepTimeHours: Int!
  lowerPrepTimeMins: Int!
  upperPrepTimeDays: Int!
  upperPrepTimeHours: Int!
  upperPrepTimeMins: Int!
  pauseDurationMins: Int
  pauseCooldownPeriodMins: Int
  pauseMaxExtensionMins: Int
}

type ClusterDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  Cluster: Cluster
  clusterError: [ClusterError!]!
}

type ClusterError {
  field: String
  message: String
  code: ClusterErrorCode!
}

enum ClusterErrorCode {
  GRAPHQL_ERROR
  INVALID
  REQUIRED
  NOT_FOUND
}

input ClusterInput {
  id: [ID]
  search: String
}

type ClusterUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  cluster: Cluster
  pauseConfig: ServicePauseConfig
  clusterError: [ClusterError!]!
}

type Collection implements Node & ObjectWithMetadata {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: String!
  descriptionJson: JSONString!
  publicationDate: Date
  slug: String!
  brand: Brand
  featuredIn: [PageTypeEnum]
  deeplinkUrl: String
  shortDynamicLink: String
  isFeaturedOnSmFulfilledPage: Boolean
  color: String
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  products(filter: ProductFilterInput, sortBy: ProductOrder, offset: Int, before: String, after: String, first: Int, last: Int): ProductCountableConnection
  backgroundImage(size: Int): Image
  translation(languageCode: LanguageCodeEnum!): CollectionTranslation
  isPublished: Boolean!
  status: SmopStatusEnum
  categories(filter: CategoryFilterInput, sortBy: CategorySortingInput, offset: Int, before: String, after: String, first: Int, last: Int): CategoryCountableConnection
  isPromo: Boolean
  isFeatured: Boolean
  isFromShopify: Boolean
  iconImage(size: Int): Image
  thumbnailLinkImage(size: Int): Image
}

type CollectionAddProducts {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  collection: Collection
  productErrors: [ProductError!]!
}

type CollectionBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  productErrors: [ProductError!]!
}

type CollectionBulkPublish {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  productErrors: [ProductError!]!
}

type CollectionClearMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  collection: Collection
}

type CollectionClearPrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  collection: Collection
}

type CollectionCountableConnection {
  pageInfo: PageInfo!
  edges: [CollectionCountableEdge!]!
  totalCount: Int
}

type CollectionCountableEdge {
  node: Collection!
  cursor: String!
}

type CollectionCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  collection: Collection
}

input CollectionCreateInput {
  isPublished: Boolean
  name: String
  slug: String
  description: String
  descriptionJson: JSONString
  backgroundImage: Upload
  backgroundImageAlt: String
  seo: SeoInput
  publicationDate: Date
  brand: ID
  isPromo: Boolean
  isFeatured: Boolean
  isFeaturedOnSmFulfilledPage: Boolean
  featuredIn: [PageTypeEnum!]
  color: String
  iconImage: Upload
  iconImageAlt: String
  thumbnailLinkImage: Upload
  thumbnailLinkImageAlt: String
  products: [ID]
}

type CollectionDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  collection: Collection
}

input CollectionFilterInput {
  published: CollectionPublished
  search: String
  verticals: [StoreTypeEnum]
  ids: [ID]
  featuredOnly: Boolean
  smFulfilledFeaturedOnly: Boolean
  isPromo: Boolean
  isFromShopify: Boolean
  isShopifyDefault: Boolean
  brand: ID
  featuredIn: [PageTypeEnum]
}

type CollectionGenerateDynamicLink {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  collection: Collection
  productErrors: [ProductError!]!
}

input CollectionInput {
  isPublished: Boolean
  name: String
  slug: String
  description: String
  descriptionJson: JSONString
  backgroundImage: Upload
  backgroundImageAlt: String
  seo: SeoInput
  publicationDate: Date
  brand: ID
  isPromo: Boolean
  isFeatured: Boolean
  isFeaturedOnSmFulfilledPage: Boolean
  featuredIn: [PageTypeEnum!]
  color: String
  iconImage: Upload
  iconImageAlt: String
  thumbnailLinkImage: Upload
  thumbnailLinkImageAlt: String
}

enum CollectionPublished {
  PUBLISHED
  HIDDEN
}

type CollectionRemoveProducts {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  collection: Collection
  productErrors: [ProductError!]!
}

type CollectionReorderProducts {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  collection: Collection
  productErrors: [ProductError!]!
}

enum CollectionSortField {
  NAME
  AVAILABILITY
  PRODUCT_COUNT
  PUBLICATION_DATE
}

input CollectionSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: CollectionSortField!
}

type CollectionTranslatableContent implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: String!
  descriptionJson: JSONString!
  translation(languageCode: LanguageCodeEnum!): CollectionTranslation
  collection: Collection
}

type CollectionTranslate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  collection: Collection
}

type CollectionTranslation implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: String!
  descriptionJson: JSONString!
  language: LanguageDisplay!
}

type CollectionUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  collection: Collection
}

type CollectionUpdateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  collection: Collection
}

type CollectionUpdatePrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  collection: Collection
}

enum CompletedReasonsEnum {
  PICKED_UP
  DELIVERED
  OTHER
}

type ConfigurationItem {
  name: String!
  value: String
  type: ConfigurationTypeFieldEnum
  helpText: String
  label: String
}

input ConfigurationItemInput {
  name: String!
  value: String
}

enum ConfigurationTypeFieldEnum {
  STRING
  BOOLEAN
  SECRET
  PASSWORD
  SECRETMULTILINE
}

type ConfirmAccount {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  accountErrors: [AccountError!]!
}

type ConfirmEmailChange {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  accountErrors: [AccountError!]!
}

type ContactUsEmail {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  status: String
  contactUsError: [ContactUsError!]!
}

input ContactUsEmailInput {
  fullName: String!
  company: String!
  mallBranch: ID!
  contactNumber: String!
  emailAddress: String!
  concern: String!
  message: String!
  fileUpload: Upload
}

type ContactUsError {
  field: String
  message: String
  code: ContactUsErrorCode!
}

enum ContactUsErrorCode {
  GRAPHQL_ERROR
  INVALID
  REQUIRED
}

enum CountryCode {
  AF
  AX
  AL
  DZ
  AS
  AD
  AO
  AI
  AQ
  AG
  AR
  AM
  AW
  AU
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BQ
  BA
  BW
  BV
  BR
  IO
  BN
  BG
  BF
  BI
  CV
  KH
  CM
  CA
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CG
  CD
  CK
  CR
  CI
  HR
  CU
  CW
  CY
  CZ
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  SZ
  ET
  EU
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  TF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GU
  GT
  GG
  GN
  GW
  GY
  HT
  HM
  VA
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MG
  MW
  MY
  MV
  ML
  MT
  MH
  MQ
  MR
  MU
  YT
  MX
  FM
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  KP
  MK
  MP
  NO
  OM
  PK
  PW
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  PR
  QA
  RE
  RO
  RU
  RW
  BL
  SH
  KN
  LC
  MF
  PM
  VC
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SX
  SK
  SI
  SB
  SO
  ZA
  GS
  KR
  SS
  ES
  LK
  SD
  SR
  SJ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TL
  TG
  TK
  TO
  TT
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  UM
  US
  UY
  UZ
  VU
  VE
  VN
  VG
  VI
  WF
  EH
  YE
  ZM
  ZW
}

type CountryDisplay {
  code: String!
  country: String!
  vat: VAT!
}

type Coupon implements Node {
  id: ID!
  code: String!
  name: String!
  isFeatured: Boolean!
  isHidden: Boolean!
  isUsageTimerApplied: Boolean!
  isDuplicate: Boolean!
  isNationwide: Boolean
  hasMalls: Boolean
  marksNewCustomer: Boolean!
  assignee: CouponAssignee!
  quantity: Int
  dealType: CouponDealType!
  category: CouponCategoryEnum
  redeemType: CouponRedeemTypeEnum
  usageLimit: Int
  userType: CouponUserTypeEnum
  mainPromoTitle: String!
  mainPromoDescription: String!
  mechanics: String!
  accessPageSubtitle: String!
  accessPageTagline: String!
  accessPageDescription: String!
  eventLocation: String!
  currency: String!
  discountValue: Float
  startDate: DateTime!
  endDate: DateTime!
  redeemStartDate: DateTime!
  redeemEndDate: DateTime!
  eventStartDate: DateTime
  eventEndDate: DateTime
  occurence: CouponOccurenceEnum
  occurenceExclude: [CouponOccurenceExcludeEnum]
  redemptionFrequency: CouponOccurenceEnum
  redemptionExclude: [CouponOccurenceExcludeEnum]
  deeplinkUrl: String!
  shortDynamicLink: String!
  collection: CouponCollection
  assignedAt: DateTime
  createdAt: DateTime
  availableQuantity: Int
  status: CouponStatusEnum
  usageTimerHour: Int
  usageTimerMinute: Int
  usageTimerSecond: Int
  isClaimable: Boolean
  isRedeemable: Boolean
  availableUsageLeft: Int
  promoImage(size: Int): Image
  accessImage(size: Int): Image
  createdBy: User
  malls(filter: MallInput, sortBy: MallSortingInput, status: SmopStatusEnum, offset: Int, before: String, after: String, first: Int, last: Int): MallCountableConnection
  couponRedemptions(filter: CouponRedemptionFilterInput, filterByToken: Boolean, sortBy: CouponRedemptionSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): CouponRedemptionCountableConnection
  couponActivityLogs(offset: Int, before: String, after: String, first: Int, last: Int): DiscountActivityLogCountableConnection
}

type CouponActivate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  coupon: Coupon
  discountErrors: [DiscountError!]!
}

enum CouponAssignee {
  SMO_MARKETING
  HO_MARKETING
  SM_DEALS
  SMO_COMMERCIAL
  MALL_MARKETING
  APP_DEVELOPMENT
}

enum CouponAssigneeEnum {
  SMO_MARKETING
  HO_MARKETING
  SM_DEALS
  SMO_COMMERCIAL
  MALL_MARKETING
  APP_DEVELOPMENT
}

enum CouponCategoryEnum {
  DINING
  CYBERZONE
  WELLNESS
  ENTERTAINMENT
  SHOPPING
  GROCERIES
}

type CouponClaim {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  couponRedemption: CouponRedemption
  discountErrors: [DiscountError!]!
}

type CouponCollection implements Node {
  id: ID!
  title: String!
  subtitle: String!
  classification: CouponCollectionClassificationEnum
  categories: [CouponCollectionCategoryEnum]
  isHidden: Boolean!
  writeup: String!
  deeplinkUrl: String!
  shortDynamicLink: String!
  startDate: DateTime!
  endDate: DateTime!
  createdAt: DateTime
  bannerImage(size: Int): Image
  status: CouponCollectionStatusEnum
  coupons(filter: CouponFilterInput, sortBy: CouponSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): CouponCountableConnection
}

enum CouponCollectionCategoryEnum {
  DINING
  CYBERZONE
  WELLNESS
  ENTERTAINMENT
  SHOPPING
  GROCERIES
  EVENTS
}

enum CouponCollectionClassificationEnum {
  ALL
  DEALS
  EVENTS
}

type CouponCollectionCountableConnection {
  pageInfo: PageInfo!
  edges: [CouponCollectionCountableEdge!]!
  totalCount: Int
}

type CouponCollectionCountableEdge {
  node: CouponCollection!
  cursor: String!
}

type CouponCollectionCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  discountErrors: [DiscountError!]!
  couponCollection: CouponCollection
}

input CouponCollectionCreateInput {
  title: String!
  subtitle: String
  classification: CouponCollectionClassificationEnum
  categories: [CouponCollectionCategoryEnum]
  status: CouponCollectionStatusEnum
  writeup: String
  isHidden: Boolean
  bannerImage: Upload
  bannerImageAlt: String
  startDate: DateTime
  endDate: DateTime
  coupons: [ID]
}

type CouponCollectionDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  couponcollection: CouponCollection
  discountErrors: [DiscountError!]!
  couponCollection: CouponCollection
}

input CouponCollectionFilterInput {
  search: String
  ids: [ID]
  classification: [CouponCollectionClassificationEnum]
  categories: [CouponCollectionCategoryEnum]
  status: [CouponCollectionStatusEnum]
  userTypes: [CouponUserTypeEnum]
  featureIndex: IntRangeInput
  createdAt: DateTimeRangeInput
  updatedAt: DateTimeRangeInput
  startDate: DateTimeRangeInput
  endDate: DateTimeRangeInput
  mallCodes: [String]
  mallIds: [ID]
}

type CouponCollectionGenerateDynamicLink {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  couponCollection: CouponCollection
  discountErrors: [DiscountError!]!
}

enum CouponCollectionSortField {
  TITLE
  FEATURE_INDEX
  CREATED_AT
  UPDATED_AT
  START_DATE
  END_DATE
}

input CouponCollectionSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: CouponCollectionSortField!
}

enum CouponCollectionStatusEnum {
  ACTIVE
  DRAFT
  EXPIRED
  SCHEDULED
  INACTIVE
  DELETED
}

type CouponCollectionToggleActivate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  couponCollection: CouponCollection
  discountErrors: [DiscountError!]!
}

type CouponCollectionToggleIsHidden {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  couponCollection: CouponCollection
  discountErrors: [DiscountError!]!
}

type CouponCollectionUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  discountErrors: [DiscountError!]!
  couponCollection: CouponCollection
}

input CouponCollectionUpdateInput {
  title: String
  subtitle: String
  classification: CouponCollectionClassificationEnum
  categories: [CouponCollectionCategoryEnum]
  status: CouponCollectionStatusEnum
  writeup: String
  isHidden: Boolean
  bannerImage: Upload
  bannerImageAlt: String
  startDate: DateTime
  endDate: DateTime
  coupons: [ID]
}

type CouponCountableConnection {
  pageInfo: PageInfo!
  edges: [CouponCountableEdge!]!
  totalCount: Int
  categoriesAvailable: [CouponCategoryEnum]
  categoriesList: [CouponCategoryEnum]
}

type CouponCountableEdge {
  node: Coupon!
  cursor: String!
}

type CouponCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  discountErrors: [DiscountError!]!
  coupon: Coupon
}

input CouponCreateInput {
  name: String
  isNationwide: Boolean
  category: CouponCategoryEnum
  hasMalls: Boolean
  eventLocation: String
  eventStartDate: DateTime
  eventEndDate: DateTime
  collection: ID
  malls: [ID]
  code: String!
  isFeatured: Boolean!
  isHidden: Boolean!
  isDuplicate: Boolean!
  quantity: Int!
  assignee: CouponAssigneeEnum
  dealType: CouponDealTypeEnum!
  redeemType: CouponRedeemTypeEnum!
  usageLimit: Int!
  usageTimerHour: Int
  usageTimerMinute: Int
  usageTimerSecond: Int
  isUsageTimerApplied: Boolean!
  userType: CouponUserTypeEnum!
  mainPromoTitle: String!
  mainPromoDescription: String!
  mechanics: String!
  accessPageSubtitle: String!
  accessPageTagline: String!
  accessPageDescription: String!
  promoImage: Upload!
  promoImageAlt: String
  accessImage: Upload!
  accessImageAlt: String
  discountValue: PositiveDecimal!
  startDate: DateTime!
  endDate: DateTime!
  redeemStartDate: DateTime!
  redeemEndDate: DateTime!
  occurence: CouponOccurenceEnum!
  occurenceExclude: [CouponOccurenceExcludeEnum]!
  redemptionFrequency: CouponOccurenceEnum!
  redemptionExclude: [CouponOccurenceExcludeEnum]!
}

type CouponDeactivate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  coupon: Coupon
  discountErrors: [DiscountError!]!
}

enum CouponDealType {
  DEALS
  EVENTS
}

enum CouponDealTypeEnum {
  DEALS
  EVENTS
}

type CouponDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  coupon: Coupon
  discountErrors: [DiscountError!]!
}

input CouponFilterInput {
  search: String
  collectionIds: [ID]
  quantity: IntRangeInput
  searchName: String
  showHiddenCoupons: Boolean
  validRedeemEndDate: Boolean
  status: [CouponStatusEnum]
  assignee: [CouponAssigneeEnum]
  category: [CouponCategoryEnum]
  dealType: [CouponDealTypeEnum]
  redeemType: [CouponRedeemTypeEnum]
  usageLimit: IntRangeInput
  userType: [CouponUserTypeEnum]
  discountValue: PriceRangeInput
  occurence: [CouponOccurenceEnum]
  occurenceExclude: [CouponOccurenceExcludeEnum]
  redemptionFrequency: [CouponOccurenceEnum]
  redemptionExclude: [CouponOccurenceExcludeEnum]
  startDate: DateTimeRangeInput
  endDate: DateTimeRangeInput
  redeemStartDate: DateTimeRangeInput
  redeemEndDate: DateTimeRangeInput
  eventStartDate: DateTimeRangeInput
  eventEndDate: DateTimeRangeInput
  exactStartEndDate: DateTime
  isAppliedToAllMalls: Boolean
  isFeatured: Boolean
  isHidden: Boolean
  isNationwide: Boolean
  isClaimable: Boolean
  isRedeemable: Boolean
  hasMalls: Boolean
  redemptionClaimedAt: DateTimeRangeInput
  redemptionRedeemedAt: DateTimeRangeInput
  redemptionSearch: String
  redemptionStatus: [CouponRedemptionStatusEnum]
  userHasRedemption: Boolean
  useMallsFilterFallback: Boolean
  malls: [ID]
  participatingMalls: [ID]
}

type CouponGenerateDynamicLink {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  coupon: Coupon
  discountErrors: [DiscountError!]!
}

type CouponManualReorder {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  coupons: [Coupon]
  discountErrors: [DiscountError!]!
}

input CouponManualReorderInput {
  insertAfter: ID
  insertBefore: ID
  exchangeIndices: Boolean
  coupons: [ID]!
}

enum CouponNotificationStatusEnum {
  IDLE
  FOR_REDEMPTION
  READ_REDEMPTION
  NEAR_EXPIRY
  READ_NEAR_EXPIRY
}

enum CouponOccurenceEnum {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum CouponOccurenceExcludeEnum {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

type CouponPresetReorder {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  coupon: Coupon
  discountErrors: [DiscountError!]!
}

input CouponPresetReorderInput {
  couponId: ID!
  reorderPreset: CouponReorderActionEnum!
}

type CouponRedeem {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  couponRedemption: CouponRedemption
  discountErrors: [DiscountError!]!
}

enum CouponRedeemTypeEnum {
  REDEEM_LATER
  REDEEM_NOW
}

type CouponRedemption implements Node {
  id: ID!
  code: String!
  user: User
  coupon: Coupon
  claimedAt: DateTime
  redeemedAt: DateTime
  notifStatus: CouponRedemptionNotifStatus!
  status: CouponRedemptionStatusEnum
}

type CouponRedemptionCountableConnection {
  pageInfo: PageInfo!
  edges: [CouponRedemptionCountableEdge!]!
  totalCount: Int
}

type CouponRedemptionCountableEdge {
  node: CouponRedemption!
  cursor: String!
}

input CouponRedemptionFilterInput {
  status: [CouponRedemptionStatusEnum]
  search: String
  claimedAt: DateTimeRangeInput
  redeemedAt: DateTimeRangeInput
  date: DateTimeRangeInput
  coupon: ID
  user: ID
  notifStatus: [CouponNotificationStatusEnum]
}

enum CouponRedemptionNotifStatus {
  IDLE
  FOR_REDEMPTION
  READ_REDEMPTION
  NEAR_EXPIRY
  READ_NEAR_EXPIRY
}

enum CouponRedemptionSortField {
  CODE
  CLAIMED_AT
  REDEEMED_AT
  EXPIRED_AT
  COUPON
}

input CouponRedemptionSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: CouponRedemptionSortField!
}

enum CouponRedemptionStatusEnum {
  CLAIMED
  REDEEMED
  EXPIRED
}

type CouponRedemptionUpdateNotifStatus {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  couponRedemptions: [CouponRedemption]
  discountErrors: [DiscountError!]!
}

enum CouponReorderActionEnum {
  ONE_UP
  ONE_DOWN
  TOP_MOST
  BOTTOM_MOST
}

enum CouponSortField {
  CODE
  NAME
  MOST_RECENT_FEATURED
  ASSIGNED_AT
  CREATED_AT
  UPDATED_AT
  START_DATE
  END_DATE
  REDEEM_START_DATE
  REDEEM_START_DATE_NAME
  REDEEM_START_DATE_PROMO
  REDEEM_END_DATE
  REDEEM_END_DATE_NAME
  REDEEM_END_DATE_PROMO
  EVENT_START_DATE
  EVENT_START_DATE_NAME
  EVENT_START_DATE_PROMO
  EVENT_END_DATE
  EVENT_END_DATE_NAME
  EVENT_END_DATE_PROMO
  IS_FEATURED_NAME
  IS_FEATURED_PROMO_TITLE
  ORDERED_FEATURED
  ORDERED_FEATURED_NAME
  ORDERED_FEATURED_PROMO_TITLE
  MAIN_PROMO_TITLE
  REDEMPTION_CLAIMED_AT
  REDEMPTION_REDEEMED_AT
  REDEMPTION_EXPIRED_AT
  MALL_NATIONWIDE_CREATION_DATE
  MALL_DISTANCE_NATIONWIDE
  MALL_DISTANCE_OR_CHOICE
  MALL_FEATURE_NATIONWIDE
}

input CouponSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  malls: [ID]
  userLocation: UserLocationInput
  field: CouponSortField!
}

enum CouponStatusEnum {
  ACTIVE
  DRAFT
  EXPIRED
  SCHEDULED
  COMPLETED
  INACTIVE
  DELETED
}

type CouponToggleIsFeatured {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  coupon: Coupon
  discountErrors: [DiscountError!]!
}

type CouponUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  discountErrors: [DiscountError!]!
  coupon: Coupon
}

input CouponUpdateInput {
  name: String
  isNationwide: Boolean
  category: CouponCategoryEnum
  hasMalls: Boolean
  eventLocation: String
  eventStartDate: DateTime
  eventEndDate: DateTime
  collection: ID
  malls: [ID]
  code: String!
  isFeatured: Boolean!
  isHidden: Boolean!
  isDuplicate: Boolean!
  quantity: Int!
  assignee: CouponAssigneeEnum
  dealType: CouponDealTypeEnum!
  redeemType: CouponRedeemTypeEnum!
  usageLimit: Int!
  usageTimerHour: Int
  usageTimerMinute: Int
  usageTimerSecond: Int
  isUsageTimerApplied: Boolean!
  userType: CouponUserTypeEnum!
  mainPromoTitle: String!
  mainPromoDescription: String!
  mechanics: String!
  accessPageSubtitle: String!
  accessPageTagline: String!
  accessPageDescription: String!
  promoImage: Upload
  promoImageAlt: String
  accessImage: Upload
  accessImageAlt: String
  discountValue: PositiveDecimal!
  startDate: DateTime!
  endDate: DateTime!
  redeemStartDate: DateTime!
  redeemEndDate: DateTime!
  occurence: CouponOccurenceEnum!
  occurenceExclude: [CouponOccurenceExcludeEnum]!
  redemptionFrequency: CouponOccurenceEnum!
  redemptionExclude: [CouponOccurenceExcludeEnum]!
}

enum CouponUserTypeEnum {
  ALL
  NEW
  EXISTING
}

enum CourierTypeEnum {
  GRAB
  IN_HOUSE
  LALAMOVE
  OTHERS
  PANDAGO
}

type CreatePauseReason {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  pauseReason: ServicePauseReason
  servicePauseError: [ServicePauseError!]!
}

input CreatePauseReasonInput {
  reasonTitle: String!
  pauseType: PauseTypeEnum!
}

type CreateRemittanceManualAdjustment {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  event: OrderEvent
  orderErrors: [OrderError!]!
}

type CreateRemittanceManualOverride {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  remittance: Remittance
  orderErrors: [OrderError!]!
}

type CreateToken {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  token: String
  refreshToken: String
  csrfToken: String
  user: User
  accountErrors: [AccountError!]!
}

type CreditCard {
  brand: String!
  firstDigits: String
  lastDigits: String!
  expMonth: Int
  expYear: Int
}

enum CreditCardSortField {
  NAME
  TYPE
  CREATED
  EXPIRATION_DATE
}

input CreditCardSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: CreditCardSortField!
}

type CustomerBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  accountErrors: [AccountError!]!
}

type CustomerCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

type CustomerDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

type CustomerEmailUpdateOtpGenerate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  otp: OTPPrivate
  otpErrors: [OTPError!]!
  oTP: OTPPrivate
}

type CustomerEmailUpdateOtpVerify {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  otp: OTPPrivate
  otpErrors: [OTPError!]!
}

type CustomerEvent implements Node {
  id: ID!
  date: DateTime
  type: CustomerEventsEnum
  user: User
  message: String
  count: Int
  order: Order
  orderLine: OrderLine
}

enum CustomerEventsEnum {
  ACCOUNT_CREATED
  PASSWORD_RESET_LINK_SENT
  PASSWORD_RESET
  EMAIL_CHANGED_REQUEST
  PASSWORD_CHANGED
  EMAIL_CHANGED
  PLACED_ORDER
  NOTE_ADDED_TO_ORDER
  DIGITAL_LINK_DOWNLOADED
  CUSTOMER_DELETED
  NAME_ASSIGNED
  EMAIL_ASSIGNED
  NOTE_ADDED
  MOBILE_CHANGED
}

input CustomerFilterInput {
  dateJoined: DateRangeInput
  moneySpent: PriceRangeInput
  numberOfOrders: IntRangeInput
  placedOrders: DateRangeInput
  search: String
  status: LockStatus
  smac: String
  newCustomerStatus: [CustomerStatus]
}

input CustomerInput {
  defaultBillingAddress: AddressInput
  defaultShippingAddress: AddressInput
  firstName: String
  lastName: String
  email: String
  isActive: Boolean
  note: String
  accessGroup: ID
  gender: Gender
  dateOfBirth: Date
  osUsed: String
  lastOnlineDate: DateTime
  status: LockStatus
  firebaseRegistrationId: String
  lastOrderDate: DateTime
  lastOrderStatus: OrderStatusFilter
  riskCustomer: Boolean
  distanceFromMall: Decimal
  customerSegment: CustomerSegment
}

type CustomerOTPGenerate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  otp: OTPPrivate
  otpErrors: [OTPError!]!
  oTP: OTPPrivate
}

input CustomerOTPGenerateInput {
  email: String!
}

type CustomerOTPVerify {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  otp: OTPPrivate
  otpErrors: [OTPError!]!
}

input CustomerOTPVerifyInput {
  email: String!
  pin: String!
}

type CustomerReregister {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

enum CustomerSegment {
  SEGMENT1
  SEGMENT2
  SEGMENT3
}

type CustomerSoftDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

enum CustomerStatus {
  NEW
  ACT
}

type CustomerUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

scalar Date

input DateRangeInput {
  gte: Date
  lte: Date
}

scalar DateTime

input DateTimeRangeInput {
  gte: DateTime
  lte: DateTime
}

type DeactivateAllUserTokens {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
}

type DeactivateUserToken {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
}

scalar Decimal

type DeleteCreditCard {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  creditCard: UserCreditCard
  accountErrors: [AccountError!]!
}

type DeleteMetadata {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  metadataErrors: [MetadataError!]!
  item: ObjectWithMetadata
}

type DeletePrivateMetadata {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  metadataErrors: [MetadataError!]!
  item: ObjectWithMetadata
}

enum DeliveriesStatus {
  GRAB_QUEUEING
  GRAB_ALLOCATING
  GRAB_PENDING_PICKUP
  GRAB_PICKING_UP
  GRAB_PENDING_DROP_OFF
  GRAB_IN_DELIVERY
  GRAB_COMPLETED
  GRAB_RETURNED
  GRAB_IN_RETURN
  GRAB_FAILED
  GRAB_CANCELED
  GRAB_USER_CANCELED
  TP_2GO_TO_SEND
  TP_2GO_SENT
  TP_2GO_SERVED
  TP_2GO_UNSERVED
  TP_2GO_CANCELLED
  TP_2GO_ARRIVAL
  TP_2GO_OFF_LOADED
  TP_2GO_ACCEPTANCE
  TP_2GO_LOADED
  TP_2GO_OUT_FOR_DELIVERY
  TP_2GO_ON_FORWARDED
  TP_2GO_ON_HOLD
  TP_2GO_IN_TRANSIT
  TP_2GO_CONSIGNEE_NOT_AROUND
  TP_2GO_REFUSED_TO_ACCEPT
  TP_2GO_REFUSED_TO_PAY
  TP_2GO_RETURNED_TO_SENDER
  TP_2GO_RETURNED_TO_CUSTOMER
  TP_2GO_DELIVERED
  TP_2GO_FLOODED_AREA
  TP_2GO_HOLD_TRANSACTION
  TP_2GO_BUSINESS_CLOSED
  TP_2GO_INVOICE_FOR_CHECKING
  TP_2GO_RESIDENCE_CLOSED
  TP_2GO_ROAD_CLOSED
  TP_2GO_PAYMENT_NOT_READY
  TP_2GO_TRANSFERRED
  TP_2GO_UNKNOWN_CONSIGNEE
  TP_2GO_LOST_CARGO
  TP_2GO_NO_SHOW
  TP_2GO_OFFICE_CLOSED
  TP_2GO_MISROUTED
  TP_2GO_BAD_ADDRESS
  TP_2GO_DELIVERY_CANCELLED
  TP_2GO_WITH_FILED_CLAIMS
  TP_2GO_FAILED_BOOKING
  PANDAGO_NEW
  PANDAGO_RECEIVED
  PANDAGO_WAITING_FOR_TRANSPORT
  PANDAGO_ASSIGNED_TO_TRANSPORT
  PANDAGO_COURIER_ACCEPTED_DELIVERY
  PANDAGO_NEAR_VENDOR
  PANDAGO_PICKED_UP
  PANDAGO_COURIER_LEFT_VENDOR
  PANDAGO_NEAR_CUSTOMER
  PANDAGO__DELIVERED
  PANDAGO_CANCELLED
  PANDAGO_RETURNED_TO_VENDOR
  PANDAGO_DELAYED
  PANDAGO_USER_CANCELLED
  GENERAL_ASSIGNING
  GENERAL_PICKING_UP
  GENERAL_IN_DELIVERY
  GENERAL_COMPLETED
  GENERAL_CANCELLED
  GENERAL_IN_RETURN
  GENERAL_RETURNED
  GENERAL_FAILED
  GENERAL_DELAYED
  GENERAL_USER_CANCELLED
}

type DeliveryCourier implements Node {
  id: ID!
  order: Order
  homeLocation: HomeLocation
  dropOffLocation: DropOffLocation
  senderFirstName: String
  senderLastName: String
  senderContactNo: String
  shippingCompany: String
  referenceNo: String
  status: DeliveriesStatus
  notes: String!
  trackingUrl: String
  deliveryCostAmount: Float
  bookedBy: User
  bookedAt: DateTime
  canceledAt: DateTime
  returnedAt: DateTime
  shippedAt: DateTime
  completedAt: DateTime
  tripDistance: Int
  riderPickUpLocation: RiderPickUpLocation
  pickUpImageUrl: Image
  dropOffImageUrl: Image
  returnImageUrl: Image
  failedReason: String
}

enum DeliveryTypeEnum {
  EXPRESS
  NEXT_DAY
  IN_STORE_PICKUP
  EXPRESS_LONG_DISTANCE
  NATIONWIDE_DELIVERY
  SAME_DAY
}

type DigitalContent implements Node & ObjectWithMetadata {
  useDefaultSettings: Boolean!
  automaticFulfillment: Boolean!
  productVariant: ProductVariant!
  contentFile: String!
  maxDownloads: Int
  urlValidDays: Int
  urls: [DigitalContentUrl]
  id: ID!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
}

type DigitalContentCountableConnection {
  pageInfo: PageInfo!
  edges: [DigitalContentCountableEdge!]!
  totalCount: Int
}

type DigitalContentCountableEdge {
  node: DigitalContent!
  cursor: String!
}

type DigitalContentCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  variant: ProductVariant
  content: DigitalContent
  productErrors: [ProductError!]!
}

type DigitalContentDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  variant: ProductVariant
  productErrors: [ProductError!]!
}

input DigitalContentInput {
  useDefaultSettings: Boolean!
  maxDownloads: Int
  urlValidDays: Int
  automaticFulfillment: Boolean
}

type DigitalContentUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  variant: ProductVariant
  content: DigitalContent
  productErrors: [ProductError!]!
}

input DigitalContentUploadInput {
  useDefaultSettings: Boolean!
  maxDownloads: Int
  urlValidDays: Int
  automaticFulfillment: Boolean
  contentFile: Upload!
}

type DigitalContentUrl implements Node {
  content: DigitalContent!
  created: DateTime!
  downloadNum: Int!
  id: ID!
  url: String
  token: UUID!
}

type DigitalContentUrlCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  digitalContentUrl: DigitalContentUrl
}

input DigitalContentUrlCreateInput {
  content: ID!
}

type DiscountActivityLog implements Node {
  modelName: String!
  action: DiscountActivityLogAction!
  subject: Int
  createdAt: DateTime
  updatedAt: DateTime
  message: String!
  newValues: JSONString
  field: String
  id: ID!
  user: User
}

enum DiscountActivityLogAction {
  UPDATE
  DELETE
  CREATE
}

type DiscountActivityLogCountableConnection {
  pageInfo: PageInfo!
  edges: [DiscountActivityLogCountableEdge!]!
  totalCount: Int
}

type DiscountActivityLogCountableEdge {
  node: DiscountActivityLog!
  cursor: String!
}

enum DiscountDeliveryTypeEnum {
  ALL
  NEXT_DAY
  SAME_DAY
  IN_STORE
  EXPRESS_DELIVERY
  EXPRESS_LONG_DISTANCE_DELIVERY
  NATIONWIDE_DELIVERY
}

type DiscountError {
  field: String
  message: String
  code: DiscountErrorCode!
}

enum DiscountErrorCode {
  ALREADY_EXISTS
  EXPIRED
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  UNSUPPORTED_FILE_TYPE
}

enum DiscountPaymentMethodEnum {
  ALL
  CASH
  CARD
}

enum DiscountStatusEnum {
  ACTIVE
  EXPIRED
  SCHEDULED
  DELETED
  INACTIVE
}

type DiscountUploadEvent implements Node {
  id: ID!
  date: DateTime!
  type: UploadEventsEnum!
  job: DiscountUploadJob
}

type DiscountUploadJob implements Node & Job {
  id: ID!
  user: User
  errorFileUrl: String!
  status: JobStatusEnum!
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String
  date: DateTime!
  uploadEvents: [DiscountUploadEvent!]
  templateType: DiscountUploadTemplateTypeEnum
}

type DiscountUploadTemplate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  discountUpload: DiscountUploadJob
  discountErrors: [DiscountError!]!
}

input DiscountUploadTemplateInput {
  file: Upload!
  templateType: DiscountUploadTemplateTypeEnum!
  uploadAs: ProductUserViewEnum
  brand: ID
}

enum DiscountUploadTemplateTypeEnum {
  SALE_MERCHANT_PERCENTAGE_PRODUCT_FILE
  SALE_MERCHANT_ABSOLUTE_VALUE_PRODUCT_FILE
  SALE_PARTNERSHIP_ABSOLUTE_VALUE_PRODUCT_FILE
  SALE_PARTNERSHIP_PERCENTAGE_PRODUCT_FILE
}

enum DiscountValueTypeEnum {
  FIXED
  PERCENTAGE
  ABSOLUTE_VALUE
}

type Distance {
  unit: DistanceUnitsEnum!
  value: Float!
}

scalar DistanceScalar

enum DistanceUnitsEnum {
  FT
  M
  CM
  MM
}

type Domain {
  host: String!
  sslEnabled: Boolean!
  url: String!
}

type DraftCouponCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  discountErrors: [DiscountError!]!
  coupon: Coupon
}

input DraftCouponCreateInput {
  name: String
  isNationwide: Boolean
  category: CouponCategoryEnum
  hasMalls: Boolean
  eventLocation: String
  eventStartDate: DateTime
  eventEndDate: DateTime
  collection: ID
  malls: [ID]
  code: String
  isFeatured: Boolean
  isHidden: Boolean
  isDuplicate: Boolean
  quantity: Int
  dealType: CouponDealTypeEnum
  redeemType: CouponRedeemTypeEnum
  usageLimit: Int
  usageTimerHour: Int
  usageTimerMinute: Int
  usageTimerSecond: Int
  isUsageTimerApplied: Boolean!
  userType: CouponUserTypeEnum
  assignee: CouponAssigneeEnum
  mainPromoTitle: String!
  mainPromoDescription: String
  mechanics: String
  accessPageSubtitle: String
  accessPageTagline: String
  accessPageDescription: String
  promoImage: Upload
  promoImageAlt: String
  accessImage: Upload
  accessImageAlt: String
  discountValue: PositiveDecimal
  startDate: DateTime
  endDate: DateTime
  redeemStartDate: DateTime
  redeemEndDate: DateTime
  occurence: CouponOccurenceEnum
  occurenceExclude: [CouponOccurenceExcludeEnum]
  redemptionFrequency: CouponOccurenceEnum
  redemptionExclude: [CouponOccurenceExcludeEnum]
}

type DraftCouponUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  discountErrors: [DiscountError!]!
  coupon: Coupon
}

input DraftCouponUpdateInput {
  name: String
  isNationwide: Boolean
  category: CouponCategoryEnum
  hasMalls: Boolean
  eventLocation: String
  eventStartDate: DateTime
  eventEndDate: DateTime
  collection: ID
  malls: [ID]
  code: String
  isFeatured: Boolean
  isHidden: Boolean
  isDuplicate: Boolean
  quantity: Int
  dealType: CouponDealTypeEnum
  redeemType: CouponRedeemTypeEnum
  usageLimit: Int
  usageTimerHour: Int
  usageTimerMinute: Int
  usageTimerSecond: Int
  isUsageTimerApplied: Boolean!
  userType: CouponUserTypeEnum
  assignee: CouponAssigneeEnum
  mainPromoTitle: String!
  mainPromoDescription: String
  mechanics: String
  accessPageSubtitle: String
  accessPageTagline: String
  accessPageDescription: String
  promoImage: Upload
  promoImageAlt: String
  accessImage: Upload
  accessImageAlt: String
  discountValue: PositiveDecimal
  startDate: DateTime
  endDate: DateTime
  redeemStartDate: DateTime
  redeemEndDate: DateTime
  occurence: CouponOccurenceEnum
  occurenceExclude: [CouponOccurenceExcludeEnum]
  redemptionFrequency: CouponOccurenceEnum
  redemptionExclude: [CouponOccurenceExcludeEnum]
}

type DraftOrderBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  orderErrors: [OrderError!]!
}

type DraftOrderComplete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  orderErrors: [OrderError!]!
}

type DraftOrderCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  orderErrors: [OrderError!]!
  order: Order
}

input DraftOrderCreateInput {
  billingAddress: AddressInput
  user: ID
  userEmail: String
  discount: PositiveDecimal
  shippingAddress: AddressInput
  shippingMethod: ID
  voucher: ID
  customerNote: String
  mall: ID
  lines: [OrderLineCreateInput]
}

type DraftOrderDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  orderErrors: [OrderError!]!
  order: Order
}

input DraftOrderInput {
  billingAddress: AddressInput
  user: ID
  userEmail: String
  discount: PositiveDecimal
  shippingAddress: AddressInput
  shippingMethod: ID
  voucher: ID
  customerNote: String
  mall: ID
}

type DraftOrderLineDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  orderLine: OrderLine
  orderErrors: [OrderError!]!
}

type DraftOrderLineUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  orderErrors: [OrderError!]!
  orderLine: OrderLine
}

type DraftOrderLinesBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  orderErrors: [OrderError!]!
}

type DraftOrderLinesCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  orderLines: [OrderLine!]
  orderErrors: [OrderError!]!
}

type DraftOrderUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  orderErrors: [OrderError!]!
  order: Order
}

type DropOffLocation implements Node & ObjectWithMetadata {
  mall: Mall
  name: String
  code: String
  description: String
  deletedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  status: LogisticsStatusEnum
  template: Template
  longitude: Float
  latitude: Float
  remarks: String
  dropOffAddress: String
  defaultDropOffLocation: Boolean
  id: ID!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  taskAreas: [TaskArea]
  firstName: String
  lastName: String
  contactNo: String
  racks(offset: Int, before: String, after: String, first: Int, last: Int): RackCountableConnection
}

type DropOffLocationCountableConnection {
  pageInfo: PageInfo!
  edges: [DropOffLocationCountableEdge!]!
  totalCount: Int
}

type DropOffLocationCountableEdge {
  node: DropOffLocation!
  cursor: String!
}

type DropOffLocationCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  dropOffLocationError: [DropOffLocationError!]!
  dropOffLocation: DropOffLocation
}

input DropOffLocationCreateInput {
  firstName: String
  lastName: String
  contactNo: String
  longitude: Decimal
  latitude: Decimal
  dropOffAddress: String
  remarks: String
  defaultDropOffLocation: Boolean
  description: String
  name: String!
  code: String
  mall: ID!
  status: LogisticsStatusEnum!
  templateId: ID
}

type DropOffLocationError {
  field: String
  message: String
  code: DropOffLocationErrorCode!
}

enum DropOffLocationErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input DropOffLocationInput {
  search: String
  mall: ID
  ids: [ID]
  status: LogisticsStatusEnum
  templateStatus: TemplateStatusEnum
}

type DropOffLocationUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  dropOffLocationError: [DropOffLocationError!]!
  dropOffLocation: DropOffLocation
}

input DropOffLocationUpdateInput {
  firstName: String
  lastName: String
  contactNo: String
  longitude: Decimal
  latitude: Decimal
  dropOffAddress: String
  remarks: String
  defaultDropOffLocation: Boolean
  description: String
  name: String!
  code: String
  mall: ID
  status: LogisticsStatusEnum
}

type DynamicLink implements Node {
  name: String!
  deeplinkUrl: String
  shortDynamicLink: String
  longDynamicLink: String
  createdAt: DateTime
  updatedAt: DateTime
  id: ID!
  type: PageTypeEnum
}

type DynamicLinkCountableConnection {
  pageInfo: PageInfo!
  edges: [DynamicLinkCountableEdge!]!
  totalCount: Int
}

type DynamicLinkCountableEdge {
  node: DynamicLink!
  cursor: String!
}

type EnableAllMallRemittance {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  malls: [Mall]
  remittanceErrors: [RemittanceError!]!
}

type EnableMallRemittance {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  mall: Mall
  remittanceErrors: [RemittanceError!]!
}

type EndServicePause {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  servicePause: ServicePause
  servicePauseError: [ServicePauseError!]!
}

input EndServicePauseInput {
  tenantId: ID
  mallId: ID
}

type Error {
  field: String
  message: String
}

type ExportCouponRedemptions {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  exportFile: ExportFile
  exportErrors: [ExportError!]!
}

input ExportCouponRedemptionsInput {
  couponId: ID!
  filter: CouponRedemptionFilterInput
  fileName: String
  fileType: FileTypesEnum!
}

type ExportError {
  field: String
  message: String
  code: ExportErrorCode!
}

enum ExportErrorCode {
  INVALID
  NOT_FOUND
  REQUIRED
}

type ExportEvent implements Node {
  id: ID!
  date: DateTime!
  type: ExportEventsEnum!
  user: User
  app: App
  message: String!
}

enum ExportEventsEnum {
  EXPORT_PENDING
  EXPORT_SUCCESS
  EXPORT_FAILED
  EXPORT_DELETED
  EXPORTED_FILE_SENT
  EXPORT_FAILED_INFO_SENT
}

type ExportFile implements Node & Job {
  id: ID!
  user: User
  app: App
  status: JobStatusEnum!
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String
  url: String
  events: [ExportEvent!]
}

type ExportFileCountableConnection {
  pageInfo: PageInfo!
  edges: [ExportFileCountableEdge!]!
  totalCount: Int
}

type ExportFileCountableEdge {
  node: ExportFile!
  cursor: String!
}

input ExportFileFilterInput {
  createdAt: DateTimeRangeInput
  updatedAt: DateTimeRangeInput
  status: JobStatusEnum
  user: String
  app: String
}

enum ExportFileSortField {
  STATUS
  CREATED_AT
  UPDATED_AT
}

input ExportFileSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: ExportFileSortField!
}

input ExportInfoInput {
  attributes: [ID!]
  warehouses: [ID!]
  fields: [ProductFieldEnum!]
  template: ProductTemplateEnum
}

type ExportOrders {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  exportFile: ExportFile
  exportErrors: [ExportError!]!
}

input ExportOrdersInput {
  scope: ExportScope!
  filter: OrderFilterInput
  ids: [ID!]
  fileName: String!
  fileType: FileTypesEnum!
}

type ExportProducts {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  exportFile: ExportFile
  exportErrors: [ExportError!]!
}

input ExportProductsInput {
  scope: ExportScope!
  filter: ProductFilterInput
  ids: [ID!]
  exportInfo: ExportInfoInput
  fileType: FileTypesEnum!
  viewAs: ProductUserViewEnum
}

type ExportRemittanceOrders {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  exportFile: ExportFile
  exportErrors: [ExportError!]!
}

input ExportRemittanceOrdersInput {
  scope: ExportScope!
  filter: RemittanceOrderFilterInput
  ids: [ID!]
  fileName: String!
  fileType: FileTypesEnum!
}

type ExportSaleErrorVariants {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  exportFile: ExportFile
  exportErrors: [ExportError!]!
}

input ExportSaleErrorVariantsInput {
  saleId: ID!
  fileName: String!
  fileNameTimestamp: String
  fileType: FileTypesEnum!
}

enum ExportScope {
  ALL
  IDS
  FILTER
  IDS_AND_FILTER
}

type ExportStoreOrders {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  exportFile: ExportFile
  exportErrors: [ExportError!]!
}

input ExportStoreOrdersInput {
  scope: ExportScope!
  filter: StoreOrderFilterInput
  ids: [ID!]
  fileName: String!
  fileType: FileTypesEnum!
}

enum FileTypesEnum {
  CSV
  XLSX
}

input FirebaseDetailsInput {
  firebaseRegistrationId: String!
}

type FirebaseDetailsUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

type FollowBrand {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  brand: Brand
  brandErrors: [BrandError!]!
}

input FreshdeskDetailsInput {
  freshdeskRestoreId: String!
}

type FreshdeskDetailsUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

type Fulfillment implements Node & ObjectWithMetadata {
  id: ID!
  fulfillmentOrder: Int!
  status: FulfillmentStatus!
  trackingNumber: String!
  created: DateTime!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  lines: [FulfillmentLine]
  statusDisplay: String
  warehouse: Warehouse
}

type FulfillmentCancel {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  fulfillment: Fulfillment
  order: Order
  orderErrors: [OrderError!]!
}

input FulfillmentCancelInput {
  warehouseId: ID!
}

type FulfillmentClearMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  fulfillment: Fulfillment
}

type FulfillmentClearPrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  fulfillment: Fulfillment
}

type FulfillmentLine implements Node {
  id: ID!
  quantity: Int!
  orderLine: OrderLine
}

enum FulfillmentStatus {
  FULFILLED
  CANCELED
}

type FulfillmentUpdateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  fulfillment: Fulfillment
}

type FulfillmentUpdatePrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  fulfillment: Fulfillment
}

type FulfillmentUpdateTracking {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  fulfillment: Fulfillment
  order: Order
  orderErrors: [OrderError!]!
}

input FulfillmentUpdateTrackingInput {
  trackingNumber: String
  notifyCustomer: Boolean = false
}

type GatewayConfigLine {
  field: String!
  value: String
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  PREFER_NOT_TO_SAY
}

type GenerateRemittanceId {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  remittance: Remittance
  remittanceErrors: [RemittanceError!]!
}

scalar GenericScalar

type Geolocalization {
  country: CountryDisplay
}

type GiftCard implements Node {
  code: String
  user: User
  created: DateTime!
  startDate: Date!
  endDate: Date
  lastUsedOn: DateTime
  isActive: Boolean!
  tenant: Tenant
  brand: Brand
  initialBalance: Money
  currentBalance: Money
  id: ID!
  displayCode: String
}

type GiftCardActivate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  giftCard: GiftCard
  giftCardErrors: [GiftCardError!]!
}

type GiftCardCountableConnection {
  pageInfo: PageInfo!
  edges: [GiftCardCountableEdge!]!
  totalCount: Int
}

type GiftCardCountableEdge {
  node: GiftCard!
  cursor: String!
}

type GiftCardCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  giftCardErrors: [GiftCardError!]!
  giftCard: GiftCard
}

input GiftCardCreateInput {
  startDate: Date
  endDate: Date
  balance: PositiveDecimal
  userEmail: String
  tenant: ID
  brand: ID
  code: String
}

type GiftCardDeactivate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  giftCard: GiftCard
  giftCardErrors: [GiftCardError!]!
}

type GiftCardError {
  field: String
  message: String
  code: GiftCardErrorCode!
}

enum GiftCardErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

type GiftCardUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  giftCardErrors: [GiftCardError!]!
  giftCard: GiftCard
}

input GiftCardUpdateInput {
  startDate: Date
  endDate: Date
  balance: PositiveDecimal
  userEmail: String
  tenant: ID
  brand: ID
}

type Group implements Node {
  id: ID!
  name: String!
  permissions: [Permission]
  isLocked: Boolean
  smopUsertypeCode: SmopUserTypeCode
  users: [User]
  userCanManage: Boolean!
}

type GroupCountableConnection {
  pageInfo: PageInfo!
  edges: [GroupCountableEdge!]!
  totalCount: Int
}

type GroupCountableEdge {
  node: Group!
  cursor: String!
}

input HasCouponInput {
  value: Boolean
  category: [CouponCategoryEnum]
  dealType: [CouponDealTypeEnum]
  status: [CouponStatusEnum]
}

type HidePauseReason {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  pauseReason: ServicePauseReason
  servicePauseError: [ServicePauseError!]!
}

input HidePauseReasonInput {
  reasonId: ID
  isHidden: Boolean!
}

type HomeLocation implements Node {
  id: ID!
  name: String!
  longitude: Float
  latitude: Float
  remarks: String
  warehouse: Warehouse
}

type HomeLocationCountableConnection {
  pageInfo: PageInfo!
  edges: [HomeLocationCountableEdge!]!
  totalCount: Int
}

type HomeLocationCountableEdge {
  node: HomeLocation!
  cursor: String!
}

type HomeLocationCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  homeLocation: HomeLocation
  homeLocationErrors: [HomeLocationError!]!
}

type HomeLocationDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  homeLocation: HomeLocation
  homeLocationErrors: [HomeLocationError!]!
}

type HomeLocationError {
  field: String
  message: String
  code: HomeLocationErrorCode!
}

enum HomeLocationErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

type HomeLocationUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  homeLocation: HomeLocation
  homeLocationErrors: [HomeLocationError!]!
}

type HomepageCollectionUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shop: Shop
  shopErrors: [ShopError!]!
}

type Image {
  url: String!
  alt: String
}

type InStorePickupLocation implements Node {
  id: ID!
  companyName: String!
  addressLine1: String!
  addressLine2: String!
  city: String!
  postalCode: String!
  region: String!
  country: String!
  latitude: Float
  longitude: Float
  timezone: String!
  mall(offset: Int, before: String, after: String, first: Int, last: Int): MallCountableConnection!
  brand(offset: Int, before: String, after: String, first: Int, last: Int): BrandPrivateCountableConnection!
  createdAt: DateTime
  updatedAt: DateTime
  pickuplocationservicetimeSet(offset: Int, before: String, after: String, first: Int, last: Int): ServiceHoursCountableConnection!
  serviceHours: [ServiceHours]
}

type InStorePickupLocationCountableConnection {
  pageInfo: PageInfo!
  edges: [InStorePickupLocationCountableEdge!]!
  totalCount: Int
}

type InStorePickupLocationCountableEdge {
  node: InStorePickupLocation!
  cursor: String!
}

input IntRangeInput {
  gte: Int
  lte: Int
}

type Invoice implements ObjectWithMetadata & Job & Node {
  id: ID!
  metadata: [MetadataItem]!
  status: JobStatusEnum!
  number: String
  externalUrl: String
  privateMetadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String
  url: String
}

type InvoiceCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  invoiceErrors: [InvoiceError!]!
  invoice: Invoice
}

input InvoiceCreateInput {
  number: String!
  url: String!
}

type InvoiceDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  invoiceErrors: [InvoiceError!]!
  invoice: Invoice
}

type InvoiceError {
  field: String
  message: String
  code: InvoiceErrorCode!
}

enum InvoiceErrorCode {
  REQUIRED
  NOT_READY
  URL_NOT_SET
  EMAIL_NOT_SET
  NUMBER_NOT_SET
  NOT_FOUND
  INVALID_STATUS
}

type InvoiceRequest {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  invoiceErrors: [InvoiceError!]!
  invoice: Invoice
}

type InvoiceRequestDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  invoiceErrors: [InvoiceError!]!
  invoice: Invoice
}

type InvoiceSendEmail {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  invoiceErrors: [InvoiceError!]!
  invoice: Invoice
}

type InvoiceUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  invoiceErrors: [InvoiceError!]!
  invoice: Invoice
}

scalar JSONString

interface Job {
  status: JobStatusEnum!
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String
}

enum JobStatusEnum {
  PENDING
  SUCCESS
  FAILED
  DELETED
  WITH_ERROR_FILE
  EMPTY_FILE
}

enum LanguageCodeEnum {
  AR
  AZ
  BG
  BN
  CA
  CS
  DA
  DE
  EL
  EN
  ES
  ES_CO
  ET
  FA
  FI
  FR
  HI
  HU
  HY
  ID
  IS
  IT
  JA
  KA
  KM
  KO
  LT
  MN
  MY
  NB
  NL
  PL
  PT
  PT_BR
  RO
  RU
  SK
  SL
  SQ
  SR
  SV
  SW
  TA
  TH
  TR
  UK
  VI
  ZH_HANS
  ZH_HANT
}

type LanguageDisplay {
  code: LanguageCodeEnum!
  language: String!
}

enum LockStatus {
  BLOCKED
  INACTIVE
  ACTIVE
  UNVERIFIED
  DELETED
}

enum LogisticsStatusEnum {
  ACTIVE
  INACTIVE
  DELETED
  DRAFT
}

type Mall implements Node & ObjectWithMetadata {
  id: ID!
  address: Address
  name: String
  code: String
  description: String
  longitude: Decimal
  latitude: Decimal
  provinceCode: String
  provinceName: String
  city: String
  contactPerson: String
  mobileNo: String
  telephoneNo: String
  email: String
  totalLandArea: Decimal
  mallAdmin: User
  genMerchCutoffTime: Time
  groceryCutoffTime: Time
  foodAndBevCutoffTime: Time
  sameDayGmCutoffTime: Time
  isInMallPickup: Boolean
  isNationwideDelivery: Boolean
  serviceArea: String
  status: SmopStatusEnum
  createdAt: DateTime
  updatedAt: DateTime
  remittanceConfig: RemittanceConfig
  hasActiveCoupons: Boolean
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  mallOpening: Time
  mallClosing: Time
  tenants(status: SmopStatusEnum): [Tenant]
  isServiceable: Boolean
  hasCoupons(categories: [CouponCategoryEnum], dealTypes: [CouponDealTypeEnum], status: [CouponStatusEnum]): Boolean
  warehouses(offset: Int, before: String, after: String, first: Int, last: Int): WarehouseCountableConnection
  expressDeliveryAvailable: Boolean
  expressLongDistanceAvailable: Boolean
  nextDayAvailable: Boolean
  sameDayAvailable: Boolean
  dropOffLocations(offset: Int, before: String, after: String, first: Int, last: Int): DropOffLocationCountableConnection
  templates(offset: Int, before: String, after: String, first: Int, last: Int): TemplateCountableConnection
  firstLevelCategories: [Category]
  secondLevelCategories(parent: ID): [Category]
  firstShippingZone: ShippingZone
  smMarketExternalId: Int
  smMarketExternalName: String
  smMarketExternalCode: String
  gmAutoBookingConfig: AutoBookingConfig
  fbAutoBookingConfig: AutoBookingConfig
  autoBookingConfig: [AutoBookingConfig]
  hasEnabledAutoBooking: Boolean
  mallShippingMethod: [MallShippingMethod]
}

input MallActivityLogInput {
  search: String
  id: [ID]
  updatedBy: [ID]
  action: ActivityLogActionsEnum
  subject: String
  created: DateRangeInput
}

type MallCountableConnection {
  pageInfo: PageInfo!
  edges: [MallCountableEdge!]!
  totalCount: Int
}

type MallCountableEdge {
  node: Mall!
  cursor: String!
}

type MallCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  mallErrors: [MallError!]!
  mall: Mall
}

input MallCreateInput {
  name: String!
  code: String!
  description: String
  longitude: Decimal!
  latitude: Decimal!
  provinceCode: String!
  provinceName: String!
  city: String!
  status: SmopStatusEnum
  contactPerson: String!
  mobileNo: String!
  telephoneNo: String!
  email: String!
  address: ID
  mallAdmin: ID
  totalLandArea: Decimal
  mallOpening: Time
  mallClosing: Time
  serviceArea: Decimal
  isServiceable: Boolean
  expressDeliveryAvailable: Boolean
  expressLongDistanceAvailable: Boolean
  isInMallPickup: Boolean
  nextDayAvailable: Boolean
  sameDayAvailable: Boolean
  isNationwideDelivery: Boolean
  genMerchCutoffTime: Time
  groceryCutoffTime: Time
  foodAndBevCutoffTime: Time
  sameDayGmCutoffTime: Time
  smMarketExternalId: Int
  smMarketExternalName: String
  smMarketExternalCode: String
}

input MallDistanceInput {
  mallId: ID
  distance: Decimal
}

type MallError {
  field: String
  message: String
  code: MallErrorCode!
}

enum MallErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  HAS_TENANT
}

input MallInput {
  search: String
  brand: ID
  isSystemMaintained: Boolean
  id: [ID]
  isServiceable: Boolean
  status: String
  statuses: [SmopStatusEnum]
  hasCoupons: Boolean
  hasActiveCoupons: Boolean
  hasCouponsFiltered: HasCouponInput
  userMalls: Boolean
  users: [ID]
}

type MallShippingMethod implements Node & ObjectWithMetadata {
  mall: Mall
  shippingMethod: ShippingMethod
  startTime: Time
  endTime: Time
  createdBy: User
  createdAt: Time
  updatedBy: User
  updatedAt: Time
  id: ID!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
}

type MallShippingMethodActivityLog implements Node {
  modelName: String!
  action: MallShippingMethodActivityLogAction!
  subject: Int
  doer: User
  createdAt: DateTime
  updatedAt: DateTime
  message: String!
  newValues: JSONString
  field: String
  id: ID!
  user: User
}

enum MallShippingMethodActivityLogAction {
  UPDATE
  DELETE
  CREATE
}

type MallShippingMethodActivityLogCountableConnection {
  pageInfo: PageInfo!
  edges: [MallShippingMethodActivityLogCountableEdge!]!
  totalCount: Int
}

type MallShippingMethodActivityLogCountableEdge {
  node: MallShippingMethodActivityLog!
  cursor: String!
}

enum MallSortField {
  NUMBER
  NAME
  MALL_NAME
  CODE
  NAME_AND_STATUS
  STATUS
  CREATION_DATE
}

input MallSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: MallSortField!
}

type MallUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  mallErrors: [MallError!]!
  mall: Mall
}

input MallUpdateInput {
  name: String
  code: String
  description: String
  longitude: Decimal
  latitude: Decimal
  provinceCode: String
  provinceName: String
  city: String
  status: SmopStatusEnum
  contactPerson: String
  mobileNo: String
  telephoneNo: String
  email: String
  address: ID
  mallAdmin: ID
  totalLandArea: Decimal
  mallOpening: Time
  mallClosing: Time
  serviceArea: Decimal
  isServiceable: Boolean
  expressDeliveryAvailable: Boolean
  expressLongDistanceAvailable: Boolean
  isInMallPickup: Boolean
  nextDayAvailable: Boolean
  sameDayAvailable: Boolean
  isNationwideDelivery: Boolean
  genMerchCutoffTime: Time
  groceryCutoffTime: Time
  foodAndBevCutoffTime: Time
  sameDayGmCutoffTime: Time
  smMarketExternalId: Int
  smMarketExternalName: String
  smMarketExternalCode: String
}

type Manifest {
  identifier: String!
  version: String!
  name: String!
  about: String
  permissions: [Permission]
  appUrl: String
  configurationUrl: String
  tokenTargetUrl: String
  dataPrivacy: String
  dataPrivacyUrl: String
  homepageUrl: String
  supportUrl: String
}

type Margin {
  start: Int
  stop: Int
}

type MarkRemittanceAsPaymentCollected {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: [Order]
  remittanceErrors: [RemittanceError!]!
}

type MarketToken {
  token: String
}

input MeOrderFilterInput {
  orderCode: String
  parcelNo: String
  paymentStatus: [PaymentChargeStatusEnum]
  smopStatus: [SmopOrderStatusEnum]
  earliestStoreOrderStatus: [SmopOrderStatusEnum]
  verticalType: [StoreTypeEnum]
  customer: String
  created: DateRangeInput
  search: String
  malls: [ID]
  deliveryTypes: [DeliveryTypeEnum]
  deliverySchedules: DateRangeInput
  brandName: String
  paymentMethod: String
  riderName: StaffNameInput
  runnerName: StaffNameInput
  paymentChannelCode: [PaymentChannelCodeEnum]
  isFromShopify: Boolean
  isShopifyOrderCreated: Boolean
}

type Menu implements Node {
  id: ID!
  name: String!
  slug: String!
  items: [MenuItem]
}

type MenuBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  menuErrors: [MenuError!]!
}

type MenuCountableConnection {
  pageInfo: PageInfo!
  edges: [MenuCountableEdge!]!
  totalCount: Int
}

type MenuCountableEdge {
  node: Menu!
  cursor: String!
}

type MenuCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  menuErrors: [MenuError!]!
  menu: Menu
}

input MenuCreateInput {
  name: String!
  slug: String
  items: [MenuItemInput]
}

type MenuDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  menuErrors: [MenuError!]!
  menu: Menu
}

type MenuError {
  field: String
  message: String
  code: MenuErrorCode!
}

enum MenuErrorCode {
  CANNOT_ASSIGN_NODE
  GRAPHQL_ERROR
  INVALID
  INVALID_MENU_ITEM
  NO_MENU_ITEM_PROVIDED
  NOT_FOUND
  REQUIRED
  TOO_MANY_MENU_ITEMS
  UNIQUE
}

input MenuFilterInput {
  search: String
  slug: [String]
}

input MenuInput {
  name: String
  slug: String
}

type MenuItem implements Node {
  id: ID!
  name: String!
  menu: Menu!
  parent: MenuItem
  category: Category
  collection: Collection
  page: Page
  level: Int!
  children: [MenuItem]
  url: String
  translation(languageCode: LanguageCodeEnum!): MenuItemTranslation
}

type MenuItemBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  menuErrors: [MenuError!]!
}

type MenuItemCountableConnection {
  pageInfo: PageInfo!
  edges: [MenuItemCountableEdge!]!
  totalCount: Int
}

type MenuItemCountableEdge {
  node: MenuItem!
  cursor: String!
}

type MenuItemCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  menuErrors: [MenuError!]!
  menuItem: MenuItem
}

input MenuItemCreateInput {
  name: String!
  url: String
  category: ID
  collection: ID
  page: ID
  menu: ID!
  parent: ID
}

type MenuItemDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  menuErrors: [MenuError!]!
  menuItem: MenuItem
}

input MenuItemFilterInput {
  search: String
}

input MenuItemInput {
  name: String
  url: String
  category: ID
  collection: ID
  page: ID
}

type MenuItemMove {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  menu: Menu
  menuErrors: [MenuError!]!
}

input MenuItemMoveInput {
  itemId: ID!
  parentId: ID
  sortOrder: Int
}

input MenuItemSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: MenuItemsSortField!
}

type MenuItemTranslatableContent implements Node {
  id: ID!
  name: String!
  translation(languageCode: LanguageCodeEnum!): MenuItemTranslation
  menuItem: MenuItem
}

type MenuItemTranslate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  menuItem: MenuItem
}

type MenuItemTranslation implements Node {
  id: ID!
  name: String!
  language: LanguageDisplay!
}

type MenuItemUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  menuErrors: [MenuError!]!
  menuItem: MenuItem
}

enum MenuItemsSortField {
  NAME
}

enum MenuSortField {
  MENU_NAME
  ITEMS_COUNT
}

input MenuSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: MenuSortField!
}

type MenuUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  menuErrors: [MenuError!]!
  menu: Menu
}

type MetaClientStore {
  name: String!
  metadata: [MetaItem]!
}

input MetaInput {
  namespace: String!
  clientName: String!
  key: String!
  value: String!
}

type MetaItem {
  key: String!
  value: String!
}

input MetaPath {
  namespace: String!
  clientName: String!
  key: String!
}

type MetaStore {
  namespace: String!
  clients: [MetaClientStore]!
}

type MetadataError {
  field: String
  message: String
  code: MetadataErrorCode!
}

enum MetadataErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
}

input MetadataInput {
  key: String!
  value: String!
}

type MetadataItem {
  key: String!
  value: String!
}

type MobileOTP implements Node {
  id: ID!
  mobileNo: String
  dateGenerated: DateTime
  dateVerified: DateTime
  attempt: Int!
  createdAt: DateTime
  updatedAt: DateTime
  status: MobileOTPStatus!
}

type MobileOTPGenerate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  mobileOtp: MobileOTP
  otpErrors: [OTPError!]!
  mobileOTP: MobileOTP
}

input MobileOTPGenerateInput {
  mobileNo: String!
}

type MobileOTPResetPassword {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  accountErrors: [AccountError!]!
}

enum MobileOTPStatus {
  UNV
  VER
  EXP
}

type MobileOTPVerify {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  mobileOtp: MobileOTP
  otpErrors: [OTPError!]!
  mobileOTP: MobileOTP
}

type Money {
  currency: String!
  amount: Float!
  localized: String! @deprecated(reason: "Price formatting according to the current locale should be handled by the frontend client. This field will be removed after 2020-07-31.")
}

type MoneyRange {
  start: Money
  stop: Money
}

input MoveProductInput {
  productId: ID!
  sortOrder: Int
}

type Mutation {
  startServicePause(pauseInput: StartServicePauseInput!): StartServicePause
  endServicePause(pauseInput: EndServicePauseInput!): EndServicePause
  createPauseReason(pauseInput: CreatePauseReasonInput!): CreatePauseReason
  hidePauseReason(reasonInput: HidePauseReasonInput!): HidePauseReason
  tenantEnableReservation(tenantId: ID!, withReservation: Boolean!): TenantEnableReservation
  reservationCreate(input: ReservationCreateInput!): ReservationCreate
  reservationUpdateStatus(cancelReason: String, reservationId: ID!, reservationStatus: ReservationStatusEnum!): ReservationUpdateStatus
  reservationCancel(reservationId: ID!): ReservationCancel
  update2goShipmentStatus(id: ID!): Update2GoShipmentStatus
  book2go(id: ID!, input: Book2goInput!): Book2go
  generateRemittanceId(ids: [ID]!): GenerateRemittanceId
  setDailyRemittanceConfig(input: RemittanceConfigUpdateInput!, mallId: ID!): SetDailyRemittanceConfig
  enableMallRemittance(enable: Boolean!, mallId: ID!): EnableMallRemittance
  enableAllMallRemittance(enable: Boolean!): EnableAllMallRemittance
  remittanceCancel(id: ID!): RemittanceCancel
  remittanceUploadReceipt(id: ID!, receiptImage: Upload!): RemittanceUploadReceipt
  markRemittanceAsPaymentCollected(ids: [ID]!, isPaymentCollected: Boolean!): MarkRemittanceAsPaymentCollected
  taskAreaCreate(input: TaskAreaCreateInput!): TaskAreaCreate
  taskAreaUpdate(id: ID!, input: TaskAreaUpdateInput!): TaskAreaUpdate
  taskAreaAddStores(input: TaskAreadAddRemoveStoresInput!): TaskAreaAddStores
  taskAreaRemoveStores(input: TaskAreadAddRemoveStoresInput!): TaskAreaRemoveStores
  assignRunnerToTaskAreas(runnerId: ID!, taskAreaIds: [ID]!): AssignRunnerToTaskAreas
  unassignRunnerFromTaskAreas(runnerId: ID!, taskAreaIds: [ID]!): UnassignRunnerFromTaskAreas
  dropOffLocationCreate(input: DropOffLocationCreateInput!): DropOffLocationCreate
  dropOffLocationUpdate(id: ID!, input: DropOffLocationUpdateInput!): DropOffLocationUpdate
  templateCreate(input: TemplateCreateInput!): TemplateCreate
  templateUpdate(id: ID!, input: TemplateUpdateInput!): TemplateUpdate
  templateFinalize(id: ID!): TemplateFinalize
  templateDuplicate(id: ID!): TemplateDuplicate
  templateDelete(id: ID!): TemplateDelete
  templateRename(id: ID!, name: String!): TemplateRename
  setMallAutoBookingConfig(input: AutobookingConfigUpdateInput!, mallId: ID!): SetMallAutoBookingConfig
  autoBookingSetIsEnabled(input: AutoBookingSetIsEnabledInput!, mallIds: [ID]): AutoBookingSetIsEnabled
  cancelAutoBooking(orderId: ID!): CancelAutoBooking
  rackCreate(input: RackCreateInput!): RackCreate
  rackUpdate(id: ID!, input: RackCreateInput!): RackUpdate
  rackDelete(rackId: ID!): RackDelete
  wishlistAddProduct(mallId: ID, productId: ID!): WishlistAddProductMutation
  wishlistRemoveProduct(mallId: ID, productId: ID!): WishlistRemoveProductMutation
  wishlistAddVariant(variantId: ID!): WishlistAddProductVariantMutation
  wishlistRemoveVariant(variantId: ID!): WishlistRemoveProductVariantMutation
  cartCreate(input: CartCreateInput!): CartCreate
  cartLinesAdd(cartId: ID!, lines: [CartLineInput]!): CartLinesAdd
  cartLinesUpdate(cartId: ID!, lines: [CartLineInput]!): CartLinesUpdate
  cartLineDelete(cartId: ID!, lineIds: [ID]!): CartLineDelete
  cartLineAddNote(cartLineId: ID!, notes: String): CartLineAddNote
  addItemToCart(cartId: ID!, line: CartLineInput!): AddItemToCart
  overrideItemFromCart(cartId: ID!, line: CartLineInput!): OverrideItemFromCart
  webhookCreate(input: WebhookCreateInput!): WebhookCreate
  webhookDelete(id: ID!): WebhookDelete
  webhookUpdate(id: ID!, input: WebhookUpdateInput!): WebhookUpdate
  createWarehouse(input: WarehouseCreateInput!): WarehouseCreate
  updateWarehouse(id: ID!, input: WarehouseUpdateInput!): WarehouseUpdate
  deleteWarehouse(id: ID!): WarehouseDelete
  assignWarehouseShippingZone(id: ID!, shippingZoneIds: [ID!]!): WarehouseShippingZoneAssign
  unassignWarehouseShippingZone(id: ID!, shippingZoneIds: [ID!]!): WarehouseShippingZoneUnassign
  createHomeLocation(homeLocationName: String!, latitude: Decimal!, longitude: Decimal!, remarks: String, warehouseId: ID!): HomeLocationCreate
  updateHomeLocation(homeLocationId: ID!, homeLocationName: String, latitude: Decimal, longitude: Decimal, remarks: String): HomeLocationUpdate
  deleteHomeLocation(homeLocationId: ID!): HomeLocationDelete
  accessGroupCreate(input: AccessGroupCreateInput!): AccessGroupCreate
  accessGroupUpdate(id: ID!, input: AccessGroupUpdateInput!): AccessGroupUpdate
  accessCreate(input: AccessCreateInput!): AccessCreate
  mallCreate(input: MallCreateInput!): MallCreate
  mallUpdate(id: ID!, input: MallUpdateInput!): MallUpdate
  updateMallStatus(id: ID!, status: SmopStatusEnum!): UpdateMallStatus
  brandCreate(input: BrandCreateInput!): BrandCreate
  brandUpdate(id: ID!, input: BrandUpdateInput!): BrandUpdate
  updateBrandStatus(id: ID!, status: SmopStatusEnum!): UpdateBrandStatus
  tenantCreate(input: TenantCreateInput!): TenantCreate
  tenantUpdate(id: ID!, input: TenantUpdateInput!): TenantUpdate
  tenantPromotionalRibbonUpdate(id: ID!, input: TenantPromotionalRibbonInput!): TenantPromotionalRibbonUpdate
  tenantSetIsPausable(pauseInput: TenantsSetIsPausableInput!): TenantsSetIsPausable
  updateTenantStatus(id: ID!, status: SmopStatusEnum!): UpdateTenantStatus
  bannerCreate(input: BannerCreateInput!): BannerCreate
  bannerUpdate(id: ID!, input: BannerUpdateInput!): BannerUpdate
  bannerDelete(id: ID!): BannerDelete
  bannerAnnouncementLinkUpdate(id: ID!, input: BannerAnnouncementLinkInput): BannerAnnouncementLinkUpdate
  bannerBulkDelete(ids: [ID]!): BannerBulkDelete
  bannerAddMalls(id: ID!, input: BannerMallsInput!): BannerAddMalls
  bannerRemoveMalls(id: ID!, input: BannerMallsInput!): BannerRemoveMalls
  shipmentCreate(input: ShipmentCreateInput!): ShipmentCreate
  shipmentUpdate(id: ID!, input: ShipmentUpdateInput!): ShipmentUpdate
  otpGenerate(input: OTPGenerateInput!): OTPGenerate
  otpVerify(input: OTPVerifyInput!): OTPVerify
  mobileOtpGenerate(input: MobileOTPGenerateInput!): MobileOTPGenerate
  mobileOtpVerify(id: ID!, pin: String!): MobileOTPVerify
  followBrand(id: ID!): FollowBrand
  unfollowBrand(id: ID!): UnfollowBrand
  bannerImageCreate(input: BannerImageCreateInput!): BannerImageCreate
  customerOtpVerify(input: CustomerOTPVerifyInput!): CustomerOTPVerify
  customerOtpGenerate(input: CustomerOTPGenerateInput!): CustomerOTPGenerate
  customerEmailUpdateOtpGenerate(input: CustomerOTPGenerateInput!): CustomerEmailUpdateOtpGenerate
  customerEmailUpdateOtpVerify(input: CustomerOTPVerifyInput!): CustomerEmailUpdateOtpVerify
  brandGenerateDynamicLink(id: ID!): BrandGenerateDynamicLink
  bannerGenerateDynamicLink(id: ID!): BannerGenerateDynamicLink
  contactUsEmail(input: ContactUsEmailInput!): ContactUsEmail
  announcementCreate(input: AnnouncementCreateInput!): AnnouncementCreate
  announcementUpdate(id: ID!, input: AnnouncementCreateInput!): AnnouncementUpdate
  announcementDelete(id: ID!): AnnouncementDelete
  announcementBulkDelete(ids: [ID]!): AnnouncementBulkDelete
  shopifyCredentialsCheck(input: ShopifyCredentialsCheckInput!): ShopifyCredentialsCheck
  shopifyBrandSync(brand: ID!): ShopifyBrandSync
  clusterCreate(input: ClusterCreateInput!): ClusterCreate
  clusterUpdate(id: ID!, input: ClusterCreateInput!): ClusterUpdate
  clusterDelete(id: ID!): ClusterDelete
  clusterBulkDelete(ids: [ID]!): ClusterBulkDelete
  shopifyBrandTagAdd(brandId: ID!, kind: ShopifyTagEnum!, tag: String!): ShopifyBrandTagAdd
  shopifyBrandTagRemove(brandId: ID!, kind: ShopifyTagEnum!, tag: String!): ShopifyBrandTagRemove
  shopifyBrandTagUpdate(brandId: ID!, kind: ShopifyTagEnum!, newTag: String!, targetTag: String!): ShopifyBrandTagUpdate
  brandTagCreate(input: BrandTagCreateInput!): BrandTagCreate
  brandTagUpdate(id: ID!, input: BrandTagCreateInput!): BrandTagUpdate
  brandTagDelete(id: ID!): BrandTagDelete
  brandGroupCreate(input: BrandGroupCreateInput!): BrandGroupCreate
  brandGroupUpdate(id: ID!, input: BrandGroupUpdateInput!): BrandGroupUpdate
  brandGroupDelete(id: ID!): BrandGroupDelete
  updateMallOrderTimeframe(endTime: Time, mallId: ID!, shippingMethodId: ID!, startTime: Time): UpdateMallOrderTimeframe
  authorizationKeyAdd(input: AuthorizationKeyInput!, keyType: AuthorizationKeyType!): AuthorizationKeyAdd
  authorizationKeyDelete(keyType: AuthorizationKeyType!): AuthorizationKeyDelete
  staffNotificationRecipientCreate(input: StaffNotificationRecipientInput!): StaffNotificationRecipientCreate
  staffNotificationRecipientUpdate(id: ID!, input: StaffNotificationRecipientInput!): StaffNotificationRecipientUpdate
  staffNotificationRecipientDelete(id: ID!): StaffNotificationRecipientDelete
  homepageCollectionUpdate(collection: ID): HomepageCollectionUpdate
  shopDomainUpdate(input: SiteDomainInput): ShopDomainUpdate
  shopSettingsUpdate(input: ShopSettingsInput!): ShopSettingsUpdate
  shopFetchTaxRates: ShopFetchTaxRates
  shopSettingsTranslate(input: ShopSettingsTranslationInput!, languageCode: LanguageCodeEnum!): ShopSettingsTranslate
  shopAddressUpdate(input: AddressInput): ShopAddressUpdate
  shippingPriceCreate(input: ShippingPriceInput!): ShippingPriceCreate
  shippingPriceDelete(id: ID!): ShippingPriceDelete
  shippingPriceBulkDelete(ids: [ID]!): ShippingPriceBulkDelete
  shippingPriceUpdate(id: ID!, input: ShippingPriceInput!): ShippingPriceUpdate
  shippingPriceTranslate(id: ID!, input: NameTranslationInput!, languageCode: LanguageCodeEnum!): ShippingPriceTranslate
  shippingZoneCreate(input: ShippingZoneCreateInput!): ShippingZoneCreate
  shippingZoneDelete(id: ID!): ShippingZoneDelete
  shippingZoneBulkDelete(ids: [ID]!): ShippingZoneBulkDelete
  shippingZoneUpdate(id: ID!, input: ShippingZoneUpdateInput!): ShippingZoneUpdate
  searchHistoryDelete(searchQuery: String!): SearchHistoryDelete
  searchHistoryClear: SearchHistoryClear
  searchResultsRate(queryId: String!, ratingType: SearchRatingTypeEnum!, resultId: String!, searchRating: SearchResponseRatingEnum!): RateKendraSearchResults
  attributeCreate(input: AttributeCreateInput!): AttributeCreate
  attributeDelete(id: ID!): AttributeDelete
  attributeBulkDelete(ids: [ID]!): AttributeBulkDelete
  attributeAssign(operations: [AttributeAssignInput]!, productTypeId: ID!): AttributeAssign
  attributeUnassign(attributeIds: [ID]!, productTypeId: ID!): AttributeUnassign
  attributeUpdate(id: ID!, input: AttributeUpdateInput!): AttributeUpdate
  attributeTranslate(id: ID!, input: NameTranslationInput!, languageCode: LanguageCodeEnum!): AttributeTranslate
  attributeUpdateMetadata(id: ID!, input: MetaInput!): AttributeUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  attributeClearMetadata(id: ID!, input: MetaPath!): AttributeClearMeta @deprecated(reason: "Use the `deleteMetadata` mutation instead. This field will be removed after 2020-07-31.")
  attributeUpdatePrivateMetadata(id: ID!, input: MetaInput!): AttributeUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  attributeClearPrivateMetadata(id: ID!, input: MetaPath!): AttributeClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  attributeValueCreate(attribute: ID!, input: AttributeValueCreateInput!): AttributeValueCreate
  attributeValueDelete(id: ID!): AttributeValueDelete
  attributeValueBulkDelete(ids: [ID]!): AttributeValueBulkDelete
  attributeValueUpdate(id: ID!, input: AttributeValueCreateInput!): AttributeValueUpdate
  attributeValueTranslate(id: ID!, input: NameTranslationInput!, languageCode: LanguageCodeEnum!): AttributeValueTranslate
  attributeReorderValues(attributeId: ID!, moves: [ReorderInput]!): AttributeReorderValues
  categoryCreate(input: CategoryInput!, parent: ID): CategoryCreate
  categoryDelete(id: ID!): CategoryDelete
  categoryBulkDelete(ids: [ID]!): CategoryBulkDelete
  categoryUpdate(id: ID!, input: CategoryInput!): CategoryUpdate
  categoryTranslate(id: ID!, input: TranslationInput!, languageCode: LanguageCodeEnum!): CategoryTranslate
  categoryUpdateMetadata(id: ID!, input: MetaInput!): CategoryUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  categoryClearMetadata(id: ID!, input: MetaPath!): CategoryClearMeta @deprecated(reason: "Use the `deleteMetadata` mutation instead. This field will be removed after 2020-07-31.")
  categoryUpdatePrivateMetadata(id: ID!, input: MetaInput!): CategoryUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  categoryClearPrivateMetadata(id: ID!, input: MetaPath!): CategoryClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  collectionAddProducts(collectionId: ID!, products: [ID]!): CollectionAddProducts
  collectionCreate(input: CollectionCreateInput!): CollectionCreate
  collectionDelete(id: ID!): CollectionDelete
  collectionReorderProducts(collectionId: ID!, moves: [MoveProductInput]!): CollectionReorderProducts
  collectionBulkDelete(ids: [ID]!): CollectionBulkDelete
  collectionBulkPublish(ids: [ID]!, isPublished: Boolean!): CollectionBulkPublish
  collectionRemoveProducts(collectionId: ID!, products: [ID]!): CollectionRemoveProducts
  collectionUpdate(id: ID!, input: CollectionInput!): CollectionUpdate
  collectionTranslate(id: ID!, input: TranslationInput!, languageCode: LanguageCodeEnum!): CollectionTranslate
  collectionUpdateMetadata(id: ID!, input: MetaInput!): CollectionUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  collectionClearMetadata(id: ID!, input: MetaPath!): CollectionClearMeta @deprecated(reason: "Use the `deleteMetadata` mutation instead. This field will be removed after 2020-07-31.")
  collectionUpdatePrivateMetadata(id: ID!, input: MetaInput!): CollectionUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  collectionClearPrivateMetadata(id: ID!, input: MetaPath!): CollectionClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  productCreate(input: ProductCreateInput!): ProductCreate
  productDelete(id: ID!): ProductDelete
  productBulkDelete(ids: [ID]!): ProductBulkDelete
  productBulkPublish(ids: [ID]!, isPublished: Boolean!): ProductBulkPublish
  productUpdate(id: ID!, input: ProductUpdateInput!): ProductUpdate
  productTranslate(id: ID!, input: TranslationInput!, languageCode: LanguageCodeEnum!): ProductTranslate
  productUpdateMetadata(id: ID!, input: MetaInput!): ProductUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  productClearMetadata(id: ID!, input: MetaPath!): ProductClearMeta @deprecated(reason: "Use the `deleteMetadata` mutation instead. This field will be removed after 2020-07-31.")
  productUpdatePrivateMetadata(id: ID!, input: MetaInput!): ProductUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  productClearPrivateMetadata(id: ID!, input: MetaPath!): ProductClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  productSetAvailabilityForPurchase(isAvailable: Boolean!, productId: ID!, startDate: Date): ProductSetAvailabilityForPurchase
  productImageCreate(input: ProductImageCreateInput!): ProductImageCreate
  productImageCreateUrl(input: ProductImageCreateUrlInput!): ProductImageCreateUrl
  productVariantReorder(moves: [ReorderInput]!, productId: ID!): ProductVariantReorder
  productImageDelete(id: ID!): ProductImageDelete
  productImageBulkDelete(ids: [ID]!): ProductImageBulkDelete
  productImageReorder(imagesIds: [ID]!, productId: ID!): ProductImageReorder
  productImageResize(productIds: [ID]!, specialKey: String!): ProductImageResize
  productImageUpdate(id: ID!, input: ProductImageUpdateInput!): ProductImageUpdate
  productTypeCreate(input: ProductTypeInput!): ProductTypeCreate
  productTypeDelete(id: ID!): ProductTypeDelete
  productTypeBulkDelete(ids: [ID]!): ProductTypeBulkDelete
  productTypeUpdate(id: ID!, input: ProductTypeInput!): ProductTypeUpdate
  productTypeReorderAttributes(moves: [ReorderInput]!, productTypeId: ID!, type: AttributeTypeEnum!): ProductTypeReorderAttributes
  productTypeUpdateMetadata(id: ID!, input: MetaInput!): ProductTypeUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  productTypeClearMetadata(id: ID!, input: MetaPath!): ProductTypeClearMeta @deprecated(reason: "Use the `deleteMetadata` mutation instead. This field will be removed after 2020-07-31.")
  productTypeUpdatePrivateMetadata(id: ID!, input: MetaInput!): ProductTypeUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  productTypeClearPrivateMetadata(id: ID!, input: MetaPath!): ProductTypeClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  digitalContentCreate(input: DigitalContentUploadInput!, variantId: ID!): DigitalContentCreate
  digitalContentDelete(variantId: ID!): DigitalContentDelete
  digitalContentUpdate(input: DigitalContentInput!, variantId: ID!): DigitalContentUpdate
  digitalContentUrlCreate(input: DigitalContentUrlCreateInput!): DigitalContentUrlCreate
  productVariantCreate(input: ProductVariantCreateInput!): ProductVariantCreate
  productVariantDelete(brand: ID, id: ID!): ProductVariantDelete
  productVariantBulkCreate(product: ID!, variants: [ProductVariantBulkCreateInput]!): ProductVariantBulkCreate
  productVariantBulkDelete(brand: ID, ids: [ID]!): ProductVariantBulkDelete
  productVariantStocksCreate(stocks: [StockInput!]!, variantId: ID!): ProductVariantStocksCreate
  productVariantStocksDelete(variantId: ID!, warehouseIds: [ID!]): ProductVariantStocksDelete
  productVariantStocksUpdate(stocks: [StockInput!]!, variantId: ID!): ProductVariantStocksUpdate
  productVariantUpdate(id: ID!, input: ProductVariantInput!): ProductVariantUpdate
  productVariantSetDefault(productId: ID!, variantId: ID!): ProductVariantSetDefault
  productVariantTranslate(id: ID!, input: NameTranslationInput!, languageCode: LanguageCodeEnum!): ProductVariantTranslate
  productVariantUpdateMetadata(id: ID!, input: MetaInput!): ProductVariantUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  productVariantClearMetadata(id: ID!, input: MetaPath!): ProductVariantClearMeta @deprecated(reason: "Use the `deleteMetadata` mutation instead. This field will be removed after 2020-07-31.")
  productVariantUpdatePrivateMetadata(id: ID!, input: MetaInput!): ProductVariantUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  productVariantClearPrivateMetadata(id: ID!, input: MetaPath!): ProductVariantClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  variantImageAssign(imageId: ID!, variantId: ID!): VariantImageAssign
  variantImageUnassign(imageId: ID!, variantId: ID!): VariantImageUnassign
  choiceCreate(input: ChoiceCreateInput!): ChoiceCreate
  choiceUpdate(id: ID!, input: ChoiceUpdateInput!): ChoiceUpdate
  setProductVisibility(input: ProductVisibilityInput!): SetProductVisibility
  productStatusBulkUpdate(brand: ID, ids: [ID]!, productStatus: ProductStatusEnum!): ProductStatusBulkUpdate
  productVisibilityBulkUnpublish(input: [ProductVisibilityUnpublishInput]!): ProductVisibilityBulkUnpublish
  productVisibilityBulkUpdate(ids: [ID]!, isVisible: Boolean!, republishProductAt: DateTime, tenant: ID, unpublishIndefinitely: Boolean): ProductVisibilityBulkUpdate
  productUploadTemplate(input: ProductUploadTemplateInput!): ProductUploadTemplate
  productGenerateDynamicLink(id: ID!): ProductGenerateDynamicLink
  categoryGenerateDynamicLink(id: ID!): CategoryGenerateDynamicLink
  collectionGenerateDynamicLink(id: ID!): CollectionGenerateDynamicLink
  paymentCapture(amount: PositiveDecimal, paymentId: ID!): PaymentCapture
  paymentRefund(amount: PositiveDecimal, paymentId: ID!): PaymentRefund
  paymentVoid(paymentId: ID!): PaymentVoid
  paymentInitialize(gateway: String!, paymentData: JSONString): PaymentInitialize
  pageCreate(input: PageInput!): PageCreate
  pageDelete(id: ID!): PageDelete
  pageBulkDelete(ids: [ID]!): PageBulkDelete
  pageBulkPublish(ids: [ID]!, isPublished: Boolean!): PageBulkPublish
  pageUpdate(id: ID!, input: PageInput!): PageUpdate
  pageTranslate(id: ID!, input: PageTranslationInput!, languageCode: LanguageCodeEnum!): PageTranslate
  draftOrderComplete(id: ID!): DraftOrderComplete
  draftOrderCreate(input: DraftOrderCreateInput!): DraftOrderCreate
  draftOrderDelete(id: ID!): DraftOrderDelete
  draftOrderBulkDelete(ids: [ID]!): DraftOrderBulkDelete
  draftOrderLinesBulkDelete(ids: [ID]!): DraftOrderLinesBulkDelete
  draftOrderLinesCreate(id: ID!, input: [OrderLineCreateInput]!): DraftOrderLinesCreate
  draftOrderLineDelete(id: ID!): DraftOrderLineDelete
  draftOrderLineUpdate(id: ID!, input: OrderLineInput!): DraftOrderLineUpdate
  draftOrderUpdate(id: ID!, input: DraftOrderInput!): DraftOrderUpdate
  orderAddNote(order: ID!, input: OrderAddNoteInput!): OrderAddNote
  orderAssignRider(courier: String, id: ID!, isRider3pl: Boolean, lateDispatchReason: String, lateReason: String, rider3plContactNo: String, rider3plFirstName: String, rider3plLastName: String, riderId: ID, timeDelivered: DateTime, timeDispatched: DateTime): OrderAssignRider
  bookThirdPartyRider(contactPersonContactNo: String!, contactPersonFirstName: String!, contactPersonLastName: String!, courier: String!, dropOffLocationId: ID, id: ID!, lateDispatchReason: String, lateReason: String, pickupLatitude: Decimal, pickupLocationName: String, pickupLongitude: Decimal, pickupRemarks: String, timeDelivered: DateTime, timeDispatched: DateTime): BookThirdPartyRider
  orderCancelGrabExpress(id: ID!): OrderCancelGrabExpress
  orderCancelPandagoAuto(cancelReason: String!, orderId: ID!): OrderCancelPandagoAuto
  refreshGrabExpressStatus(id: ID!): RefreshGrabExpressStatus
  refreshPandagoAutoStatus(id: ID!): RefreshPandagoAutoStatus
  orderCancel(cancelReason: String!, id: ID!, latitude: Decimal, longitude: Decimal): OrderCancel
  orderCapture(amount: PositiveDecimal!, id: ID!): OrderCapture
  orderClearPrivateMeta(id: ID!, input: MetaPath!): OrderClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  orderClearMeta(input: MetaPath!, token: UUID!): OrderClearMeta @deprecated(reason: "Use the `deleteMetadata` mutation instead. This field will be removed after 2020-07-31.")
  orderFulfill(input: OrderFulfillInput!, order: ID): OrderFulfill
  orderFulfillmentCancel(id: ID!, input: FulfillmentCancelInput!): FulfillmentCancel
  orderFulfillmentUpdateTracking(id: ID!, input: FulfillmentUpdateTrackingInput!): FulfillmentUpdateTracking
  orderFulfillmentClearMeta(id: ID!, input: MetaPath!): FulfillmentClearMeta @deprecated(reason: "Use the `deleteMetadata` mutation instead. This field will be removed after 2020-07-31.")
  orderFulfillmentClearPrivateMeta(id: ID!, input: MetaPath!): FulfillmentClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  orderFulfillmentUpdateMeta(id: ID!, input: MetaInput!): FulfillmentUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  orderFulfillmentUpdatePrivateMeta(id: ID!, input: MetaInput!): FulfillmentUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  orderMarkAsPaid(id: ID!): OrderMarkAsPaid
  orderRefund(amount: PositiveDecimal!, id: ID!): OrderRefund
  orderUpdate(id: ID!, input: OrderUpdateInput!): OrderUpdate
  orderUpdateMeta(input: MetaInput!, token: UUID!): OrderUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  orderUpdatePrivateMeta(id: ID!, input: MetaInput!): OrderUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation instead. This field will be removed after 2020-07-31.")
  orderUpdateShipping(order: ID!, input: OrderUpdateShippingInput): OrderUpdateShipping
  orderVoid(id: ID!): OrderVoid
  orderRiderArrived(id: ID!, latitude: Decimal, longitude: Decimal): OrderRiderArrived
  orderMarkAsCompleted(id: ID!, imageId: ID, lateReason: String, latitude: Decimal, longitude: Decimal, otherReason: String, reason: CompletedReasonsEnum!): OrderMarkAsCompleted
  orderMarkAsPacked(id: ID!): OrderMarkAsPacked
  orderMarkAsReadyToShip(id: ID!): OrderMarkAsReadyToShip
  orderMarkAsShipped(id: ID!): OrderMarkAsShipped
  orderReturnToFc(id: ID!): OrderReturnToFC
  orderUpdateShippingLabel(awbNo: String, courier: String!, dispatchNo: String!, id: ID!, specialNotes: String): OrderUpdateShippingLabel
  orderImageCreate(alt: String, image: Upload!, order: ID!): OrderImageCreate
  updateOrderStatus(id: ID!, overrideReason: String, smopStatus: SmopOrderStatusEnum!): UpdateOrderStatus
  orderBulkCancel(ids: [ID]!): OrderBulkCancel
  orderFulfillmentRemarks(id: ID!, remarks: String!): OrderFulfillmentRemarks
  updateOrderFulfillmentRemarks(id: ID!, remarks: String!): UpdateOrderFulfillmentRemarks
  updateStoreOrderStatus(cancelReason: String, id: ID!, overrideReason: String, smopStatus: SmopOrderStatusEnum!): UpdateStoreOrderStatus
  assignStoreOrderRunner(runnerId: ID!, storeOrderId: ID!): AssignStoreOrderRunner
  storeOrderSetParcelNo(id: ID!, parcelNo: String!): StoreOrderSetParcelNo
  storeOrderRunnerScanParcel(id: ID!, parcelNo: String!): StoreOrderRunnerScanParcel
  storeOrderRunnerDropOff(id: ID!): StoreOrderRunnerDropOff
  storeOrderOpsAdminScanParcel(id: ID!, parcelNo: String!): StoreOrderOpsAdminScanParcel
  storeOrderLinesAdd(lines: [StoreOrderLineInput]!, storeOrderId: ID!, tenantId: ID!): StoreOrderLinesAdd
  storeOrderLineDelete(lineIds: [ID]!, storeOrderId: ID!): StoreOrderLineDelete
  storeOrderPickLine(lineIds: [ID]!, status: OrderLineStatusEnum!, storeOrderId: ID!): StoreOrderPickLine
  storeOrderLineUpdateQuantity(lines: [StoreOrderLineUpdateQuantityInput]!, storeOrderId: ID!): StoreOrderLineUpdateQuantity
  storeOrderMarkAsValidForPacking(id: ID!, parcelNo: String!): StoreOrderMarkAsValidForPacking
  storeOrderRevertFromCancelled(id: ID!, revertReason: String!): StoreOrderRevertFromCancelled
  storeOrderParcelImageUpload(image: Upload!, storeOrder: ID!): StoreOrderParcelImageUpload
  storeOrderReceiptImageUpload(image: Upload!, storeOrder: ID!): StoreOrderReceiptImageUpload
  orderRiderDispatchSearchAndValidation(orderCodes: [String]!, riderId: ID!): OrderRiderDispatchSearchAndValidation
  orderRiderDispatchAssignOrders(orderIds: [String]!, riderId: ID!): OrderRiderDispatchAssignOrders
  orderUpdateDropOffLocation(dropOffLocation: ID!, id: ID!): OrderUpdateDropOffLocation
  riderCollectionTotal(dateRange: DateRangeInput!, verticalType: StoreTypeEnum!): RiderCollectionTotal
  updateRemittanceManualAdjustmentStatus(id: ID!, status: RemittanceManualAdjustmentStatusEnum!): UpdateRemittanceManualAdjustmentStatus
  createRemittanceManualAdjustment(adjustedAmount: Float!, adjustmentReason: String!, id: ID!): CreateRemittanceManualAdjustment
  createRemittanceManualOverride(orderId: ID!, overrideReason: String!, overrideStatus: RemittanceStatusEnum!, receiptImage: Upload!): CreateRemittanceManualOverride
  deleteMetadata(id: ID!, keys: [String!]!): DeleteMetadata
  deletePrivateMetadata(id: ID!, keys: [String!]!): DeletePrivateMetadata
  updateMetadata(id: ID!, input: [MetadataInput!]!): UpdateMetadata
  updatePrivateMetadata(id: ID!, input: [MetadataInput!]!): UpdatePrivateMetadata
  assignNavigation(menu: ID, navigationType: NavigationType!): AssignNavigation
  menuCreate(input: MenuCreateInput!): MenuCreate
  menuDelete(id: ID!): MenuDelete
  menuBulkDelete(ids: [ID]!): MenuBulkDelete
  menuUpdate(id: ID!, input: MenuInput!): MenuUpdate
  menuItemCreate(input: MenuItemCreateInput!): MenuItemCreate
  menuItemDelete(id: ID!): MenuItemDelete
  menuItemBulkDelete(ids: [ID]!): MenuItemBulkDelete
  menuItemUpdate(id: ID!, input: MenuItemInput!): MenuItemUpdate
  menuItemTranslate(id: ID!, input: NameTranslationInput!, languageCode: LanguageCodeEnum!): MenuItemTranslate
  menuItemMove(menu: ID!, moves: [MenuItemMoveInput]!): MenuItemMove
  invoiceRequest(number: String, orderId: ID!): InvoiceRequest
  invoiceRequestDelete(id: ID!): InvoiceRequestDelete
  invoiceCreate(input: InvoiceCreateInput!, orderId: ID!): InvoiceCreate
  invoiceDelete(id: ID!): InvoiceDelete
  invoiceUpdate(id: ID!, input: UpdateInvoiceInput!): InvoiceUpdate
  invoiceSendEmail(id: ID!): InvoiceSendEmail
  giftCardActivate(id: ID!): GiftCardActivate
  giftCardCreate(input: GiftCardCreateInput!): GiftCardCreate
  giftCardDeactivate(id: ID!): GiftCardDeactivate
  giftCardUpdate(id: ID!, input: GiftCardUpdateInput!): GiftCardUpdate
  pluginUpdate(id: ID!, input: PluginUpdateInput!): PluginUpdate
  couponCollectionCreate(input: CouponCollectionCreateInput!): CouponCollectionCreate
  couponCollectionUpdate(id: ID!, input: CouponCollectionUpdateInput!): CouponCollectionUpdate
  couponCollectionToggleActivate(activate: Boolean!, couponCollectionId: ID!): CouponCollectionToggleActivate
  couponCollectionToggleIsHidden(instanceId: ID!): CouponCollectionToggleIsHidden
  couponCollectionGenerateDynamicLink(instanceId: ID!): CouponCollectionGenerateDynamicLink
  couponCollectionDelete(id: ID!): CouponCollectionDelete
  setCouponsToCollection(coupons: SetCouponsToCollectionInput!, instanceId: ID!): SetCouponsToCollection
  couponActivate(couponId: ID!): CouponActivate
  couponClaim(couponId: ID): CouponClaim
  couponCreate(input: CouponCreateInput!): CouponCreate
  couponDeactivate(couponId: ID!): CouponDeactivate
  couponDelete(id: ID!): CouponDelete
  couponRedeem(couponId: ID): CouponRedeem
  couponManualReorder(couponOrderGroups: [CouponManualReorderInput]): CouponManualReorder
  couponPresetReorder(input: CouponPresetReorderInput!): CouponPresetReorder
  couponRedemptionUpdateNotifStatus(couponRedemptionId: ID, notifStatus: CouponNotificationStatusEnum!): CouponRedemptionUpdateNotifStatus
  couponToggleIsFeatured(couponId: ID!): CouponToggleIsFeatured
  couponUpdate(id: ID!, input: CouponUpdateInput!): CouponUpdate
  couponGenerateDynamicLink(id: ID!, requireAuth: Boolean = true): CouponGenerateDynamicLink
  discountUploadTemplate(input: DiscountUploadTemplateInput!): DiscountUploadTemplate
  draftCouponCreate(input: DraftCouponCreateInput!): DraftCouponCreate
  draftCouponUpdate(id: ID!, input: DraftCouponUpdateInput): DraftCouponUpdate
  saleCreate(input: SaleInput!): SaleCreate
  saleDelete(id: ID!): SaleDelete
  saleBulkDelete(ids: [ID]!): SaleBulkDelete
  saleUpdate(id: ID!, input: SaleInput!): SaleUpdate
  saleCataloguesAdd(id: ID!, input: SaleCatalogueInput!): SaleAddCatalogues
  saleCataloguesRemove(id: ID!, input: SaleCatalogueInput!): SaleRemoveCatalogues
  saleTranslate(id: ID!, input: NameTranslationInput!, languageCode: LanguageCodeEnum!): SaleTranslate
  voucherCreate(input: VoucherInput!): VoucherCreate
  voucherDelete(id: ID!): VoucherDelete
  voucherBulkDelete(ids: [ID]!): VoucherBulkDelete
  voucherUpdate(id: ID!, input: VoucherInput!): VoucherUpdate
  voucherCataloguesAdd(id: ID!, input: VoucherCatalogueInput!): VoucherAddCatalogues
  voucherCataloguesRemove(id: ID!, input: VoucherCatalogueInput!): VoucherRemoveCatalogues
  voucherTranslate(id: ID!, input: NameTranslationInput!, languageCode: LanguageCodeEnum!): VoucherTranslate
  voucherAddMalls(id: ID!, input: VoucherMallInput!): VoucherAddMalls
  voucherAddBrandGroups(id: ID!, input: VoucherBrandGroupsInput!): VoucherAddBrandGroups
  voucherTenantUpdate(id: ID!, input: VoucherTenantSubsidyInput!): VoucherTenantUpdate
  voucherTenantDelete(id: ID!): VoucherTenantDelete
  voucherRemoveMalls(id: ID!, input: VoucherMallInput!): VoucherRemoveMalls
  voucherAddCustomers(id: ID!, input: VoucherEligibleCustomerInput!): VoucherAddCustomers
  voucherRemoveCustomers(id: ID!, input: VoucherEligibleCustomerInput!): VoucherRemoveCustomers
  voucherImageCreate(input: VoucherImageCreateInput!): VoucherImageCreate
  voucherImageDelete(voucher: ID!): VoucherImageDelete
  updateSaleStatus(id: ID!, status: DiscountStatusEnum!): UpdateSaleStatus
  updateVoucherStatus(id: ID!, status: DiscountStatusEnum!): UpdateVoucherStatus
  voucherGroupCreate(input: VoucherGroupInput!): VoucherGroupCreate
  voucherGroupDelete(id: ID!): VoucherGroupDelete
  updateVoucherGroupStatus(ids: [ID]!, status: DiscountStatusEnum!): UpdateVoucherGroupStatus
  saleBulkActivate(ids: [ID]!): SaleBulkActivate
  saleBulkDeactivate(ids: [ID]!): SaleBulkDeactivate
  voucherBulkActivate(ids: [ID]!): VoucherBulkActivate
  voucherBulkDeactivate(ids: [ID]!): VoucherBulkDeactivate
  voucherBulkCreate(id: ID, multiplier: Int!, voucherDetails: VoucherInput): VoucherBulkCreate
  voucherTenantBulkUpdate(voucherTenants: [VoucherTenantBulkUpdateInput]): VoucherTenantBulkUpdate
  exportCouponRedemptions(input: ExportCouponRedemptionsInput!): ExportCouponRedemptions
  exportProducts(input: ExportProductsInput!): ExportProducts
  exportOrders(input: ExportOrdersInput!): ExportOrders
  exportSaleErrorVariants(input: ExportSaleErrorVariantsInput!): ExportSaleErrorVariants
  exportStoreOrders(input: ExportStoreOrdersInput!): ExportStoreOrders
  exportRemittanceOrders(input: ExportRemittanceOrdersInput!): ExportRemittanceOrders
  clearPcbCache(password: String!): ClearCachePCB
  shopsmManualSync(brandId: ID!, customCollectionIds: [String], productIds: [String], smartCollectionIds: [String]): ShopSMManualSync
  checkoutAddPromoCode(checkoutId: ID!, promoCode: String!): CheckoutAddPromoCode
  checkoutAddressUpdate(address: AddressInput!, checkoutId: ID!, distanceFromMall: Decimal, travelTime: TravelTimeInput): CheckoutAddressUpdate
  checkoutBillingAddressUpdate(billingAddress: AddressInput!, checkoutId: ID!, travelTime: TravelTimeInput): CheckoutBillingAddressUpdate
  checkoutComplete(checkoutId: ID!, paymentData: JSONString, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete
  checkoutCreate(input: CheckoutCreateInput!, travelTime: TravelTimeInput): CheckoutCreate
  checkoutCustomerAttach(checkoutId: ID!, customerId: ID): CheckoutCustomerAttach
  checkoutCustomerDetach(checkoutId: ID!): CheckoutCustomerDetach
  checkoutEmailUpdate(checkoutId: ID, email: String!): CheckoutEmailUpdate
  checkoutLineDelete(checkoutId: ID!, lineId: ID): CheckoutLineDelete
  checkoutLinesAdd(checkoutId: ID!, lines: [CheckoutLineInput]!): CheckoutLinesAdd
  checkoutLinesUpdate(checkoutId: ID!, lines: [CheckoutLineInput]!): CheckoutLinesUpdate
  checkoutRemovePromoCode(checkoutId: ID!, promoCode: String!): CheckoutRemovePromoCode
  checkoutPaymentCreate(checkoutId: ID!, input: PaymentInput!): CheckoutPaymentCreate
  checkoutShippingAddressUpdate(checkoutId: ID!, distanceFromMall: Decimal, shippingAddress: AddressInput!, travelTime: TravelTimeInput): CheckoutShippingAddressUpdate
  checkoutShippingMethodUpdate(checkoutId: ID, shippingMethodId: ID!): CheckoutShippingMethodUpdate
  checkoutLineAddNote(checkoutLineId: ID!, notes: String): CheckoutLineAddNote
  checkoutUpdateMetadata(id: ID!, input: MetaInput!): CheckoutUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation. This field will be removed after 2020-07-31.")
  checkoutClearMetadata(id: ID!, input: MetaPath!): CheckoutClearMeta @deprecated(reason: "Use the `deleteMetadata` mutation. This field will be removed after 2020-07-31.")
  checkoutUpdatePrivateMetadata(id: ID!, input: MetaInput!): CheckoutUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation. This field will be removed after 2020-07-31.")
  checkoutClearPrivateMetadata(id: ID!, input: MetaPath!): CheckoutClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation. This field will be removed after 2020-07-31.")
  checkoutHasCutlery(checkoutId: ID!, hasCutlery: Boolean!): CheckoutHasCutlery
  appConfigCreate(input: AppConfigCreateInput!): AppConfigCreate
  appConfigUpdate(id: ID!, json: Upload!): AppConfigUpdate
  appCreate(input: AppInput!): AppCreate
  appUpdate(id: ID!, input: AppInput!): AppUpdate
  appDelete(id: ID!): AppDelete
  appTokenCreate(input: AppTokenInput!): AppTokenCreate
  appTokenDelete(id: ID!): AppTokenDelete
  appTokenVerify(token: String!): AppTokenVerify
  appInstall(input: AppInstallInput!): AppInstall
  appRetryInstall(activateAfterInstallation: Boolean = true, id: ID!): AppRetryInstall
  appDeleteFailedInstallation(id: ID!): AppDeleteFailedInstallation
  appFetchManifest(manifestUrl: String!): AppFetchManifest
  appActivate(id: ID!): AppActivate
  appDeactivate(id: ID!): AppDeactivate
  tokenCreate(contactNo: String, email: String, password: String!): CreateToken
  tokenRefresh(csrfToken: String, refreshToken: String): RefreshToken
  tokenVerify(token: String!): VerifyToken
  tokensDeactivateAll: DeactivateAllUserTokens
  requestPasswordReset(email: String!, redirectUrl: String!): RequestPasswordReset
  confirmAccount(email: String!, token: String!): ConfirmAccount
  setPassword(email: String!, password: String!, token: String!): SetPassword
  passwordChange(newPassword: String!, oldPassword: String!): PasswordChange
  mobileOtpResetPassword(confirmPassword: String!, mobileOtp: ID!, newPassword: String!): MobileOTPResetPassword
  requestEmailChange(newEmail: String!, password: String!, redirectUrl: String!): RequestEmailChange
  confirmEmailChange(token: String!): ConfirmEmailChange
  accountAddressCreate(input: AddressInput!, setAsDefaultBoth: Boolean, type: AddressTypeEnum): AccountAddressCreate
  accountAddressUpdate(id: ID!, input: AddressInput!): AccountAddressUpdate
  accountAddressDelete(id: ID!): AccountAddressDelete
  accountSetDefaultAddress(id: ID!, setAsDefaultBoth: Boolean, type: AddressTypeEnum!): AccountSetDefaultAddress
  accountSetNewPassword(newPassword: String!, user: ID!): AccountSetNewPassword
  accountRegister(input: AccountRegisterInput!): AccountRegister
  accountUpdate(input: AccountInput!): AccountUpdate
  accountRequestDeletion(redirectUrl: String!): AccountRequestDeletion
  accountDelete(token: String!): AccountDelete
  accountDeleteRequest: AccountDeleteRequest
  accountUpdateMeta(input: MetaInput!): AccountUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation. This field will be removed after 2020-07-31.")
  accountSmacSet(cardNumber: String!): AccountSMACSet
  accountSmMarketReregister(id: ID!): AccountSMMarketReregister
  accountSetStatus(id: ID!, status: CustomerStatus!): AccountSetStatus
  addressCreate(input: AddressInput!, userId: ID!): AddressCreate
  addressUpdate(id: ID!, input: AddressInput!): AddressUpdate
  addressDelete(id: ID!): AddressDelete
  addressSetDefault(addressId: ID!, type: AddressTypeEnum!, userId: ID!): AddressSetDefault
  addressSetHome(addressId: ID!, userId: ID!): AddressSetHome
  customerCreate(input: UserCreateInput!): CustomerCreate
  customerUpdate(id: ID!, input: CustomerInput!): CustomerUpdate
  customerDelete(id: ID!): CustomerDelete
  customerSoftDelete(id: ID!): CustomerSoftDelete
  customerBulkDelete(ids: [ID]!): CustomerBulkDelete
  customerReregister(id: ID!): CustomerReregister
  staffCreate(input: StaffCreateInput!): StaffCreate
  staffUpdate(id: ID!, input: StaffUpdateInput!): StaffUpdate
  staffDelete(id: ID!): StaffDelete
  staffBulkDelete(ids: [ID]!): StaffBulkDelete
  sellerCreate(input: StaffCreateInput!): SellerCreate
  userAvatarUpdate(image: Upload!): UserAvatarUpdate
  userAvatarDelete: UserAvatarDelete
  userBulkSetActive(ids: [ID]!, isActive: Boolean!): UserBulkSetActive
  userBulkBlock(ids: [ID]!, status: LockStatus!): UserBulkBlock
  userUpdateMetadata(id: ID!, input: MetaInput!): UserUpdateMeta @deprecated(reason: "Use the `updateMetadata` mutation. This field will be removed after 2020-07-31.")
  userClearMetadata(id: ID!, input: MetaPath!): UserClearMeta @deprecated(reason: "Use the `deleteMetadata` mutation. This field will be removed after 2020-07-31.")
  userUpdatePrivateMetadata(id: ID!, input: MetaInput!): UserUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation. This field will be removed after 2020-07-31.")
  userClearPrivateMetadata(id: ID!, input: MetaPath!): UserClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation. This field will be removed after 2020-07-31.")
  serviceAccountCreate(input: ServiceAccountInput!): ServiceAccountCreate @deprecated(reason: "Use the `appCreate` mutation instead. This field will be removed after 2020-07-31.")
  serviceAccountUpdate(id: ID!, input: ServiceAccountInput!): ServiceAccountUpdate @deprecated(reason: "Use the `appUpdate` mutation instead. This field will be removed after 2020-07-31.")
  serviceAccountDelete(id: ID!): ServiceAccountDelete @deprecated(reason: "Use the `appDelete` mutation instead. This field will be removed after 2020-07-31.")
  serviceAccountUpdatePrivateMetadata(id: ID!, input: MetaInput!): ServiceAccountUpdatePrivateMeta @deprecated(reason: "Use the `updatePrivateMetadata` mutation with App instead.This field will be removed after 2020-07-31.")
  serviceAccountClearPrivateMetadata(id: ID!, input: MetaPath!): ServiceAccountClearPrivateMeta @deprecated(reason: "Use the `deletePrivateMetadata` mutation with App instead.This field will be removed after 2020-07-31.")
  serviceAccountTokenCreate(input: ServiceAccountTokenInput!): ServiceAccountTokenCreate @deprecated(reason: "Use the `appTokenCreate` mutation instead. This field will be removed after 2020-07-31.")
  serviceAccountTokenDelete(id: ID!): ServiceAccountTokenDelete @deprecated(reason: "Use the `appTokenDelete` mutation instead. This field will be removed after 2020-07-31.")
  permissionGroupCreate(input: PermissionGroupCreateInput!): PermissionGroupCreate
  permissionGroupUpdate(id: ID!, input: PermissionGroupUpdateInput!): PermissionGroupUpdate
  permissionGroupDelete(id: ID!): PermissionGroupDelete
  smopCustomerCreate(input: SmopCustomerInput!, mobileOtp: ID!): SmopCustomerCreate
  smopCustomerLogin(contactNo: String, email: String, mobileOtp: ID!): SmopCustomerToken
  smopCustomerMobileOrEmailUpdate(contactNo: String, email: String, mobileOtp: ID!): SmopCustomerMobileOrEmailUpdate
  updateServiceMall(input: ServiceMallInput, travelTime: TravelTimeInput): UpdateServiceMall
  accountExists(contactNo: String, email: String, token: String!): AccountExists
  firebaseDetailsUpdate(input: FirebaseDetailsInput!): FirebaseDetailsUpdate
  freshdeskDetailsUpdate(input: FreshdeskDetailsInput!): FreshdeskDetailsUpdate
  logout: DeactivateUserToken
  deleteCreditCard(tokenId: String!): DeleteCreditCard
  paymentMethodUnlink(tokenId: String!): PaymentMethodUnlink
}

input NameTranslationInput {
  name: String
}

type Navigation {
  main: Menu
  secondary: Menu
}

enum NavigationType {
  MAIN
  SECONDARY
}

interface Node {
  id: ID!
}

type OTP implements Node {
  id: ID!
  user: User
  pin: String
  dateGenerated: DateTime
  dateVerified: DateTime
  attempt: Int
  createdAt: DateTime
  updatedAt: DateTime
  status: OTPStatusEnum
}

type OTPCountableConnection {
  pageInfo: PageInfo!
  edges: [OTPCountableEdge!]!
  totalCount: Int
}

type OTPCountableEdge {
  node: OTP!
  cursor: String!
}

type OTPError {
  field: String
  message: String
  code: OTPErrorCode!
}

enum OTPErrorCode {
  GRAPHQL_ERROR
  TOO_MANY_RESEND
  INVALID
  NOT_FOUND
  REQUIRED
  BLOCKED
  EXPIRED
  WRONG_PIN
  UNIQUE
}

type OTPGenerate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  otp: OTPPrivate
  otpErrors: [OTPError!]!
  oTP: OTPPrivate
}

input OTPGenerateInput {
  user: ID!
}

input OTPInput {
  user: [ID]
}

type OTPPrivate implements Node {
  id: ID!
  user: User
  dateGenerated: DateTime
  dateVerified: DateTime
  attempt: Int
  createdAt: DateTime
  updatedAt: DateTime
  status: OTPStatusEnum
}

enum OTPStatusEnum {
  UNV
  VER
  EXP
}

type OTPVerify {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  otp: OTPPrivate
  otpErrors: [OTPError!]!
}

input OTPVerifyInput {
  user: ID!
  pin: String!
}

interface ObjectWithMetadata {
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
}

type Order implements Node & ObjectWithMetadata {
  id: ID!
  parcelNo: String
  smopStatus: SmopOrderStatusEnum
  earliestStoreOrderStatus: SmopOrderStatusEnum
  verticalType: OrderVerticalType
  orderCode: String
  rider: User
  isRider3pl: Boolean!
  created: DateTime!
  status: OrderStatus!
  user: User
  languageCode: String!
  trackingClientId: String!
  billingAddress: Address
  shippingAddress: Address
  mall: Mall
  shippingSchedule: DateTime
  shippingMethod: ShippingMethod
  shippingMethodName: String
  shippingPrice: TaxedMoney
  token: String!
  voucher: Voucher
  giftCards: [GiftCard]
  discount: Money
  discountName: String
  translatedDiscountName: String
  displayGrossPrices: Boolean!
  customerNote: String!
  weight: Weight
  hasCutlery: Boolean!
  canceledAt: DateTime
  canceledBy: User
  cancelReason: String
  distanceFromMall: Float
  lateDeliveryReason: String
  travelTime: TravelTime
  thirdPartyAwbCode: String
  remittanceManualAdjustmentStatus: RemittanceManualAdjustmentStatusEnum
  bookingTime: DateTime
  bookingTaskId: String
  isPaymentCollected: Boolean
  bookingFailedReason: String
  subOrders: [StoreOrder]
  thirdPartyRider: ThirdPartyRider
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  fulfillments: [Fulfillment]!
  lines: [OrderLine]!
  actions: [OrderAction]!
  availableShippingMethods: [ShippingMethod]
  invoices: [Invoice]
  number: String
  isPaid: Boolean
  paymentStatus: PaymentChargeStatusEnum
  paymentStatusDisplay: String
  payments: [Payment]
  total: TaxedMoney
  subtotal: TaxedMoney
  statusDisplay: String
  canFinalize: Boolean!
  totalAuthorized: Money
  totalCaptured: Money
  events: [OrderEvent]
  totalBalance: Money!
  userEmail: String
  isShippingRequired: Boolean!
  isMultiTenant: Boolean
  images: [OrderImage]
  courier: String
  dwellTime: String
  totalTime: String
  onTime: Boolean
  targetTime: String
  aging: String
  awbNo: String
  dispatchNo: String
  specialNotes: String
  shippedAt: DateTime
  shippedBy: User
  completedAt: DateTime
  completedBy: User
  completedReason: String
  completedOtherReason: String
  riderArrived: Boolean
  riderArrivedAt: DateTime
  prepTooLong: Boolean
  heldTooLong: Boolean
  forRescheduling: Boolean
  isDeliveryTimeExceeded: Boolean
  lateDispatchReason: String
  orderShopifyReference: String
  shopifyOrderCreated: Boolean
  dropOffLocation: DropOffLocation
  bin: Bin
  binCode: String
  orderFulfillmentRemarks: OrderEvent
  remittanceManualAdjustmentAmount: Float
  remittanceManualAdjustmentTotalAmount: Float
  remittanceManualAdjustments: [OrderRemittanceManualAdjustment]
  deliveryCourier: DeliveryCourier
  remittanceLine: RemittanceLine
  totalAdjustedAmount: Float
  firstLevelCategory: [ShippingLabel]
}

enum OrderAction {
  CAPTURE
  MARK_AS_PAID
  REFUND
  VOID
}

type OrderAddNote {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  event: OrderEvent
  orderErrors: [OrderError!]!
}

input OrderAddNoteInput {
  message: String!
}

type OrderAssignRider {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  rider: User
  event: OrderEvent
  orderErrors: [OrderError!]!
}

enum OrderBehavior {
  CASE_SENSITIVE
  CASE_INSENSITIVE
}

type OrderBulkCancel {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  orderErrors: [OrderError!]!
}

type OrderCancel {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  orderErrors: [OrderError!]!
}

type OrderCancelGrabExpress {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  event: OrderEvent
  orderErrors: [OrderError!]!
}

type OrderCancelPandagoAuto {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  event: OrderEvent
  orderErrors: [OrderError!]!
}

type OrderCapture {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  orderErrors: [OrderError!]!
}

type OrderClearMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
}

type OrderClearPrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
}

type OrderCountableConnection {
  pageInfo: PageInfo!
  edges: [OrderCountableEdge!]!
  totalCount: Int
}

type OrderCountableEdge {
  node: Order!
  cursor: String!
}

enum OrderDirection {
  ASC
  DESC
}

input OrderDraftFilterInput {
  customer: String
  created: DateRangeInput
  search: String
}

type OrderError {
  field: String
  message: String
  code: OrderErrorCode!
  warehouse: ID
  orderLine: ID
}

enum OrderErrorCode {
  BILLING_ADDRESS_NOT_SET
  CANNOT_CANCEL_FULFILLMENT
  CANNOT_CANCEL_ORDER
  CANNOT_DELETE
  CANNOT_REFUND
  CAPTURE_INACTIVE_PAYMENT
  NOT_EDITABLE
  FULFILL_ORDER_LINE
  GRAPHQL_ERROR
  INVALID
  PRODUCT_NOT_PUBLISHED
  PRODUCT_UNAVAILABLE_FOR_PURCHASE
  NOT_FOUND
  ORDER_NO_SHIPPING_ADDRESS
  PAYMENT_ERROR
  PAYMENT_MISSING
  REQUIRED
  SHIPPING_METHOD_NOT_APPLICABLE
  SHIPPING_METHOD_REQUIRED
  TAX_ERROR
  UNIQUE
  VOID_INACTIVE_PAYMENT
  ZERO_QUANTITY
  INSUFFICIENT_STOCK
  DUPLICATED_INPUT_ITEM
  INVALID_GRAB_TOKEN
  UNABLED_TO_EDIT
  INVALID_REMITTANCE
  TP_INVALID_DELIVERY_TYPE
  TP_AWB_REQUIRED
  TP_AWB_UNIQUE
  TP_AWB_NOT_FOUND
  TP_AWB_INVALID
  TP_AWB_SERVER_ERROR
  INVALID_PANDAGO_TOKEN
}

type OrderEvent implements Node {
  id: ID!
  date: DateTime
  updatedAt: DateTime
  type: OrderEventsEnum
  user: User
  message: String
  email: String
  emailType: OrderEventsEmailsEnum
  amount: Float
  paymentId: String
  paymentGateway: String
  quantity: Int
  composedId: String
  orderNumber: String
  invoiceNumber: String
  oversoldItems: [String]
  lines: [OrderEventOrderLineObject]
  fulfilledItems: [FulfillmentLine]
  warehouse: Warehouse
  changeRemittanceManualAdjustmentStatus: OrderRemittanceManualAdjustmentEvent
  createRemittanceManualAdjustment: OrderRemittanceManualAdjustmentEvent
  referenceId3pl: String
}

type OrderEventCountableConnection {
  pageInfo: PageInfo!
  edges: [OrderEventCountableEdge!]!
  totalCount: Int
}

type OrderEventCountableEdge {
  node: OrderEvent!
  cursor: String!
}

type OrderEventOrderLineObject {
  quantity: Int
  orderLine: OrderLine
  itemName: String
}

enum OrderEventsEmailsEnum {
  PAYMENT_CONFIRMATION
  SHIPPING_CONFIRMATION
  TRACKING_UPDATED
  ORDER_CONFIRMATION
  ORDER_CANCEL
  ORDER_REFUND
  FULFILLMENT_CONFIRMATION
  DIGITAL_LINKS
  EVOUCHER_REDEMPTION
}

enum OrderEventsEnum {
  DRAFT_CREATED
  DRAFT_ADDED_PRODUCTS
  DRAFT_REMOVED_PRODUCTS
  PLACED
  PLACED_FROM_DRAFT
  OVERSOLD_ITEMS
  CANCELED
  ORDER_ASSIGNED_TO_RIDER
  ORDER_UPDATED_RIDER_DETAILS
  ORDER_BOOKED_GRAB_EXPRESS
  ORDER_CANCELED_GRAB_EXPRESS
  ORDER_MARKED_AS_COMPLETED
  ORDER_MARKED_AS_PACKED
  ORDER_MARKED_AS_PAID
  ORDER_MARKED_AS_READY_TO_SHIP
  ORDER_MARKED_AS_SHIPPED
  ORDER_MARKED_AS_PICKED_UP_BY_COURIER
  ORDER_MARKED_AS_RECEIVED_BY_COURIER
  ORDER_RETURNED_TO_FC
  ORDER_FULLY_PAID
  ORDER_UPDATED_SHIPPING_LABEL
  ORDER_FULFILLMENT_REMARKS
  UPDATED_ADDRESS
  EMAIL_SENT
  PAYMENT_AUTHORIZED
  PAYMENT_CAPTURED
  EXTERNAL_SERVICE_NOTIFICATION
  PAYMENT_REFUNDED
  PAYMENT_REFUND_REQUESTED
  PAYMENT_FAILED_REFUND
  PAYMENT_MANUAL_REFUND_NOTE
  PAYMENT_VOIDED
  PAYMENT_FAILED
  INVOICE_REQUESTED
  INVOICE_GENERATED
  INVOICE_UPDATED
  INVOICE_SENT
  FULFILLMENT_CANCELED
  FULFILLMENT_RESTOCKED_ITEMS
  FULFILLMENT_FULFILLED_ITEMS
  TRACKING_UPDATED
  NOTE_ADDED
  OTHER
  STORE_ORDER_ACKNOWLEDGED
  STORE_ORDER_READY
  STORE_ORDER_COLLECTED
  STORE_ORDER_RECEIVED_AT_FC
  STORE_ORDER_CANCELED
  STORE_ORDER_PARCEL_NO_SET
  STORE_ORDER_SCANNED_BY_RUNNER
  STORE_ORDER_SCANNED_BY_OMI_OPS
  STORE_ORDER_DROPPED_OFF_BY_RUNNER
  STORE_ORDER_COMPLETED
  STORE_ORDER_PICK_LINE
  STORE_ORDER_ADD_LINE
  STORE_ORDER_DELETE_LINE
  STORE_ORDER_OVERRIDE_ACKNOWLEDGED
  STORE_ORDER_OVERRIDE_READY
  STORE_ORDER_CANCEL_REVERT
  STORE_ORDER_ASSIGNED_TO_RIDER
  STORE_ORDER_OVERRIDDEN_BY_RUNNER
  RIDER_ARRIVED
  ORDER_2GO_BOOKING_SUCCESS
  ORDER_2GO_BOOKING_FAILED
  CREATE_REMITTANCE_MANUAL_ADJUSTMENT
  CHANGE_REMITTANCE_MANUAL_ADJUSTMENT_STATUS
  ORDER_GRAB_BOOKING_FAILED
  ORDER_AUTOBOOKING_IN_PROCESS
  ORDER_AUTOBOOKING_CANCELLED
  ORDER_GRAB_BOOKING_CANCELED
  ORDER_AUTOBOOKING_FAILED
  REMITTANCE_MANUAL_OVERRIDE
  ORDER_BOOKED_PANDAGO_AUTO
  ORDER_PANDAGO_BOOKING_FAILED
  ORDER_PANDAGO_BOOKING_CANCELED
}

input OrderFilterInput {
  orderCode: String
  parcelNo: String
  paymentStatus: [PaymentChargeStatusEnum]
  smopStatus: [SmopOrderStatusEnum]
  earliestStoreOrderStatus: [SmopOrderStatusEnum]
  verticalType: [StoreTypeEnum]
  customer: String
  created: DateRangeInput
  search: String
  malls: [ID]
  deliveryTypes: [DeliveryTypeEnum]
  deliverySchedules: DateRangeInput
  brandName: String
  paymentMethod: String
  riderName: StaffNameInput
  runnerName: StaffNameInput
  paymentChannelCode: [PaymentChannelCodeEnum]
  isFromShopify: Boolean
  isShopifyOrderCreated: Boolean
}

type OrderFulfill {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  fulfillments: [Fulfillment]
  order: Order
  orderErrors: [OrderError!]!
}

input OrderFulfillInput {
  lines: [OrderFulfillLineInput!]!
  notifyCustomer: Boolean
}

input OrderFulfillLineInput {
  orderLineId: ID
  stocks: [OrderFulfillStockInput!]!
}

input OrderFulfillStockInput {
  quantity: Int!
  warehouse: ID!
}

type OrderFulfillmentRemarks {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  event: OrderEvent
  orderErrors: [OrderError!]!
}

type OrderImage implements Node {
  id: ID!
  sortOrder: Int
  alt: String!
  url(size: Int): String!
}

type OrderImageCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  image: OrderImage
  orderErrors: [OrderError!]!
}

type OrderLine implements Node {
  id: ID!
  productName: String!
  variantName: String!
  productSku: String!
  isShippingRequired: Boolean!
  quantity: Int!
  quantityFulfilled: Int!
  notes: String
  tenant: Tenant
  status: OrderLineStatusEnum
  storeOrder: StoreOrder
  sale: Sale
  taxRate: Float
  originalRetailPriceAmount: Float
  discountedRetailPriceAmount: Float
  digitalContentUrl: DigitalContentUrl
  thumbnail(size: Int): Image
  unitPrice: TaxedMoney
  totalPrice: TaxedMoney
  variant: ProductVariant
  translatedProductName: String!
  translatedVariantName: String!
  allocations: [Allocation!]
}

type OrderLineCountableConnection {
  pageInfo: PageInfo!
  edges: [OrderLineCountableEdge!]!
  totalCount: Int
}

type OrderLineCountableEdge {
  node: OrderLine!
  cursor: String!
}

input OrderLineCreateInput {
  quantity: Int!
  status: OrderLineStatusEnum
  tenant: ID
  variantId: ID!
}

input OrderLineInput {
  quantity: Int!
  status: OrderLineStatusEnum
  tenant: ID
}

enum OrderLineStatusEnum {
  PENDING
  READY_FOR_PICKUP
  PICKED
  RECEIVED_IN_WAREHOUSE
  READY_TO_SHIP
  PICKING
  OUT_OF_STOCK
}

type OrderMarkAsCompleted {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  event: OrderEvent
  orderErrors: [OrderError!]!
}

type OrderMarkAsPacked {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  event: OrderEvent
  orderErrors: [OrderError!]!
}

type OrderMarkAsPaid {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  orderErrors: [OrderError!]!
}

type OrderMarkAsReadyToShip {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  event: OrderEvent
  orderErrors: [OrderError!]!
}

type OrderMarkAsShipped {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  event: OrderEvent
  orderErrors: [OrderError!]!
}

type OrderRefund {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  orderErrors: [OrderError!]!
}

type OrderRemittanceManualAdjustment {
  adjustedAmount: Float
  adjustedTotalAmount: Float
}

type OrderRemittanceManualAdjustmentEvent {
  oldTotalAmount: Float
  adjustedAmount: Float
  adjustedTotalAmount: Float
  adjustmentReason: String
  oldStatus: String
  newStatus: String
}

type OrderReturnToFC {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  event: OrderEvent
  orderErrors: [OrderError!]!
}

type OrderRiderArrived {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  event: OrderEvent
  orderErrors: [OrderError!]!
}

type OrderRiderDispatchAssignOrders {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  hasErrors: Boolean
  ordersWithError: JSONString
  orders: [Order]
  orderErrors: [OrderError!]!
}

type OrderRiderDispatchSearchAndValidation {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  hasErrors: Boolean
  ordersWithError: JSONString
  orders: [Order]
  orderErrors: [OrderError!]!
}

enum OrderSortField {
  NUMBER
  CREATION_DATE
  CUSTOMER
  PAYMENT
  FULFILLMENT_STATUS
  TOTAL
}

input OrderSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: OrderSortField!
}

enum OrderStatus {
  DRAFT
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  CANCELED
}

enum OrderStatusFilter {
  READY_TO_FULFILL
  READY_TO_CAPTURE
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  CANCELED
}

type OrderUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  orderErrors: [OrderError!]!
  order: Order
}

type OrderUpdateDropOffLocation {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  orderErrors: [OrderError!]!
}

input OrderUpdateInput {
  billingAddress: AddressInput
  userEmail: String
  shippingAddress: AddressInput
}

type OrderUpdateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
}

type OrderUpdatePrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
}

type OrderUpdateShipping {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  orderErrors: [OrderError!]!
}

input OrderUpdateShippingInput {
  shippingMethod: ID
}

type OrderUpdateShippingLabel {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  event: OrderEvent
  orderErrors: [OrderError!]!
}

enum OrderVerticalType {
  FOOD_AND_BEVERAGES
  GENERAL_MERCHANDISE
  GROCERY
  SM_FULFILLED
}

type OrderVoid {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  orderErrors: [OrderError!]!
}

type OverrideItemFromCart {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  line: CartLine
  cartErrors: [CartError!]!
}

type PCB implements Node {
  id: ID!
  url: String
  content: String
}

type Page implements Node & ObjectWithMetadata {
  id: ID!
  seoTitle: String
  seoDescription: String
  title: String!
  content: String!
  contentJson: JSONString!
  publicationDate: Date
  slug: String!
  created: DateTime!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  translation(languageCode: LanguageCodeEnum!): PageTranslation
  isPublished: Boolean!
}

type PageBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  pageErrors: [PageError!]!
}

type PageBulkPublish {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  pageErrors: [PageError!]!
}

type PageCountableConnection {
  pageInfo: PageInfo!
  edges: [PageCountableEdge!]!
  totalCount: Int
}

type PageCountableEdge {
  node: Page!
  cursor: String!
}

type PageCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  pageErrors: [PageError!]!
  page: Page
}

type PageDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  pageErrors: [PageError!]!
  page: Page
}

type PageError {
  field: String
  message: String
  code: PageErrorCode!
}

enum PageErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input PageFilterInput {
  search: String
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input PageInput {
  slug: String
  title: String
  content: String
  contentJson: JSONString
  isPublished: Boolean
  publicationDate: String
  seo: SeoInput
}

enum PageSortField {
  TITLE
  SLUG
  VISIBILITY
  CREATION_DATE
  PUBLICATION_DATE
}

input PageSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: PageSortField!
}

type PageTranslatableContent implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  title: String!
  content: String!
  contentJson: JSONString!
  translation(languageCode: LanguageCodeEnum!): PageTranslation
  page: Page
}

type PageTranslate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  page: PageTranslatableContent
}

type PageTranslation implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  title: String!
  content: String!
  contentJson: JSONString!
  language: LanguageDisplay!
}

input PageTranslationInput {
  seoTitle: String
  seoDescription: String
  title: String
  content: String
  contentJson: JSONString
}

enum PageTypeEnum {
  FOOD
  GROCERY
  SM_FULFILLED
  SHOPS
  CINEMA
  DISCOUNTS
}

type PageUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  pageErrors: [PageError!]!
  page: Page
}

type PasswordChange {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  accountErrors: [AccountError!]!
}

enum PauseTypeEnum {
  FULFILLMENT
  TENANT
  BOTH
}

type Payment implements Node {
  id: ID!
  gateway: String!
  isActive: Boolean!
  created: DateTime!
  modified: DateTime!
  token: String!
  checkout: Checkout
  order: Order
  paymentMethodType: String
  customerIpAddress: String
  transactionId: String
  chargeStatus: PaymentChargeStatusEnum!
  actions: [OrderAction]!
  total: Money
  capturedAmount: Money
  transactions: [Transaction]
  allocations: [PaymentAllocation]
  availableCaptureAmount: Money
  availableRefundAmount: Money
  creditCard: CreditCard
  ipay88RefNo: String
  ipay88TransId: String
  ipay88MerchantType: String
  smopTransId: String
  channelCode: PaymentChannelCodeEnum
}

type PaymentAllocation implements Node {
  id: ID!
  created: DateTime!
  updatedAt: DateTime
  payment: Payment!
  currency: String!
  amount: Money
  tenant: TenantPrivate
  description: String
}

type PaymentCapture {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  payment: Payment
  paymentErrors: [PaymentError!]!
}

enum PaymentChannelCodeEnum {
  BPI
  CHINABANK
  RCBC
  UBP
  SHOPEEPAY
  PAYMAYA
  GRABPAY
}

enum PaymentChargeStatusEnum {
  NOT_CHARGED
  PENDING
  PARTIALLY_CHARGED
  FULLY_CHARGED
  PARTIALLY_REFUNDED
  FULLY_REFUNDED
  REFUSED
  CANCELLED
  REFUND_REQUESTED
}

type PaymentCountableConnection {
  pageInfo: PageInfo!
  edges: [PaymentCountableEdge!]!
  totalCount: Int
}

type PaymentCountableEdge {
  node: Payment!
  cursor: String!
}

type PaymentError {
  field: String
  message: String
  code: PaymentErrorCode!
}

enum PaymentErrorCode {
  BILLING_ADDRESS_NOT_SET
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  PARTIAL_PAYMENT_NOT_ALLOWED
  SHIPPING_ADDRESS_NOT_SET
  INVALID_SHIPPING_METHOD
  SHIPPING_METHOD_NOT_SET
  PAYMENT_ERROR
  NOT_SUPPORTED_GATEWAY
  DISABLED_GATEWAY
  CHANNEL_CODE_UNAVAILABLE
  UNAVAILABLE_CHANNEL_CODE_PLUGIN
  NON_COD
}

type PaymentGateway {
  name: String!
  id: ID!
  config: [GatewayConfigLine!]!
  currencies: [String]!
  nonCod: Boolean
  error: CheckoutSubTotalError
}

type PaymentInitialize {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  initializedPayment: PaymentInitialized
  paymentErrors: [PaymentError!]!
}

type PaymentInitialized {
  gateway: String!
  name: String!
  data: JSONString
}

input PaymentInput {
  gateway: String!
  channelCode: String
  token: String
  amount: PositiveDecimal
  billingAddress: AddressInput
  returnUrl: String
  ipay88MerchantType: SmopIpay88MerchantTypeEnum
}

type PaymentMethodUnlink {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  paymentMethod: UserPaymentMethod
  accountErrors: [AccountError!]!
}

type PaymentRefund {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  payment: Payment
  paymentErrors: [PaymentError!]!
}

type PaymentSource {
  gateway: String!
  creditCardInfo: CreditCard
}

type PaymentVoid {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  payment: Payment
  paymentErrors: [PaymentError!]!
}

type Permission {
  code: PermissionEnum!
  name: String!
}

enum PermissionEnum {
  MANAGE_ACCOUNT_SETTINGS
  MANAGE_USERS
  MANAGE_STAFF
  MANAGE_SERVICE_ACCOUNTS
  MANAGE_USER_TYPES
  MANAGE_APPS
  MANAGE_COUPONS
  ADD_COUPON
  CHANGE_COUPON
  VIEW_COUPON_REDEMPTION
  FEATURE_COUPONS
  MANAGE_DISCOUNTS
  MANAGE_VOUCHERS
  MANAGE_SALES
  MANAGE_PAYOUT
  MANAGE_PAYOUT_OPEN_ORDER
  MANAGE_PAYOUT_ON_PROCESS
  MANAGE_PAYOUT_PAYABLES
  MANAGE_PAYOUT_PAYMENT
  CREATE_BATCH
  APPROVE_BATCH
  REJECT_BATCH
  GENERATE_PAYABLE_LIST
  GENERATE_BANK_FILE
  MANAGE_BATCH
  MANAGE_BATCH_HISTORY
  MANAGE_SETTLEMENT
  MANAGE_SELLER_ORDER_REPORTS
  MANAGE_PLUGINS
  MANAGE_GIFT_CARD
  MANAGE_HOME_LOCATIONS
  MANAGE_TASK_AREAS
  MANAGE_AUTO_BOOKING
  VIEW_ADMIN_DROP_OFF
  MANAGE_MENUS
  MANAGE_ALL_MALLS
  MANAGE_ORDERS
  MANAGE_STORE_ORDERS
  MANAGE_REPORTS
  VIEW_MASTER_FULFILLMENT
  VIEW_ADMIN_FULFILLMENT
  VIEW_ADMIN_DISPATCH
  VIEW_ADMIN_ORDERS
  VIEW_ALL_MALLS
  MANAGE_PAGES
  MANAGE_PRODUCTS
  MANAGE_CATEGORIES
  MANAGE_COLLECTIONS
  MANAGE_PRODUCT_VISIBILITY
  MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES
  MANAGE_SHIPPING
  MANAGE_SETTINGS
  MANAGE_TRANSLATIONS
  MANAGE_CHECKOUTS
  MANAGE_ACCESS
  MANAGE_MALLS
  MANAGE_BRANDS
  MANAGE_TENANTS
  MANAGE_BANNERS
  MANAGE_SHIPMENTS
  MANAGE_BRAND_DETAILS
  MANAGE_FINANCE
  MANAGE_BUSINESS_DETAILS
  MANAGE_STORE_SALES
  MANAGE_ANNOUNCEMENTS
  MANAGE_CLUSTERS
  MANAGE_SHOPIFY
  MANAGE_ORDER_TIMEFRAME
  MANAGE_CONFIG
  MANAGE_APP_CONFIGS
  MANAGE_REMITTANCE
  MANAGE_REMITTANCE_CONFIG
  MANAGE_REMITTANCE_OVERRIDE
  MANAGE_RESERVATIONS
  EXECUTE_PAUSE_TENANT
  EXECUTE_PAUSE_MALL
  MANAGE_PAUSE_REASONS
  MANAGE_PAUSE_CONFIG
  VIEW_PAUSE_RUNNING
}

type PermissionGroupCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  permissionGroupErrors: [PermissionGroupError!]!
  group: Group
}

input PermissionGroupCreateInput {
  addPermissions: [PermissionEnum!]
  addUsers: [ID!]
  name: String!
}

type PermissionGroupDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  permissionGroupErrors: [PermissionGroupError!]!
  group: Group
}

type PermissionGroupError {
  field: String
  message: String
  code: PermissionGroupErrorCode!
  permissions: [PermissionEnum!]
  users: [ID!]
}

enum PermissionGroupErrorCode {
  ASSIGN_NON_STAFF_MEMBER
  DUPLICATED_INPUT_ITEM
  CANNOT_REMOVE_FROM_LAST_GROUP
  LEFT_NOT_MANAGEABLE_PERMISSION
  OUT_OF_SCOPE_PERMISSION
  OUT_OF_SCOPE_USER
  GROUP_LOCKED
  CANNOT_ORPHAN_USERS
  REQUIRED
  UNIQUE
}

input PermissionGroupFilterInput {
  search: String
  ids: [ID]
}

enum PermissionGroupSortField {
  PERMISSION_GROUP_NAME
}

input PermissionGroupSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: PermissionGroupSortField!
}

type PermissionGroupUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  permissionGroupErrors: [PermissionGroupError!]!
  group: Group
}

input PermissionGroupUpdateInput {
  addPermissions: [PermissionEnum!]
  addUsers: [ID!]
  name: String
  removePermissions: [PermissionEnum!]
  removeUsers: [ID!]
}

enum PickupLocationServiceTimeDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

type Plugin implements Node {
  id: ID!
  name: String!
  description: String!
  active: Boolean!
  configuration: [ConfigurationItem]
}

type PluginCountableConnection {
  pageInfo: PageInfo!
  edges: [PluginCountableEdge!]!
  totalCount: Int
}

type PluginCountableEdge {
  node: Plugin!
  cursor: String!
}

type PluginError {
  field: String
  message: String
  code: PluginErrorCode!
}

enum PluginErrorCode {
  GRAPHQL_ERROR
  INVALID
  PLUGIN_MISCONFIGURED
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input PluginFilterInput {
  active: Boolean
  search: String
}

enum PluginSortField {
  NAME
  IS_ACTIVE
}

input PluginSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: PluginSortField!
}

type PluginUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  plugin: Plugin
  pluginsErrors: [PluginError!]!
}

input PluginUpdateInput {
  active: Boolean
  configuration: [ConfigurationItemInput]
}

type PopularSearches {
  searchQuery: String
  count: Int
  scope: String
  resultCount: Int
}

scalar PositiveDecimal

input PriceRangeInput {
  gte: Float
  lte: Float
}

type Product implements Node & ObjectWithMetadata {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: String!
  descriptionJson: JSONString!
  publicationDate: Date
  productType: ProductType!
  slug: String!
  brand: Brand
  category: Category
  updatedAt: DateTime
  chargeTaxes: Boolean!
  availableForPurchase: Date
  visibleInListings: Boolean!
  defaultVariant: ProductVariant
  createdAt: DateTime!
  isInventorySettings: Boolean
  productStatus: ProductStatusEnum
  weight: Weight
  deeplinkUrl: String
  shortDynamicLink: String
  nonCod: Boolean
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  url: String! @deprecated(reason: "This field will be removed after 2020-07-31.")
  thumbnail(size: Int): Image
  brandLabel: String
  pricing(mallId: ID): ProductPricingInfo
  isAvailable: Boolean
  isSimpleProduct: Boolean
  minimalVariantPrice: Money
  taxType: TaxType
  attributes: [SelectedAttribute!]!
  purchaseCost: MoneyRange
  margin: Margin
  imageById(id: ID): ProductImage
  variants(sortBy: ProductVariantSortingInput): [ProductVariant]
  images: [ProductImage]
  collections: [Collection]
  translation(languageCode: LanguageCodeEnum!): ProductTranslation
  isAvailableForPurchase: Boolean
  isPublished: Boolean!
  isAvailabilityTime: Boolean
  availabilityTimeStart: Time
  availabilityTimeEnd: Time
  choices: [Choice]
  productVisibility(mallId: ID): ProductVisibility
  productVisibilities(mallIds: [ID]!, firstCount: Int!, visible: Boolean): [ProductVisibility]
  isPublishedByTenant: Boolean
  height: Distance
  width: Distance
  length: Distance
  tags(offset: Int, before: String, after: String, first: Int, last: Int): ProductTagCountableConnection
  deeplinkSpiel: String
  shopifyReference: String
  shopifyTags: [ShopifyTags]
  tenantShare(voucherId: ID): Decimal
  smoShare(voucherId: ID): Decimal
}

type ProductBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  productErrors: [ProductError!]!
}

type ProductBulkPublish {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  productErrors: [ProductError!]!
}

type ProductClearMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  product: Product
}

type ProductClearPrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  product: Product
}

type ProductCountableConnection {
  pageInfo: PageInfo!
  edges: [ProductCountableEdge!]!
  totalCount: Int
}

type ProductCountableEdge {
  node: Product!
  cursor: String!
}

type ProductCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  product: Product
}

input ProductCreateInput {
  attributes: [AttributeValueInput]
  publicationDate: Date
  category: ID
  chargeTaxes: Boolean
  collections: [ID]
  description: String
  descriptionJson: JSONString
  isPublished: Boolean
  name: String!
  slug: String
  taxCode: String
  seo: SeoInput
  weight: WeightScalar
  height: DistanceScalar
  width: DistanceScalar
  length: DistanceScalar
  sku: String
  images: [ProductImageInput]
  trackInventory: Boolean
  basePrice: PositiveDecimal
  visibleInListings: Boolean
  brand: ID
  brandLabel: String
  isAvailabilityTime: Boolean
  availabilityTimeStart: Time
  availabilityTimeEnd: Time
  choices: [ID]
  isInventorySettings: Boolean
  productStatus: ProductStatusEnum
  isSimpleProduct: Boolean
  tags: [String]
  nonCod: Boolean
  productType: ID!
  stocks: [StockInput!]
}

type ProductDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  product: Product
}

type ProductError {
  field: String
  message: String
  code: ProductErrorCode!
  attributes: [ID!]
}

enum ProductErrorCode {
  ALREADY_EXISTS
  ATTRIBUTE_ALREADY_ASSIGNED
  ATTRIBUTE_CANNOT_BE_ASSIGNED
  ATTRIBUTE_VARIANTS_DISABLED
  DUPLICATED_INPUT_ITEM
  GRAPHQL_ERROR
  HAS_ACTIVE_SALE
  HAS_SCHEDULED_SALE
  INVALID
  UNSUPPORTED_FILE_TYPE
  NOT_ACCESSIBLE
  NOT_PRODUCTS_IMAGE
  NOT_PRODUCTS_VARIANT
  NOT_FOUND
  REQUIRED
  UNIQUE
  VARIANT_NO_DIGITAL_CONTENT
}

enum ProductFieldEnum {
  NAME
  DESCRIPTION
  PRODUCT_TYPE
  CATEGORY
  VISIBLE
  AVAILABLE_FOR_PURCHASE
  SEARCHABLE
  PRODUCT_WEIGHT
  COLLECTIONS
  CHARGE_TAXES
  PRODUCT_IMAGES
  VARIANT_SKU
  VARIANT_PRICE
  COST_PRICE
  VARIANT_WEIGHT
  VARIANT_IMAGES
  PRODUCT_STATUS
}

input ProductFilterInput {
  isPublished: Boolean
  collections: [ID]
  categories: [ID]
  hasCategory: Boolean
  attributes: [AttributeInput]
  stockAvailability: StockAvailability
  productType: ProductTypeEnum
  stocks: ProductStockFilterInput
  search: String
  isFromShopify: Boolean
  isVisible: ProductVisibilityFilterInput
  saleOnMall: ID
  price: PriceRangeInput
  minimalPrice: PriceRangeInput
  sellingPrice: PriceRangeInput
  productTypes: [ID]
  searchByName: String
  searchBySku: String
  ids: [ID]
  brands: [ID]
  tenants: [ID]
  malls: [ID]
  productStatus: ProductStatusEnum
  productStatuses: [ProductStatusEnum]
  storeType: StoreTypeEnum
  mallDistance: [MallDistanceInput]
}

type ProductGenerateDynamicLink {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  product: Product
  productErrors: [ProductError!]!
}

type ProductImage implements Node {
  id: ID!
  sortOrder: Int
  alt: String!
  url(size: Int): String!
}

type ProductImageBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  productErrors: [ProductError!]!
}

type ProductImageCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  product: Product
  image: ProductImage
  productErrors: [ProductError!]!
}

input ProductImageCreateInput {
  alt: String
  image: Upload!
  product: ID!
}

type ProductImageCreateUrl {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  product: Product
  image: ProductImage
  productErrors: [ProductError!]!
}

input ProductImageCreateUrlInput {
  alt: String
  imageUrl: String!
  product: ID!
}

type ProductImageDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  product: Product
  image: ProductImage
  productErrors: [ProductError!]!
}

input ProductImageInput {
  alt: String
  image: Upload!
}

type ProductImageReorder {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  product: Product
  images: [ProductImage]
  productErrors: [ProductError!]!
}

type ProductImageResize {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  imageCount: Int
  productCount: Int
  productErrors: [ProductError!]!
}

type ProductImageUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  product: Product
  image: ProductImage
  productErrors: [ProductError!]!
}

input ProductImageUpdateInput {
  alt: String
}

input ProductOrder {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  attributeId: ID
  field: ProductOrderField
}

enum ProductOrderField {
  NAME
  PRICE
  MINIMAL_PRICE
  DATE
  TYPE
  PUBLISHED
  PUBLICATION_DATE
  DISCOUNT_AMOUNT
  DISCOUNT_PERCENTAGE
  SELLING_PRICE
  MALL_DISTANCE
  MOST_POPULAR
}

type ProductPricingInfo {
  onSale: Boolean
  discount: TaxedMoney
  discountLocalCurrency: TaxedMoney
  priceRange: TaxedMoneyRange
  priceRangeUndiscounted: TaxedMoneyRange
  priceRangeLocalCurrency: TaxedMoneyRange
}

type ProductSetAvailabilityForPurchase {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  product: Product
  productErrors: [ProductError!]!
}

type ProductStatusBulkUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  bulkProductErrors: [BulkProductError!]!
}

enum ProductStatusEnum {
  DRAFT
  READY
  UNLISTED
  DELETED
}

input ProductStockFilterInput {
  warehouseIds: [ID!]
  quantity: IntRangeInput
}

type ProductTag implements Node {
  id: ID!
  name: String
}

type ProductTagCountableConnection {
  pageInfo: PageInfo!
  edges: [ProductTagCountableEdge!]!
  totalCount: Int
}

type ProductTagCountableEdge {
  node: ProductTag!
  cursor: String!
}

input ProductTagFilterInput {
  search: String
  ids: [ID]
}

enum ProductTemplateEnum {
  LIST
  PRICES
  IMAGES_AND_DESCRIPTIONS
  RETAIL_AND_SELLING_PRICE
  INVENTORY_AND_STATUS
  SEO_INFORMATION_IMAGES
}

type ProductTranslatableContent implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: String!
  descriptionJson: JSONString!
  translation(languageCode: LanguageCodeEnum!): ProductTranslation
  product: Product
}

type ProductTranslate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  product: Product
}

type ProductTranslation implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: String!
  descriptionJson: JSONString!
  language: LanguageDisplay!
}

type ProductType implements Node & ObjectWithMetadata {
  id: ID!
  name: String!
  slug: String!
  hasVariants: Boolean!
  isShippingRequired: Boolean!
  isDigital: Boolean!
  weight: Weight
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  products(offset: Int, before: String, after: String, first: Int, last: Int): ProductCountableConnection
  taxRate: TaxRateType
  taxType: TaxType
  variantAttributes: [Attribute]
  productAttributes: [Attribute]
  availableAttributes(filter: AttributeFilterInput, offset: Int, before: String, after: String, first: Int, last: Int): AttributeCountableConnection
  storeType: StoreTypeEnum
}

type ProductTypeBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  productErrors: [ProductError!]!
}

type ProductTypeClearMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productType: ProductType
}

type ProductTypeClearPrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productType: ProductType
}

enum ProductTypeConfigurable {
  CONFIGURABLE
  SIMPLE
}

type ProductTypeCountableConnection {
  pageInfo: PageInfo!
  edges: [ProductTypeCountableEdge!]!
  totalCount: Int
}

type ProductTypeCountableEdge {
  node: ProductType!
  cursor: String!
}

type ProductTypeCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productType: ProductType
}

type ProductTypeDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productType: ProductType
}

enum ProductTypeEnum {
  DIGITAL
  SHIPPABLE
}

input ProductTypeFilterInput {
  search: String
  configurable: ProductTypeConfigurable
  productType: ProductTypeEnum
  storeType: StoreTypeEnum
  brand: ID
  ids: [ID]
}

input ProductTypeInput {
  name: String
  slug: String
  hasVariants: Boolean
  productAttributes: [ID]
  variantAttributes: [ID]
  isShippingRequired: Boolean
  isDigital: Boolean
  weight: WeightScalar
  taxCode: String
  storeType: StoreTypeEnum
}

type ProductTypeReorderAttributes {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productType: ProductType
  productErrors: [ProductError!]!
}

enum ProductTypeSortField {
  NAME
  DIGITAL
  SHIPPING_REQUIRED
}

input ProductTypeSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: ProductTypeSortField!
}

type ProductTypeUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productType: ProductType
}

type ProductTypeUpdateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productType: ProductType
}

type ProductTypeUpdatePrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productType: ProductType
}

type ProductUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  product: Product
}

input ProductUpdateInput {
  attributes: [AttributeValueInput]
  publicationDate: Date
  category: ID
  chargeTaxes: Boolean
  collections: [ID]
  description: String
  descriptionJson: JSONString
  isPublished: Boolean
  name: String!
  slug: String
  taxCode: String
  seo: SeoInput
  weight: WeightScalar
  height: DistanceScalar
  width: DistanceScalar
  length: DistanceScalar
  sku: String
  images: [ProductImageInput]
  trackInventory: Boolean
  basePrice: PositiveDecimal
  visibleInListings: Boolean
  brand: ID
  brandLabel: String
  isAvailabilityTime: Boolean
  availabilityTimeStart: Time
  availabilityTimeEnd: Time
  choices: [ID]
  isInventorySettings: Boolean
  productStatus: ProductStatusEnum
  isSimpleProduct: Boolean
  tags: [String]
  nonCod: Boolean
  stocks: [StockInput!]
}

type ProductUpdateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  product: Product
}

type ProductUpdatePrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  product: Product
}

type ProductUploadEvent implements Node {
  id: ID!
  date: DateTime!
  type: ProductUploadEventsEnum!
  job: ProductUploadJob
}

enum ProductUploadEventsEnum {
  UPLOAD_PENDING
  UPLOAD_SUCCESS
  UPLOAD_FAILED
  UPLOAD_ERROR_FILE_SENT
}

type ProductUploadJob implements Node & Job {
  id: ID!
  user: User
  errorFileUrl: String!
  status: JobStatusEnum!
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String
  date: DateTime!
  uploadEvents: [ProductUploadEvent!]
  templateType: ProductUploadTemplateTypeEnum
}

type ProductUploadTemplate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productUpload: ProductUploadJob
  productErrors: [ProductError!]!
}

input ProductUploadTemplateInput {
  file: Upload!
  isOverwrite: Boolean!
  templateType: ProductUploadTemplateTypeEnum!
  uploadAs: ProductUserViewEnum
  brand: ID
  tenant: ID
}

enum ProductUploadTemplateTypeEnum {
  PRODUCT_FILE
  PRODUCT_DETAILS_UPDATE
  PRICE_UPDATE
  INVENTORY_UPDATE
  SALES_MERCHANT_PERCENTAGE_PRODUCT
  SALES_MERCHANT_ABSOLUTE_VALUE_PRODUCT
  SALES_PARTNERSHIP_ABSOLUTE_VALUE_PRODUCT
  SALES_PARTNERSHIP_PERCENTAGE_PRODUCT
}

enum ProductUserViewEnum {
  SELLER_MASTER
  STORE_ADMIN
}

input ProductUserViewInfoInput {
  viewAs: ProductUserViewEnum!
  brandId: ID
  tenantId: ID
}

type ProductVariant implements Node & ObjectWithMetadata {
  id: ID!
  name: String!
  sku: String!
  product: Product!
  trackInventory: Boolean!
  brand: Brand
  barcode: String
  discountedPrice: Money
  weight: Weight
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  quantity: Int! @deprecated(reason: "Use the stock field instead. This field will be removed after 2020-07-31.")
  quantityAllocated: Int @deprecated(reason: "Use the stock field instead. This field will be removed after 2020-07-31.")
  stockQuantity: Int! @deprecated(reason: "Use the quantityAvailable field instead. This field will be removed after 2020-07-31.")
  price: Money
  pricing(mallId: ID, useMallIds: Boolean): VariantPricingInfo
  isAvailable: Boolean @deprecated(reason: "Use the stock field instead. This field will be removed after 2020-07-31.")
  attributes: [SelectedAttribute!]!
  costPrice: Money
  margin: Int
  quantityOrdered: Int
  revenue(period: ReportingPeriod): TaxedMoney
  images: [ProductImage]
  translation(languageCode: LanguageCodeEnum!): ProductVariantTranslation
  digitalContent: DigitalContent
  stocks(countryCode: CountryCode, warehouseIds: [ID!], quantity: IntRangeInput): [Stock]
  height: Distance
  width: Distance
  length: Distance
  quantityAvailable(countryCode: CountryCode): Int!
  stockOnMall(mallId: ID, useMallIds: Boolean): Stock
  sellingPrice(saleId: ID, brandId: ID): Money
  tenantShare(saleId: ID, voucherId: ID, brandId: ID): Decimal
  smoShare(saleId: ID, voucherId: ID, brandId: ID): Decimal
}

type ProductVariantBulkCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  productVariants: [ProductVariant!]!
  bulkProductErrors: [BulkProductError!]!
}

input ProductVariantBulkCreateInput {
  name: String
  costPrice: PositiveDecimal
  price: PositiveDecimal
  sku: String!
  trackInventory: Boolean
  weight: WeightScalar
  height: DistanceScalar
  width: DistanceScalar
  length: DistanceScalar
  brand: ID
  barcode: String
  discountedPrice: PositiveDecimal
  attributes: [AttributeValueInput]!
  stocks: [StockInput!]
}

type ProductVariantBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  productErrors: [ProductError!]!
}

type ProductVariantClearMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

type ProductVariantClearPrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

type ProductVariantCountableConnection {
  pageInfo: PageInfo!
  edges: [ProductVariantCountableEdge!]!
  totalCount: Int
}

type ProductVariantCountableEdge {
  node: ProductVariant!
  cursor: String!
}

type ProductVariantCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

input ProductVariantCreateInput {
  name: String!
  costPrice: PositiveDecimal
  price: PositiveDecimal
  sku: String
  trackInventory: Boolean
  weight: WeightScalar
  height: DistanceScalar
  width: DistanceScalar
  length: DistanceScalar
  brand: ID
  barcode: String
  discountedPrice: PositiveDecimal
  product: ID!
  stocks: [StockInput!]
}

type ProductVariantDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

input ProductVariantFilterInput {
  search: String
  sku: [String]
  brands: [ID]
}

input ProductVariantInput {
  name: String
  costPrice: PositiveDecimal
  price: PositiveDecimal
  sku: String
  trackInventory: Boolean
  weight: WeightScalar
  height: DistanceScalar
  width: DistanceScalar
  length: DistanceScalar
  brand: ID
  barcode: String
  discountedPrice: PositiveDecimal
}

type ProductVariantReorder {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  product: Product
  productErrors: [ProductError!]!
}

type ProductVariantSetDefault {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  product: Product
  productErrors: [ProductError!]!
}

enum ProductVariantSortField {
  NAME
  COST_PRICE
  DISCOUNTED_PRICE
  OOS
  PRICE
}

input ProductVariantSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  mallId: ID
  field: ProductVariantSortField!
}

type ProductVariantStocksCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productVariant: ProductVariant
  bulkStockErrors: [BulkStockError!]!
}

type ProductVariantStocksDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productVariant: ProductVariant
  stockErrors: [StockError!]!
}

type ProductVariantStocksUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productVariant: ProductVariant
  bulkStockErrors: [BulkStockError!]!
}

type ProductVariantTranslatableContent implements Node {
  id: ID!
  name: String!
  translation(languageCode: LanguageCodeEnum!): ProductVariantTranslation
  productVariant: ProductVariant
}

type ProductVariantTranslate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  productVariant: ProductVariant
}

type ProductVariantTranslation implements Node {
  id: ID!
  name: String!
  language: LanguageDisplay!
}

type ProductVariantUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

type ProductVariantUpdateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

type ProductVariantUpdatePrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

input ProductVisibilitiesFilterInput {
  isVisible: Boolean
  isFromShopify: Boolean
  isAvailable: Boolean
  sellingPrice: PriceRangeInput
  search: String
  searchByName: String
  searchBySku: String
  brands: [ID]
  tenants: [ID]
  malls: [ID]
  ids: [ID]
  productIds: [ID]
  productStatus: ProductStatusEnum
  productStatuses: [ProductStatusEnum]
  storeType: StoreTypeEnum
  mallDistance: [MallDistanceInput]
  unpublishIndefinitely: Boolean
}

input ProductVisibilitiesOrder {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: ProductVisibilitiesOrderField
}

enum ProductVisibilitiesOrderField {
  NAME
  PRICE
  DATE
  SELLING_PRICE
  MALL_DISTANCE
  MOST_POPULAR
  PUBLICATION_DATE
}

type ProductVisibility implements Node & ObjectWithMetadata {
  id: ID!
  product: Product!
  isVisible: Boolean
  highestDiscountVariant: ProductVariant
  maxDiscountedVariantRetailPriceAmount: Float
  maxDiscountAmount: Float
  hasOutOfStockVariant: Boolean
  hasInStockVariant: Boolean
  popularity: Int!
  unpublishIndefinitely: Boolean
  republishProductAt: DateTime
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  isAvailable: Boolean
  tenant: Tenant
  kendraQueryId: String
  kendraResultId: String
}

type ProductVisibilityBulkUnpublish {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productVisibilities: [ProductVisibility]
  productErrors: [ProductError!]!
}

type ProductVisibilityBulkUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  productVisibility: [ProductVisibility]!
  productErrors: [ProductError!]!
}

type ProductVisibilityCountableConnection {
  pageInfo: PageInfo!
  edges: [ProductVisibilityCountableEdge!]!
  totalCount: Int
}

type ProductVisibilityCountableEdge {
  node: ProductVisibility!
  cursor: String!
}

input ProductVisibilityFilterInput {
  tenant: String
  isVisible: Boolean
}

input ProductVisibilityInput {
  isVisible: Boolean!
  isAvailable: Boolean!
  product: ID!
  tenant: ID!
  unpublishIndefinitely: Boolean
  republishProductAt: DateTime
}

input ProductVisibilityUnpublishInput {
  productVisibilityId: ID!
  unpublishIndefinitely: Boolean!
  republishProductAt: DateTime
}

type ProductsCategories {
  products: [Product]
  categories: [Category]
}

type Query {
  servicePause(pauseId: ID!): ServicePause
  servicePauses(offset: Int, before: String, after: String, first: Int, last: Int): ServicePauseCountableConnection
  pauseReason(reasonId: ID!): ServicePauseReason
  pauseReasons(offset: Int, before: String, after: String, first: Int, last: Int): ServicePauseReasonCountableConnection
  reservation(reservationId: ID): Reservation
  reservations(filter: ReservationFilterInput, sortBy: ReservationSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): ReservationCountableConnection
  reservationActivityLog(reservationActivityLogId: ID!): ReservationActivityLog
  reservationActivityLogs(filter: ReservationActivityLogInput, sortBy: ActivityLogSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): ReservationActivityLogCountableConnection
  remittanceOrders(filter: RemittanceOrderFilterInput, sortBy: RemittanceOrderSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): OrderCountableConnection
  remittances(filter: RemittanceFilterInput, sortBy: RemittanceSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): RemittanceCountableConnection
  remittance(id: ID!): Remittance
  riderRemittances(riderId: String!, status: RemittanceStatusEnum!): TaxedMoney
  remittanceConfig(id: String, mallId: String): RemittanceConfig
  remittanceConfigs(filter: RemittanceConfigFilterInput, offset: Int, before: String, after: String, first: Int, last: Int): RemittanceConfigCountableConnection
  storePopularity(id: ID!): StorePopularity
  storePopularities(mallDistance: [MallDistanceInput]!, sortBy: StorePopularityOrder, offset: Int, before: String, after: String, first: Int, last: Int): StorePopularityCountableConnection
  dropOffLocation(id: ID!): DropOffLocation
  taskArea(id: ID!): TaskArea
  dropOffLocations(filter: DropOffLocationInput, offset: Int, before: String, after: String, first: Int, last: Int): DropOffLocationCountableConnection
  taskAreas(filter: TaskAreaInput, offset: Int, before: String, after: String, first: Int, last: Int): TaskAreaCountableConnection
  template(id: ID!): Template
  templates(filter: TemplateInput, sortBy: TemplateSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): TemplateCountableConnection
  racks(filter: RackInput, offset: Int, before: String, after: String, first: Int, last: Int): RackCountableConnection
  rack(id: ID!): Rack
  bins(offset: Int, before: String, after: String, first: Int, last: Int): BinCountableConnection
  cart(token: UUID): Cart
  carts(sortBy: CartSortingInput, filter: CartFilterInput, offset: Int, before: String, after: String, first: Int, last: Int): CartCountableConnection
  storeOrders(sortBy: StoreOrderSortingInput, filter: StoreOrderFilterInput, offset: Int, before: String, after: String, first: Int, last: Int): StoreOrderCountableConnection
  cartSummaries(filter: CartSummaryFilterInput): CartSummaries
  webhook(id: ID!): Webhook
  webhooks(sortBy: WebhookSortingInput, filter: WebhookFilterInput, offset: Int, before: String, after: String, first: Int, last: Int): WebhookCountableConnection @deprecated(reason: "Use webhooks field on app(s) query instead. This field will be removed after 2020-07-31.")
  webhookEvents: [WebhookEvent]
  webhookSamplePayload(eventType: WebhookSampleEventTypeEnum!): JSONString
  warehouse(id: ID!): Warehouse
  warehouses(filter: WarehouseFilterInput, sortBy: WarehouseSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): WarehouseCountableConnection
  homeLocation(id: ID!): HomeLocation
  homeLocations(filter: WarehouseFilterInput, sortBy: WarehouseSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): HomeLocationCountableConnection
  translations(kind: TranslatableKinds!, before: String, after: String, first: Int, last: Int): TranslatableItemConnection
  translation(id: ID!, kind: TranslatableKinds!): TranslatableItem
  stock(id: ID!): Stock
  stocks(filter: StockFilterInput, sortBy: StockSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): StockCountableConnection
  stockHistories(filter: StockHistoryFilterInput, sortBy: StockHistorySortingInput, offset: Int, before: String, after: String, first: Int, last: Int): StockHistoryCountableConnection
  access(id: ID!): Access
  accesses(offset: Int, before: String, after: String, first: Int, last: Int): AccessCountableConnection
  accessGroup(id: ID!): AccessGroup
  accessGroups(filter: AccessGroupInput, offset: Int, before: String, after: String, first: Int, last: Int): AccessGroupCountableConnection
  malls(filter: MallInput, sortBy: MallSortingInput, status: SmopStatusEnum, offset: Int, before: String, after: String, first: Int, last: Int): MallCountableConnection
  mall(id: ID!): Mall
  brands(filter: BrandInput, sortBy: BrandSortingInput, status: SmopStatusEnum, offset: Int, before: String, after: String, first: Int, last: Int): BrandCountableConnection
  brand(id: ID!): Brand
  brandsPrivate(filter: BrandInput, status: SmopStatusEnum, offset: Int, before: String, after: String, first: Int, last: Int): BrandPrivateCountableConnection
  brandPrivate(id: ID!): BrandPrivate
  tenants(mall: ID, brand: ID, mallDistance: [MallDistanceInput], filter: TenantInput, sortBy: TenantSortingInput, status: SmopStatusEnum, offset: Int, before: String, after: String, first: Int, last: Int): TenantCountableConnection
  tenant(id: ID!): Tenant
  tenantsPrivate(mall: ID, brand: ID, filter: TenantInput, status: SmopStatusEnum, offset: Int, before: String, after: String, first: Int, last: Int): TenantPrivateCountableConnection
  tenantPrivate(id: ID!): TenantPrivate
  banners(filter: BannerInput, sortBy: BannerSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): BannerCountableConnection
  banner(id: ID!): Banner
  shipments(offset: Int, before: String, after: String, first: Int, last: Int): ShipmentCountableConnection
  shipment(id: ID!): Shipment
  otps(filter: OTPInput, offset: Int, before: String, after: String, first: Int, last: Int): OTPCountableConnection
  otp(id: ID!): OTP
  clusters(filter: ClusterInput, offset: Int, before: String, after: String, first: Int, last: Int): ClusterCountableConnection
  cluster(id: ID!): Cluster
  shopifyBrandSyncJob(pid: UUID!): ShopifyBrandSyncJob
  announcements(filter: AnnouncementInput, sortBy: AnnouncementSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): AnnouncementCountableConnection
  announcement(id: ID!): Announcement
  dynamicLinks(offset: Int, before: String, after: String, first: Int, last: Int): DynamicLinkCountableConnection
  dynamicLink(id: ID!): DynamicLink
  activityLog(id: ID!): ActivityLog
  activityLogs(filter: ActivityLogFilterInput, sortBy: ActivityLogSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): ActivityLogCountableConnection
  brandTag(id: ID!): BrandTag
  brandTags(filter: BrandTagInput, offset: Int, before: String, after: String, first: Int, last: Int): BrandTagCountableConnection
  brandGroup(id: ID!): BrandGroup
  brandGroups(fetchPopularStores: Boolean, filter: BrandGroupInput, sortBy: BrandGroupSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): BrandGroupCountableConnection
  mallShippingMethodActivityLog(id: ID!): MallShippingMethodActivityLog
  mallShippingMethodActivityLogs(filter: MallActivityLogInput, sortBy: ActivityLogSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): MallShippingMethodActivityLogCountableConnection
  shop: Shop!
  shippingZone(id: ID!): ShippingZone
  shippingZones(offset: Int, before: String, after: String, first: Int, last: Int): ShippingZoneCountableConnection
  applicableShippingMethods(checkoutId: ID!, offset: Int, before: String, after: String, first: Int, last: Int): ShippingMethodCountableConnection
  shopifyInStorePickupLocations(offset: Int, before: String, after: String, first: Int, last: Int): InStorePickupLocationCountableConnection
  searchHistory(sortBy: SearchHistoryOrder, filter: SearchHistoryFilterInput, unique: Boolean, offset: Int, before: String, after: String, first: Int, last: Int): SearchHistoryCountableConnection
  popularSearches(scope: SearchScopeEnum, scopes: [SearchScopeEnum], limit: Int, pastDays: Int, combine: Boolean): [PopularSearches]
  digitalContent(id: ID!): DigitalContent
  digitalContents(offset: Int, before: String, after: String, first: Int, last: Int): DigitalContentCountableConnection
  attributes(filter: AttributeFilterInput, sortBy: AttributeSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): AttributeCountableConnection
  attribute(id: ID!): Attribute
  categories(filter: CategoryFilterInput, sortBy: CategorySortingInput, level: Int, levels: [Int], onMall: ID, offset: Int, before: String, after: String, first: Int, last: Int): CategoryCountableConnection
  category(id: ID, slug: String): Category
  collection(id: ID, slug: String): Collection
  collections(filter: CollectionFilterInput, sortBy: CollectionSortingInput, onMall: ID, offset: Int, before: String, after: String, first: Int, last: Int): CollectionCountableConnection
  product(id: ID, slug: String): Product
  products(filter: ProductFilterInput, sortBy: ProductOrder, stockAvailability: StockAvailability, pushDownOos: Boolean, userViewInfo: ProductUserViewInfoInput, offset: Int, before: String, after: String, first: Int, last: Int): ProductCountableConnection
  productType(id: ID!): ProductType
  productTypes(filter: ProductTypeFilterInput, sortBy: ProductTypeSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): ProductTypeCountableConnection
  productVariant(id: ID, sku: String): ProductVariant
  productVariants(ids: [ID], filter: ProductVariantFilterInput, offset: Int, before: String, after: String, first: Int, last: Int): ProductVariantCountableConnection
  reportProductSales(period: ReportingPeriod!, tenantId: ID, offset: Int, before: String, after: String, first: Int, last: Int): ProductVariantCountableConnection
  choices(offset: Int, before: String, after: String, first: Int, last: Int): ChoiceCountableConnection
  choice(id: ID!): Choice
  productUploadJob(id: ID!): ProductUploadJob
  productTags(filter: ProductTagFilterInput, offset: Int, before: String, after: String, first: Int, last: Int): ProductTagCountableConnection
  productTag(id: ID!): ProductTag
  productsCategories(productFirst: Int, productFilter: ProductFilterInput, productSortBy: ProductOrder, categoryFirst: Int, categoryFilter: CategoryFilterInput, categorySortBy: CategorySortingInput): ProductsCategories
  productVisibilities(filter: ProductVisibilitiesFilterInput, sortBy: ProductVisibilitiesOrder, pushDownOos: Boolean, useKendra: Boolean, offset: Int, before: String, after: String, first: Int, last: Int): ProductVisibilityCountableConnection
  payment(id: ID, referenceNo: String): Payment
  payments(offset: Int, before: String, after: String, first: Int, last: Int): PaymentCountableConnection
  page(id: ID, slug: String): Page
  pages(sortBy: PageSortingInput, filter: PageFilterInput, offset: Int, before: String, after: String, first: Int, last: Int): PageCountableConnection
  homepageEvents(offset: Int, before: String, after: String, first: Int, last: Int): OrderEventCountableConnection
  order(id: ID!): Order
  orders(sortBy: OrderSortingInput, filter: OrderFilterInput, created: ReportingPeriod, status: OrderStatusFilter, offset: Int, before: String, after: String, first: Int, last: Int): OrderCountableConnection
  storeOrder(id: ID!): StoreOrder
  draftOrders(sortBy: OrderSortingInput, filter: OrderDraftFilterInput, created: ReportingPeriod, offset: Int, before: String, after: String, first: Int, last: Int): OrderCountableConnection
  ordersTotal(period: ReportingPeriod): TaxedMoney
  storeOrdersTotal(period: ReportingPeriod, tenantId: ID): TaxedMoney
  orderByToken(token: UUID!): Order
  orderLinesByTenant(tenant: ID!, order: ID, offset: Int, before: String, after: String, first: Int, last: Int): OrderLineCountableConnection
  orderLine(id: ID!): OrderLine
  riderDispatchBatch(id: ID!): RiderDispatchBatch
  riderDispatchBatches(sortBy: RiderDispatchBatchSortingInput, filter: RiderDispatchBatchFilterInput, offset: Int, before: String, after: String, first: Int, last: Int): RiderDispatchBatchCountableConnection
  menu(id: ID, name: String, slug: String): Menu
  menus(sortBy: MenuSortingInput, filter: MenuFilterInput, offset: Int, before: String, after: String, first: Int, last: Int): MenuCountableConnection
  menuItem(id: ID!): MenuItem
  menuItems(sortBy: MenuItemSortingInput, filter: MenuItemFilterInput, offset: Int, before: String, after: String, first: Int, last: Int): MenuItemCountableConnection
  giftCard(id: ID!): GiftCard
  giftCards(offset: Int, before: String, after: String, first: Int, last: Int): GiftCardCountableConnection
  plugin(id: ID!): Plugin
  plugins(filter: PluginFilterInput, sortBy: PluginSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): PluginCountableConnection
  coupon(id: ID!): Coupon
  coupons(filter: CouponFilterInput, sortBy: CouponSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): CouponCountableConnection
  couponCollection(instanceId: ID!, useValidation: Boolean): CouponCollection
  couponCollections(filter: CouponCollectionFilterInput, sortBy: CouponCollectionSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): CouponCollectionCountableConnection
  couponRedemptions(filter: CouponRedemptionFilterInput, sortBy: CouponRedemptionSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): CouponRedemptionCountableConnection
  customerCoupon(id: ID!): Coupon
  customerCoupons(filter: CouponFilterInput, sortBy: CouponSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): CouponCountableConnection
  sale(id: ID!): Sale
  saleValidate(id: ID!): SaleValidate
  sales(filter: SaleFilterInput, sortBy: SaleSortingInput, query: String, offset: Int, before: String, after: String, first: Int, last: Int): SaleCountableConnection
  voucher(id: ID!): Voucher
  vouchers(filter: VoucherFilterInput, sortBy: VoucherSortingInput, query: String, offset: Int, before: String, after: String, first: Int, last: Int): VoucherCountableConnection
  voucherGroup(id: ID!): VoucherGroup
  voucherGroups(filter: VoucherGroupFilterInput, sortBy: VoucherGroupSortingInput, query: String, offset: Int, before: String, after: String, first: Int, last: Int): VoucherGroupCountableConnection
  voucherTenant(id: ID!): VoucherTenant
  voucherTenants(filter: VoucherTenantFilterInput, sortBy: VoucherTenantSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): VoucherTenantCountableConnection
  customerSale(id: ID!): Sale
  customerSales(filter: SaleFilterInput, sortBy: SaleSortingInput, query: String, offset: Int, before: String, after: String, first: Int, last: Int): SaleCountableConnection
  customerVoucher(id: ID!): Voucher
  customerVouchers(filter: VoucherFilterInput, sortBy: VoucherSortingInput, query: String, offset: Int, before: String, after: String, first: Int, last: Int): VoucherCountableConnection
  getApplicableVouchers(sortBy: VoucherSortingInput, filter: VoucherFilterInput, checkoutId: ID!, offset: Int, before: String, after: String, first: Int, last: Int): VoucherCountableConnection
  checkoutVouchers(sortBy: VoucherSortingInput, filter: VoucherFilterInput, checkoutId: ID!, search: String, offset: Int, before: String, after: String, first: Int, last: Int): VoucherCountableConnection
  applicableEvouchers(filter: VoucherFilterInput, sortBy: VoucherSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): VoucherCountableConnection
  voucherJob(id: ID!): VoucherJob
  voucherJobBulk(id: ID!): VoucherJobBulk
  discountUploadJob(id: ID!): DiscountUploadJob
  exportFile(id: ID!): ExportFile
  exportFiles(filter: ExportFileFilterInput, sortBy: ExportFileSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): ExportFileCountableConnection
  taxTypes: [TaxType]
  pcb(filename: String): PCB
  checkout(token: UUID): Checkout
  checkouts(offset: Int, before: String, after: String, first: Int, last: Int): CheckoutCountableConnection
  checkoutLine(id: ID): CheckoutLine
  checkoutLines(offset: Int, before: String, after: String, first: Int, last: Int): CheckoutLineCountableConnection
  appConfig(id: ID!): AppConfig
  appConfigs(filter: AppConfigInput, sortBy: AppConfigSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): AppConfigCountableConnection
  appsInstallations: [AppInstallation!]!
  apps(filter: AppFilterInput, sortBy: AppSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): AppCountableConnection
  app(id: ID!): App
  addressValidationRules(countryCode: CountryCode!, countryArea: String, city: String, cityArea: String): AddressValidationData
  address(id: ID!): Address
  customers(filter: CustomerFilterInput, sortBy: UserSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): UserCountableConnection
  permissionGroups(filter: PermissionGroupFilterInput, sortBy: PermissionGroupSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): GroupCountableConnection
  permissionGroup(id: ID!): Group
  me: User
  smMarketsToken: MarketToken
  staffUsers(filter: StaffUserInput, sortBy: UserSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): UserCountableConnection
  serviceAccounts(filter: ServiceAccountFilterInput, sortBy: ServiceAccountSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): ServiceAccountCountableConnection @deprecated(reason: "Use the `apps` query instead. This field will be removed after 2020-07-31.")
  serviceAccount(id: ID!): ServiceAccount @deprecated(reason: "Use the `app` query instead. This field will be removed after 2020-07-31.")
  user(id: ID!): User
  accountActivityLog(id: ID!): AccountActivityLog
  accountActivityLogs(filter: ActivityLogFilterInput, sortBy: ActivityLogSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): AccountActivityLogCountableConnection
  _entities(representations: [_Any]): [_Entity]
  _service: _Service
}

type Rack implements Node & ObjectWithMetadata {
  name: String!
  prefix: String!
  id: ID!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  dropOffLocation: DropOffLocation
  bins(offset: Int, before: String, after: String, first: Int, last: Int): BinCountableConnection
  availableBins: [Bin]
}

type RackCountableConnection {
  pageInfo: PageInfo!
  edges: [RackCountableEdge!]!
  totalCount: Int
}

type RackCountableEdge {
  node: Rack!
  cursor: String!
}

type RackCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  rack: Rack
  bins: [Bin]
  rackError: [RackError!]!
}

input RackCreateInput {
  name: String!
  prefix: String!
  dropOffLocationId: ID!
  templateId: ID!
  totalBin: Int!
}

type RackDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  rack: Rack
  rackError: [RackError!]!
}

type RackError {
  field: String
  message: String
  code: TaskAreaErrorCode!
}

input RackInput {
  dropOffLocation: ID
  template: ID
}

type RackUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  rack: Rack
  bins: [Bin]
  rackError: [RackError!]!
}

type RateKendraSearchResults {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  status: SearchRatingStatus
}

type ReducedRate {
  rate: Float!
  rateType: TaxRateType!
}

type RefreshGrabExpressStatus {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  orderErrors: [OrderError!]!
}

type RefreshPandagoAutoStatus {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  orderErrors: [OrderError!]!
}

type RefreshToken {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  token: String
  user: User
  accountErrors: [AccountError!]!
}

type Remittance implements Node {
  id: ID!
  remittanceNo: String
  totalAmount: Decimal
  remittedAt: DateTime
  createdAt: DateTime
  canceledAt: DateTime
  receiptImage: Image
  receiptUploadedAt: DateTime
  remittanceLines: [RemittanceLine]
  remittanceEvents: [RemittanceEvent]
  status: RemittanceStatusEnum
  remitter: User
  aging: Int
  companyName: String
  institutionCode: String
  isProcessing: Boolean
  note: String
}

type RemittanceCancel {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  remittance: Remittance
  remittanceErrors: [RemittanceError!]!
}

type RemittanceConfig implements Node {
  id: ID!
  codLimit: Float
  dailyNotifTimes: [Time]
  reminderIsActive: Boolean!
  isEnable: Boolean!
  enabledAt: DateTime
  minRemittanceLimit: Float
}

type RemittanceConfigCountableConnection {
  pageInfo: PageInfo!
  edges: [RemittanceConfigCountableEdge!]!
  totalCount: Int
}

type RemittanceConfigCountableEdge {
  node: RemittanceConfig!
  cursor: String!
}

input RemittanceConfigFilterInput {
  mall: ID
}

input RemittanceConfigUpdateInput {
  activateReminder: Boolean
  codLimit: Decimal
  dailyRemittanceNotifTimes: [RemittanceNotifTimeEnum]
  minRemittanceLimit: Decimal
}

type RemittanceCountableConnection {
  pageInfo: PageInfo!
  edges: [RemittanceCountableEdge!]!
  totalCount: Int
}

type RemittanceCountableEdge {
  node: Remittance!
  cursor: String!
}

type RemittanceError {
  field: String
  message: String
  code: RemittanceErrorCode!
}

enum RemittanceErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  INVALID_REMITTANCE
}

type RemittanceEvent implements Node {
  id: ID!
  user: User
  datetime: DateTime
  message: String
  type: RemittanceEventTypeEnum
}

enum RemittanceEventTypeEnum {
  TO_REMIT
  REMITTED
  CANCELLED
  PROCESSING
}

input RemittanceFilterInput {
  search: String
  status: [RemittanceStatusEnum]
  createdAt: DateTimeRangeInput
  remittedAt: DateTimeRangeInput
  remitter: RemitterNameInput
  remittanceId: String
  hasReceipt: Boolean
}

type RemittanceLine implements Node {
  id: ID!
  remittance: Remittance
  order: Order
  createdAt: DateTime
}

enum RemittanceManualAdjustmentStatusEnum {
  UNASSIGNED
  FOR_ADJUSTMENT
  COMPLETED
}

enum RemittanceNotifTimeEnum {
  UTC_00_00
  UTC_01_00
  UTC_02_00
  UTC_03_00
  UTC_04_00
  UTC_05_00
  UTC_06_00
  UTC_07_00
  UTC_08_00
  UTC_09_00
  UTC_10_00
  UTC_11_00
  UTC_12_00
  UTC_13_00
  UTC_14_00
  UTC_15_00
  UTC_16_00
  UTC_17_00
  UTC_18_00
  UTC_19_00
  UTC_20_00
  UTC_21_00
  UTC_22_00
  UTC_23_00
}

input RemittanceOrderFilterInput {
  orderCode: String
  search: String
  smopStatus: [SmopOrderStatusEnum]
  verticalType: [StoreTypeEnum]
  status: [RemittanceStatusEnum]
  createdAt: DateTimeRangeInput
  remittedAt: DateTimeRangeInput
  remitter: RemitterNameInput
  paymentType: String
  shippedAt: DateTimeRangeInput
  completedAt: DateTimeRangeInput
  rider: RiderNameInput
  motherOrder: String
  amount: String
  deliveryTypes: [DeliveryTypeEnum]
  hasRemittanceId: Boolean
  remittanceId: String
  malls: [ID]
  isPaymentCollected: Boolean
  hasReceipt: Boolean
  companyName: [CourierTypeEnum]
}

enum RemittanceOrderSortField {
  CREATED_DATE
}

input RemittanceOrderSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: RemittanceOrderSortField!
}

enum RemittanceSortField {
  STATUS
  CREATION_DATE
}

input RemittanceSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: RemittanceSortField!
}

enum RemittanceStatusEnum {
  TO_REMIT
  REMITTED
  CANCELLED
  FOR_BANK_CONFIRMATION
}

type RemittanceUploadReceipt {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  remittance: Remittance
  remittanceErrors: [RemittanceError!]!
}

input RemitterNameInput {
  firstName: String
  lastName: String
}

input ReorderInput {
  id: ID!
  sortOrder: Int
}

enum ReportingPeriod {
  TODAY
  THIS_MONTH
}

type RequestEmailChange {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  accountErrors: [AccountError!]!
}

type RequestPasswordReset {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
}

type Reservation implements Node {
  id: ID!
  tenant: Tenant
  user: User
  reservationDate: DateTime
  remarks: String
  guestCount: Int
  customerName: String
  mobileNo: String
  alternateNo: String
  guestEmail: String
  reservationStatus: ReservationStatusEnum
  createdDate: DateTime
  updatedDate: DateTime
  updatedBy: User
  reservationCode: String
  cancelReason: String
  processedAt: DateTime
  completedAt: DateTime
}

type ReservationActivityLog implements Node {
  modelName: String!
  action: ReservationActivityLogAction!
  subject: Int
  doer: User
  createdAt: DateTime
  updatedAt: DateTime
  message: String!
  newValues: JSONString
  field: String
  reservationCode: String
  id: ID!
  user: User
}

enum ReservationActivityLogAction {
  UPDATE
  DELETE
  CREATE
}

type ReservationActivityLogCountableConnection {
  pageInfo: PageInfo!
  edges: [ReservationActivityLogCountableEdge!]!
  totalCount: Int
}

type ReservationActivityLogCountableEdge {
  node: ReservationActivityLog!
  cursor: String!
}

input ReservationActivityLogInput {
  search: String
  id: [ID]
  updatedBy: [ID]
  action: ActivityLogActionsEnum
  subject: String
  createdAt: DateRangeInput
  reservationCode: String
}

type ReservationCancel {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  reservation: Reservation
  reservationErrors: [ReservationError!]!
}

type ReservationCountableConnection {
  pageInfo: PageInfo!
  edges: [ReservationCountableEdge!]!
  totalCount: Int
}

type ReservationCountableEdge {
  node: Reservation!
  cursor: String!
}

type ReservationCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  reservation: Reservation
  reservationErrors: [ReservationError!]!
}

input ReservationCreateInput {
  tenantId: ID!
  reservationDate: DateTime!
  remarks: String
  guestCount: Int!
  customerName: String!
  mobileNo: String!
  alternateNo: String
  guestEmail: String!
  reservationStatus: ReservationStatusEnum!
}

type ReservationError {
  field: String
  message: String
  code: ReservationErrorCode!
}

enum ReservationErrorCode {
  INVALID
  NOT_FOUND
}

input ReservationFilterInput {
  id: ID
  reservationStatuses: [ReservationStatusEnum]
  withinPast3Months: Boolean
  reservationCode: String
  createdAt: DateRangeInput
}

enum ReservationSortField {
  CREATED_DATE
  RESERVATION_DATE
  UPDATED_DATE
}

input ReservationSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: ReservationSortField!
}

enum ReservationStatusEnum {
  PENDING
  CONFIRMED
  CANCELLED
  DECLINED
  COMPLETED
}

type ReservationUpdateStatus {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  reservation: Reservation
  reservationErrors: [ReservationError!]!
}

type RiderCollectionTotal {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  totalAmount: Decimal
  orderErrors: [OrderError!]!
}

type RiderDispatchBatch implements Node & ObjectWithMetadata {
  batchCode: String
  rider: User
  createdBy: User
  created: DateTime!
  deliveryDate: DateTime
  orders: [Order]
  id: ID!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
}

type RiderDispatchBatchCountableConnection {
  pageInfo: PageInfo!
  edges: [RiderDispatchBatchCountableEdge!]!
  totalCount: Int
}

type RiderDispatchBatchCountableEdge {
  node: RiderDispatchBatch!
  cursor: String!
}

input RiderDispatchBatchFilterInput {
  batchCode: String
  rider: ID
  createdBy: ID
  created: DateRangeInput
  deliveryDate: DateRangeInput
  riderName: StaffNameInput
}

enum RiderDispatchBatchSortField {
  NUMBER
  CREATION_DATE
}

input RiderDispatchBatchSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: RiderDispatchBatchSortField!
}

input RiderNameInput {
  firstName: String
  lastName: String
}

type RiderPickUpLocation implements Node {
  id: ID!
  name: String!
  longitude: Float
  latitude: Float
  remarks: String
  deliveryCourier: DeliveryCourier
}

type Sale implements Node {
  id: ID!
  name: String!
  type: SaleType!
  value: Float
  startDate: DateTime!
  endDate: DateTime
  isCreatedBySeller: Boolean
  categories(offset: Int, before: String, after: String, first: Int, last: Int): CategoryCountableConnection
  collections(offset: Int, before: String, after: String, first: Int, last: Int): CollectionCountableConnection
  products(offset: Int, before: String, after: String, first: Int, last: Int): ProductCountableConnection
  productVariants(offset: Int, before: String, after: String, first: Int, last: Int): ProductVariantCountableConnection
  translation(languageCode: LanguageCodeEnum!): SaleTranslation
  malls(offset: Int, before: String, after: String, first: Int, last: Int): MallCountableConnection
  tenants(offset: Int, before: String, after: String, first: Int, last: Int): TenantCountableConnection
  description: String
  isAppliedToAllMalls: Boolean
  isAppliedToAllStores: Boolean
  status: DiscountStatusEnum
}

type SaleAddCatalogues {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  sale: Sale
  discountErrors: [DiscountError!]!
}

type SaleBulkActivate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  discountErrors: [DiscountError!]!
}

type SaleBulkDeactivate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  discountErrors: [DiscountError!]!
}

type SaleBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  discountErrors: [DiscountError!]!
}

input SaleCatalogueInput {
  products: [ID]
  productVariants: [SaleProductVariantInput]
  categories: [ID]
  collections: [ID]
}

type SaleCountableConnection {
  pageInfo: PageInfo!
  edges: [SaleCountableEdge!]!
  totalCount: Int
}

type SaleCountableEdge {
  node: Sale!
  cursor: String!
}

type SaleCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  discountErrors: [DiscountError!]!
  sale: Sale
}

type SaleDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  discountErrors: [DiscountError!]!
  sale: Sale
}

input SaleFilterInput {
  status: [DiscountStatusEnum]
  saleType: DiscountValueTypeEnum
  started: DateTimeRangeInput
  search: String
  brand: ID
}

input SaleInput {
  name: String
  type: DiscountValueTypeEnum
  value: PositiveDecimal
  products: [ID]
  categories: [ID]
  collections: [ID]
  startDate: DateTime!
  endDate: DateTime!
  isAppliedToAllMalls: Boolean!
  malls: [ID]
  isAppliedToAllStores: Boolean!
  tenants: [ID]
  description: String
  brand: ID
}

input SaleProductVariantInput {
  product_variant: ID!
  sellingPrice: PositiveDecimal
  smoShare: Decimal
  tenantShare: Decimal
}

type SaleRemoveCatalogues {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  sale: Sale
  discountErrors: [DiscountError!]!
}

enum SaleSortField {
  NAME
  START_DATE
  END_DATE
  SALE_VALUE
  TYPE
}

input SaleSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: SaleSortField!
}

type SaleTranslatableContent implements Node {
  id: ID!
  name: String!
  translation(languageCode: LanguageCodeEnum!): SaleTranslation
  sale: Sale
}

type SaleTranslate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  sale: Sale
}

type SaleTranslation implements Node {
  id: ID!
  name: String
  language: LanguageDisplay!
}

enum SaleType {
  FIXED
  PERCENTAGE
  ABSOLUTE_VALUE
}

type SaleUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  errorVariantsCount: Int
  discountErrors: [DiscountError!]!
  sale: Sale
}

type SaleValidate {
  errorVariantsCount: Int
}

type SearchHistory implements Node {
  id: ID!
  user: User
  searchQuery: String
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean!
  scope: SearchHistoryScope
  resultCount: Int
  mall: Mall
}

type SearchHistoryClear {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  status: SearchStatus
}

type SearchHistoryCountableConnection {
  pageInfo: PageInfo!
  edges: [SearchHistoryCountableEdge!]!
  totalCount: Int
}

type SearchHistoryCountableEdge {
  node: SearchHistory!
  cursor: String!
}

type SearchHistoryDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  status: SearchStatus
}

input SearchHistoryFilterInput {
  searchQuery: String
  scope: SearchScopeEnum
  scopes: [SearchScopeEnum]
}

input SearchHistoryOrder {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: SearchHistoryOrderField!
}

enum SearchHistoryOrderField {
  SEARCH_QUERY
  RECENT
}

enum SearchHistoryScope {
  HOMEPAGE
  GENERAL
  FOOD
  SMFULFILLED
  GROCERY
  BRAND
  TENANTS
  CATEGORY
  COLLECTION
  CYBERZONE
  DISCOUNTEDPRODUCTS
  PHARMACY
}

enum SearchOperationStatusEnum {
  SUCCESS
  FAIL
  NOOP
}

type SearchRatingStatus {
  code: SearchOperationStatusEnum
  message: String
}

enum SearchRatingTypeEnum {
  FEEDBACK
  RELEVANCE
}

enum SearchResponseRatingEnum {
  RELEVANT
  NOT_RELEVANT
}

enum SearchScopeEnum {
  HOMEPAGE
  GENERAL
  FOOD
  SMFULFILLED
  GROCERY
  BRAND
  TENANTS
  CATEGORY
  COLLECTION
  CYBERZONE
  DISCOUNTEDPRODUCTS
  PHARMACY
}

type SearchStatus {
  code: SearchOperationStatusEnum
  message: String
}

type SelectedAttribute {
  attribute: Attribute!
  values: [AttributeValue]!
}

type SellerCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  staffErrors: [StaffError!]!
  user: User
}

input SeoInput {
  title: String
  description: String
}

type ServiceAccount implements Node & ObjectWithMetadata {
  id: ID!
  name: String
  created: DateTime
  isActive: Boolean
  permissions: [Permission]
  tokens: [ServiceAccountToken]
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
}

type ServiceAccountClearPrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  serviceAccount: ServiceAccount
}

type ServiceAccountCountableConnection {
  pageInfo: PageInfo!
  edges: [ServiceAccountCountableEdge!]!
  totalCount: Int
}

type ServiceAccountCountableEdge {
  node: ServiceAccount!
  cursor: String!
}

type ServiceAccountCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  authToken: String
  accountErrors: [AccountError!]!
  serviceAccount: ServiceAccount
}

type ServiceAccountDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  serviceAccount: ServiceAccount
}

input ServiceAccountFilterInput {
  search: String
  isActive: Boolean
}

input ServiceAccountInput {
  name: String
  isActive: Boolean
  permissions: [PermissionEnum]
}

enum ServiceAccountSortField {
  SERVICE_ACCOUNT_NAME
  CREATION_DATE
}

input ServiceAccountSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: ServiceAccountSortField!
}

type ServiceAccountToken implements Node {
  name: String
  authToken: String
  id: ID!
}

type ServiceAccountTokenCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  authToken: String
  accountErrors: [AccountError!]!
  serviceAccountToken: ServiceAccountToken
}

type ServiceAccountTokenDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  serviceAccountToken: ServiceAccountToken
}

input ServiceAccountTokenInput {
  name: String
  serviceAccount: ID!
}

type ServiceAccountUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  serviceAccount: ServiceAccount
}

type ServiceAccountUpdatePrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  serviceAccount: ServiceAccount
}

type ServiceHours implements Node {
  id: ID!
  pickupLocation: InStorePickupLocation!
  isClosed: Boolean!
  day: PickupLocationServiceTimeDay!
  opensAt: Time!
  closesAt: Time!
  createdAt: DateTime
  updatedAt: DateTime
}

type ServiceHoursCountableConnection {
  pageInfo: PageInfo!
  edges: [ServiceHoursCountableEdge!]!
  totalCount: Int
}

type ServiceHoursCountableEdge {
  node: ServiceHours!
  cursor: String!
}

input ServiceMallInput {
  mall: ID!
  longitude: Decimal!
  latitude: Decimal!
  mapPlaceId: String
  distanceFromMall: Decimal
}

type ServicePause implements Node {
  pauseReason: ServicePauseReason
  mall: Mall
  tenant: TenantPrivate
  startedBy: User
  endedBy: User
  id: ID!
  reasonTitle: String
  reasonCode: String
  pauseType: String
  startedAt: DateTime
  endedAt: DateTime
}

type ServicePauseConfig implements Node {
  id: ID!
  mall: Mall
  cluster: Cluster
  cooldownPeriod: Int
  pauseDuration: Int
  maxExtension: Int
}

type ServicePauseCountableConnection {
  pageInfo: PageInfo!
  edges: [ServicePauseCountableEdge!]!
  totalCount: Int
}

type ServicePauseCountableEdge {
  node: ServicePause!
  cursor: String!
}

type ServicePauseError {
  field: String
  message: String
  code: ServicePauseErrorCode!
}

enum ServicePauseErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

type ServicePauseReason implements Node {
  id: ID!
  createdBy: User
  reasonCode: String
  reasonTitle: String
  reasonDetails: String
  pauseType: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ServicePauseReasonCountableConnection {
  pageInfo: PageInfo!
  edges: [ServicePauseReasonCountableEdge!]!
  totalCount: Int
}

type ServicePauseReasonCountableEdge {
  node: ServicePauseReason!
  cursor: String!
}

type SetCouponsToCollection {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  couponCollection: CouponCollection
  assignedCoupons: [Coupon]
  removedCoupons: [Coupon]
  discountErrors: [DiscountError!]!
}

input SetCouponsToCollectionInput {
  assign: [ID]
  remove: [ID]
}

type SetDailyRemittanceConfig {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  mall: Mall
  remittanceConfig: RemittanceConfig
  remittanceErrors: [RemittanceError!]!
}

type SetMallAutoBookingConfig {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  mall: Mall
  autoBookingConfig: AutoBookingConfig
  autoBookingError: [AutoBookingError!]!
}

type SetPassword {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  token: String
  refreshToken: String
  csrfToken: String
  user: User
  accountErrors: [AccountError!]!
}

type SetProductVisibility {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productVisibility: ProductVisibility
  productErrors: [ProductError!]!
}

type Shipment implements Node {
  id: ID!
  order: Order
  airwayBill: String
  targetDispatchDate: DateTime
  targetDeliveryDate: DateTime
  pendingSince: DateTime
  status: SmopDeliveryStatusEnum
  carrier: String
  company: String
  source: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ShipmentCountableConnection {
  pageInfo: PageInfo!
  edges: [ShipmentCountableEdge!]!
  totalCount: Int
}

type ShipmentCountableEdge {
  node: Shipment!
  cursor: String!
}

type ShipmentCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shipmentErrors: [ShipmentError!]!
  shipments: Shipment
}

input ShipmentCreateInput {
  order: ID!
  airwayBill: String
  targetDispatchDate: DateTime
  targetDeliveryDate: DateTime
  pendingSince: DateTime
  status: SmopDeliveryStatusEnum!
  carrier: String
  company: String
  source: String
}

type ShipmentError {
  field: String
  message: String
  code: ShipmentErrorCode!
}

enum ShipmentErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

type ShipmentUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shipmentErrors: [ShipmentError!]!
  shipments: Shipment
}

input ShipmentUpdateInput {
  order: ID!
  airwayBill: String
  targetDispatchDate: DateTime
  targetDeliveryDate: DateTime
  pendingSince: DateTime
  status: SmopDeliveryStatusEnum!
  carrier: String
  company: String
  source: String
}

type ShippingError {
  field: String
  message: String
  code: ShippingErrorCode!
  warehouses: [ID!]
}

enum ShippingErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  MAX_LESS_THAN_MIN
  NOT_FOUND
  REQUIRED
  UNIQUE
  DUPLICATED_INPUT_ITEM
}

type ShippingLabel {
  itemType: String
  quantity: Int
}

type ShippingMethod implements Node {
  id: ID!
  name: String!
  price: Money
  minimumOrderPrice: Money
  maximumOrderPrice: Money
  minimumOrderWeight: Weight
  maximumOrderWeight: Weight
  shortDescription: String
  type: ShippingMethodTypeEnum
  deliveryType: DeliveryTypeEnum
  translation(languageCode: LanguageCodeEnum!): ShippingMethodTranslation
  notes: String
  isCashAllowed: Boolean
  minimumRequiredVersion: String
  error: String
}

type ShippingMethodCountableConnection {
  pageInfo: PageInfo!
  edges: [ShippingMethodCountableEdge!]!
  totalCount: Int
}

type ShippingMethodCountableEdge {
  node: ShippingMethod!
  cursor: String!
}

type ShippingMethodTranslatableContent implements Node {
  id: ID!
  name: String!
  translation(languageCode: LanguageCodeEnum!): ShippingMethodTranslation
  shippingMethod: ShippingMethod
}

type ShippingMethodTranslation implements Node {
  id: ID!
  name: String
  language: LanguageDisplay!
}

enum ShippingMethodTypeEnum {
  PRICE
  WEIGHT
}

type ShippingPriceBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  shippingErrors: [ShippingError!]!
}

type ShippingPriceCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shippingZone: ShippingZone
  shippingErrors: [ShippingError!]!
  shippingMethod: ShippingMethod
}

type ShippingPriceDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shippingMethod: ShippingMethod
  shippingZone: ShippingZone
  shippingErrors: [ShippingError!]!
}

input ShippingPriceInput {
  name: String
  price: PositiveDecimal
  minimumOrderPrice: PositiveDecimal
  maximumOrderPrice: PositiveDecimal
  minimumOrderWeight: WeightScalar
  maximumOrderWeight: WeightScalar
  type: ShippingMethodTypeEnum
  deliveryType: DeliveryTypeEnum!
  shippingZone: ID
  isCashAllowed: Boolean
  minimumRequiredVersion: String
}

type ShippingPriceTranslate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  shippingMethod: ShippingMethod
}

type ShippingPriceUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shippingZone: ShippingZone
  shippingErrors: [ShippingError!]!
  shippingMethod: ShippingMethod
}

type ShippingZone implements Node {
  id: ID!
  name: String!
  default: Boolean!
  priceRange: MoneyRange
  countries: [CountryDisplay]
  shippingMethods: [ShippingMethod]
  warehouses: [Warehouse]
}

type ShippingZoneBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  shippingErrors: [ShippingError!]!
}

type ShippingZoneCountableConnection {
  pageInfo: PageInfo!
  edges: [ShippingZoneCountableEdge!]!
  totalCount: Int
}

type ShippingZoneCountableEdge {
  node: ShippingZone!
  cursor: String!
}

type ShippingZoneCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shippingErrors: [ShippingError!]!
  shippingZone: ShippingZone
}

input ShippingZoneCreateInput {
  name: String
  countries: [String]
  default: Boolean
  addWarehouses: [ID]
}

type ShippingZoneDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shippingErrors: [ShippingError!]!
  shippingZone: ShippingZone
}

type ShippingZoneUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shippingErrors: [ShippingError!]!
  shippingZone: ShippingZone
}

input ShippingZoneUpdateInput {
  name: String
  countries: [String]
  default: Boolean
  addWarehouses: [ID]
  removeWarehouses: [ID]
}

type Shop {
  availablePaymentGateways(currency: String): [PaymentGateway!]!
  geolocalization: Geolocalization
  authorizationKeys: [AuthorizationKey]!
  countries(languageCode: LanguageCodeEnum): [CountryDisplay!]!
  currencies: [String]! @deprecated(reason: "This field will be removed in Saleor 3.0")
  defaultCurrency: String! @deprecated(reason: "This field will be removed in Saleor 3.0")
  defaultCountry: CountryDisplay
  defaultMailSenderName: String
  defaultMailSenderAddress: String
  description: String
  domain: Domain!
  homepageCollection: Collection @deprecated(reason: "Use the `collection` query with the `slug` parameter. This field will be removed in Saleor 3.0")
  languages: [LanguageDisplay]!
  name: String!
  navigation: Navigation @deprecated(reason: "Fetch menus using the `menu` query with `slug` parameter.")
  permissions: [Permission]!
  phonePrefixes: [String]!
  headerText: String
  includeTaxesInPrices: Boolean!
  displayGrossPrices: Boolean!
  chargeTaxesOnShipping: Boolean!
  trackInventoryByDefault: Boolean
  defaultWeightUnit: WeightUnitsEnum
  translation(languageCode: LanguageCodeEnum!): ShopTranslation
  automaticFulfillmentDigitalProducts: Boolean
  defaultDigitalMaxDownloads: Int
  defaultDigitalUrlValidDays: Int
  companyAddress: Address
  customerSetPasswordUrl: String
  staffNotificationRecipients: [StaffNotificationRecipient]
  isFreshdeskSupportEnabled: Boolean
}

type ShopAddressUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shop: Shop
  shopErrors: [ShopError!]!
}

type ShopDomainUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shop: Shop
  shopErrors: [ShopError!]!
}

type ShopError {
  field: String
  message: String
  code: ShopErrorCode!
}

enum ShopErrorCode {
  ALREADY_EXISTS
  CANNOT_FETCH_TAX_RATES
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

type ShopFetchTaxRates {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shop: Shop
  shopErrors: [ShopError!]!
}

type ShopSMManualSync {
  errors: [String]
  productsSynced: Int
  customCollectionsSynced: Int
  smartCollectionsSynced: Int
}

input ShopSettingsInput {
  headerText: String
  description: String
  includeTaxesInPrices: Boolean
  displayGrossPrices: Boolean
  chargeTaxesOnShipping: Boolean
  trackInventoryByDefault: Boolean
  defaultWeightUnit: WeightUnitsEnum
  automaticFulfillmentDigitalProducts: Boolean
  defaultDigitalMaxDownloads: Int
  defaultDigitalUrlValidDays: Int
  defaultMailSenderName: String
  defaultMailSenderAddress: String
  customerSetPasswordUrl: String
  isFreshdeskSupportEnabled: Boolean
}

type ShopSettingsTranslate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shop: Shop
  translationErrors: [TranslationError!]!
}

input ShopSettingsTranslationInput {
  headerText: String
  description: String
}

type ShopSettingsUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shop: Shop
  shopErrors: [ShopError!]!
}

type ShopTranslation implements Node {
  id: ID!
  headerText: String!
  description: String!
  language: LanguageDisplay!
}

type ShopifyBrandSync {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  pid: UUID
  shopifyError: [ShopifyError!]!
}

type ShopifyBrandSyncJob implements Node {
  brand: Brand
  status: TransactionStatusEnum
  pid: UUID
  id: ID!
}

type ShopifyBrandTagAdd {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  brand: BrandPrivate
  shopifyError: [ShopifyError!]!
}

type ShopifyBrandTagRemove {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  brand: BrandPrivate
  shopifyError: [ShopifyError!]!
}

type ShopifyBrandTagUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  brand: BrandPrivate
  shopifyError: [ShopifyError!]!
}

type ShopifyCredentialsCheck {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  status: String
  shopifyError: [ShopifyError!]!
}

input ShopifyCredentialsCheckInput {
  brand: ID
  shopifyApiSecret: String
  shopifyApiShop: String
}

type ShopifyError {
  field: String
  message: String
  code: ShopifyErrorCode!
}

enum ShopifyErrorCode {
  GRAPHQL_ERROR
  INVALID
  REQUIRED
}

enum ShopifyTagEnum {
  EXCLUSION
  NON_COD
}

type ShopifyTags {
  tag: String
}

input SiteDomainInput {
  domain: String
  name: String
}

enum SmopBannerTypeEnum {
  SALE
  VOUCHER
  ANNOUNCEMENT
}

type SmopCustomerCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

input SmopCustomerInput {
  firstName: String!
  lastName: String!
  email: String!
  gender: Gender
  dateOfBirth: Date
  contactNo: String!
  address: AddressInput
  age: UserAgeEnum
  birthMonth: UserBirthMonthEnum
  prefix: UserPrefixEnum
  smac: String
}

type SmopCustomerMobileOrEmailUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  token: String
  refreshToken: String
  csrfToken: String
  accountErrors: [AccountError!]!
}

type SmopCustomerToken {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  token: String
  refreshToken: String
  csrfToken: String
  user: User
  accountErrors: [AccountError!]!
}

enum SmopDeliveryStatusEnum {
  PEN
  DIS
  RES
  DEL
}

enum SmopIpay88MerchantTypeEnum {
  FOOD_AND_BEVERAGES
  GENERAL_MERCHANDISE
  SM_FULFILLED
}

enum SmopOpStatusEnum {
  OPN
  CLS
}

enum SmopOrderStatusEnum {
  NEW_ORDER
  ACKNOWLEDGED
  READY
  COLLECTED
  RECEIVED_AT_FC
  PACKED
  READY_TO_SHIP
  SHIPPED
  COMPLETED
  CANCELED
  RETURN_TO_FC
}

enum SmopRentalTypeEnum {
  FIXED
  PERCENTAGE
}

enum SmopStatusEnum {
  ACT
  INA
  DEL
  RVW
  DCL
}

enum SmopUserTypeCode {
  MALL_ADMIN
  STORE_ADMIN
  SELLER_MASTER
  OMI_ADMIN
  OMI_OPS
  OMI_FINANCE
  RUNNER
  RIDER
  FINANCE
  CUSTOMER
  ACQUISITION
  ACCOUNT_MANAGER
  MARKETING
  FINANCE_SPECIALIST
  FINANCE_MANAGER
  FINANCE_TREASURY_1
  FINANCE_TREASURY_2
}

type StaffBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  staffErrors: [StaffError!]!
}

type StaffCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  staffErrors: [StaffError!]!
  user: User
}

input StaffCreateInput {
  firstName: String
  lastName: String
  email: String
  isActive: Boolean
  note: String
  accessGroup: ID
  gender: Gender
  dateOfBirth: Date
  osUsed: String
  lastOnlineDate: DateTime
  status: LockStatus
  firebaseRegistrationId: String
  addGroups: [ID!]
  contactNo: String
  smopUsertypeCode: SmopUserTypeCode
  objectId: ID
  companyName: String
  malls: [ID]
  promoCreator: StaffPromoCreatorEnum
  redirectUrl: String
  password: String
}

type StaffDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  staffErrors: [StaffError!]!
  user: User
}

type StaffError {
  field: String
  message: String
  code: AccountErrorCode!
  user: User
  permissions: [PermissionEnum!]
  groups: [ID!]
  users: [ID!]
}

input StaffNameInput {
  firstName: String
  lastName: String
}

type StaffNotificationRecipient implements Node {
  user: User
  active: Boolean
  id: ID!
  email: String
}

type StaffNotificationRecipientCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shopErrors: [ShopError!]!
  staffNotificationRecipient: StaffNotificationRecipient
}

type StaffNotificationRecipientDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shopErrors: [ShopError!]!
  staffNotificationRecipient: StaffNotificationRecipient
}

input StaffNotificationRecipientInput {
  user: ID
  email: String
  active: Boolean
}

type StaffNotificationRecipientUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  shopErrors: [ShopError!]!
  staffNotificationRecipient: StaffNotificationRecipient
}

enum StaffPromoCreatorEnum {
  SMO_MARKETING
  MALL_MARKETING
  APP_DEVELOPMENT
}

type StaffUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  staffErrors: [StaffError!]!
  user: User
}

input StaffUpdateInput {
  firstName: String
  lastName: String
  email: String
  isActive: Boolean
  note: String
  accessGroup: ID
  gender: Gender
  dateOfBirth: Date
  osUsed: String
  lastOnlineDate: DateTime
  status: LockStatus
  firebaseRegistrationId: String
  addGroups: [ID!]
  contactNo: String
  smopUsertypeCode: SmopUserTypeCode
  objectId: ID
  companyName: String
  malls: [ID]
  promoCreator: StaffPromoCreatorEnum
  removeGroups: [ID!]
}

input StaffUserInput {
  status: LockStatus
  search: String
  groups: [ID]
  smopUserType: [SmopUserTypeCode]
  malls: [ID]
}

type StartServicePause {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  servicePause: ServicePause
  servicePauseError: [ServicePauseError!]!
}

input StartServicePauseInput {
  tenantId: ID
  mallId: ID
  reasonId: ID!
}

type Stock implements Node {
  warehouse: Warehouse!
  productVariant: ProductVariant!
  quantity: Int!
  lastUpdatedAt: DateTime!
  id: ID!
  quantityAllocated: Int!
  quantityAvailable: Int
}

enum StockAvailability {
  IN_STOCK
  OUT_OF_STOCK
}

enum StockChangesSourceEnum {
  ORDER
  MANUAL
  UNPUBLISHED
  PUBLISHED
  AVAILABLE
  UNAVAILABLE
}

type StockCountableConnection {
  pageInfo: PageInfo!
  edges: [StockCountableEdge!]!
  totalCount: Int
}

type StockCountableEdge {
  node: Stock!
  cursor: String!
}

type StockError {
  field: String
  message: String
  code: StockErrorCode!
}

enum StockErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input StockFilterInput {
  quantity: Float
  search: String
  brands: [ID]
  malls: [ID]
  tenants: [ID]
  isOutOfStock: Boolean
  isTracked: Boolean
  productStatus: ProductStatusEnum
}

type StockHistory implements Node {
  id: ID!
  stock: Stock
  fromQuantity: Int
  toQuantity: Int
  source: StockChangesSourceEnum
  orderLine: OrderLine
  productVisibility: ProductVisibility
  tenant: Tenant
  createdAt: DateTime!
}

type StockHistoryCountableConnection {
  pageInfo: PageInfo!
  edges: [StockHistoryCountableEdge!]!
  totalCount: Int
}

type StockHistoryCountableEdge {
  node: StockHistory!
  cursor: String!
}

input StockHistoryFilterInput {
  createdAt: DateRangeInput
  brands: [ID]
  malls: [ID]
  tenants: [ID]
}

enum StockHistorySortField {
  CREATED_AT
}

input StockHistorySortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: StockHistorySortField!
}

input StockInput {
  warehouse: ID!
  quantity: Int
}

enum StockSortField {
  LAST_UPDATED_AT
  QUANTITY
}

input StockSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: StockSortField!
}

type StoreOrder implements Node & ObjectWithMetadata {
  id: ID!
  orderCode: String
  smopStatus: SmopOrderStatusEnum
  order: Order
  parcelNo: String
  pickedAt: DateTime
  pickedBy: User
  validatedAt: DateTime
  validatedBy: User
  tenant: Tenant
  totalAmount: Decimal
  runner: User
  canceledAt: DateTime
  canceledBy: User
  cancelReason: String
  overriddenByRunner: Boolean
  smac: String
  discountAmount: Decimal
  dropBinCode: String
  lines: [OrderLine]
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  subtotal: Decimal
  events: [OrderEvent]
  validatedForPackingAt: DateTime
  validatedForPackingBy: User
  verticalType: StoreTypeEnum
  prepTimeLower: Int
  prepTimeUpper: Int
  runnerDroppedOff: Boolean
  runnerDroppedOffAt: DateTime
  remainingPrepTime: Int
  parcelImageUrl(size: Int): String
  receiptImageUrl(size: Int): String
  shopifyReference: String
  mall: Mall
}

type StoreOrderCountableConnection {
  pageInfo: PageInfo!
  edges: [StoreOrderCountableEdge!]!
  totalCount: Int
}

type StoreOrderCountableEdge {
  node: StoreOrder!
  cursor: String!
}

input StoreOrderFilterInput {
  orderCode: String
  parcelNo: String
  smopStatus: [SmopOrderStatusEnum]
  verticalType: [StoreTypeEnum]
  search: String
  tenant: [ID]
  customer: String
  created: DateRangeInput
  runner: String
  runnerName: StaffNameInput
  shipping: DateRangeInput
  deliveryType: [DeliveryTypeEnum]
  paymentMethod: String
  brandName: String
  deliverySchedules: DateRangeInput
  riderName: StaffNameInput
  isUnassigned: Boolean
  smac: String
  paymentChannelCode: [PaymentChannelCodeEnum]
  malls: [ID]
}

type StoreOrderLineDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  storeOrder: StoreOrder
  event: OrderEvent
  orderErrors: [OrderError!]!
}

input StoreOrderLineInput {
  quantity: Int!
  variantId: ID!
}

type StoreOrderLineUpdateQuantity {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  storeOrder: StoreOrder
  event: OrderEvent
  orderErrors: [OrderError!]!
}

input StoreOrderLineUpdateQuantityInput {
  quantity: Int!
  lineId: ID!
}

type StoreOrderLinesAdd {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  storeOrder: StoreOrder
  event: OrderEvent
  orderErrors: [OrderError!]!
}

type StoreOrderMarkAsValidForPacking {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  storeOrder: StoreOrder
  event: OrderEvent
  orderErrors: [OrderError!]!
}

type StoreOrderOpsAdminScanParcel {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  storeOrder: StoreOrder
  event: OrderEvent
  orderErrors: [OrderError!]!
}

type StoreOrderParcelImageUpload {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  storeOrder: StoreOrder
  orderErrors: [OrderError!]!
}

type StoreOrderPickLine {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  storeOrder: StoreOrder
  event: OrderEvent
  orderErrors: [OrderError!]!
}

type StoreOrderReceiptImageUpload {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  storeOrder: StoreOrder
  orderErrors: [OrderError!]!
}

type StoreOrderRevertFromCancelled {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  storeOrder: StoreOrder
  orderErrors: [OrderError!]!
}

type StoreOrderRunnerDropOff {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  storeOrder: StoreOrder
  orderErrors: [OrderError!]!
}

type StoreOrderRunnerScanParcel {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  storeOrder: StoreOrder
  event: OrderEvent
  orderErrors: [OrderError!]!
}

type StoreOrderSetParcelNo {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  storeOrder: StoreOrder
  event: OrderEvent
  orderErrors: [OrderError!]!
}

enum StoreOrderSortField {
  NUMBER
  CREATION_DATE
  REMAINING_PREP_TIME
}

input StoreOrderSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: StoreOrderSortField!
}

type StorePopularity implements Node {
  id: ID!
  tenant: Tenant
  numberOfOrders: Int
  updatedAt: DateTime
}

type StorePopularityCountableConnection {
  pageInfo: PageInfo!
  edges: [StorePopularityCountableEdge!]!
  totalCount: Int
}

type StorePopularityCountableEdge {
  node: StorePopularity!
  cursor: String!
}

input StorePopularityOrder {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: StorePopularityOrderField!
}

enum StorePopularityOrderField {
  ORDERS_NUMBER
}

enum StoreTypeEnum {
  FOOD_AND_BEVERAGES
  GENERAL_MERCHANDISE
  GROCERY
  SM_FULFILLED
}

enum SubTenantTypeEnum {
  FOOD_COURT
  NON_FOOD_COURT
}

type TaskArea implements Node & ObjectWithMetadata {
  dropOffLocation: DropOffLocation
  runners: [User]
  name: String
  code: String
  description: String
  deletedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  status: LogisticsStatusEnum
  template: Template
  id: ID!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  tenants(filter: TenantInput, offset: Int, before: String, after: String, first: Int, last: Int): TenantCountableConnection
}

type TaskAreaAddStores {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  taskArea: TaskArea
  taskAreaError: [TaskAreaError!]!
}

type TaskAreaCountableConnection {
  pageInfo: PageInfo!
  edges: [TaskAreaCountableEdge!]!
  totalCount: Int
}

type TaskAreaCountableEdge {
  node: TaskArea!
  cursor: String!
}

type TaskAreaCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  taskAreaError: [TaskAreaError!]!
  taskArea: TaskArea
}

input TaskAreaCreateInput {
  name: String!
  code: String
  description: String
  dropOffLocation: ID!
  runners: [ID]
  tenants: [ID]
  status: LogisticsStatusEnum
  template: ID
}

type TaskAreaError {
  field: String
  message: String
  code: TaskAreaErrorCode!
}

enum TaskAreaErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input TaskAreaInput {
  search: String
  mall: ID
  dropOffLocation: ID
  ids: [ID]
  runner: ID
  status: LogisticsStatusEnum
  template: ID
}

type TaskAreaRemoveStores {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  taskArea: TaskArea
  taskAreaError: [TaskAreaError!]!
}

type TaskAreaUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  taskAreaError: [TaskAreaError!]!
  taskArea: TaskArea
}

input TaskAreaUpdateInput {
  name: String
  code: String
  description: String
  dropOffLocation: ID
  runners: [ID]
  tenants: [ID]
  status: LogisticsStatusEnum
  template: ID
}

input TaskAreadAddRemoveStoresInput {
  id: ID!
  tenants: [ID]!
}

enum TaxRateType {
  ACCOMMODATION
  ADMISSION_TO_CULTURAL_EVENTS
  ADMISSION_TO_ENTERTAINMENT_EVENTS
  ADMISSION_TO_SPORTING_EVENTS
  ADVERTISING
  AGRICULTURAL_SUPPLIES
  BABY_FOODSTUFFS
  BIKES
  BOOKS
  CHILDRENS_CLOTHING
  DOMESTIC_FUEL
  DOMESTIC_SERVICES
  E_BOOKS
  FOODSTUFFS
  HOTELS
  MEDICAL
  NEWSPAPERS
  PASSENGER_TRANSPORT
  PHARMACEUTICALS
  PROPERTY_RENOVATIONS
  RESTAURANTS
  SOCIAL_HOUSING
  STANDARD
  WATER
  WINE
}

type TaxType {
  description: String
  taxCode: String
}

type TaxedMoney {
  currency: String!
  gross: Money!
  net: Money!
  tax: Money!
}

type TaxedMoneyRange {
  start: TaxedMoney
  stop: TaxedMoney
}

type Template implements Node & ObjectWithMetadata {
  name: String!
  mall: Mall!
  status: TemplateStatus!
  createdBy: User!
  id: ID!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  assignedStores(offset: Int, before: String, after: String, first: Int, last: Int): TenantCountableConnection
  unassignedStores(offset: Int, before: String, after: String, first: Int, last: Int): TenantCountableConnection
  taskAreas(offset: Int, before: String, after: String, first: Int, last: Int): TaskAreaCountableConnection
  dropOffLocations(offset: Int, before: String, after: String, first: Int, last: Int): DropOffLocationCountableConnection
  racks(offset: Int, before: String, after: String, first: Int, last: Int): RackCountableConnection
}

type TemplateCountableConnection {
  pageInfo: PageInfo!
  edges: [TemplateCountableEdge!]!
  totalCount: Int
}

type TemplateCountableEdge {
  node: Template!
  cursor: String!
}

type TemplateCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  template: Template
  templateError: [TemplateError!]!
}

input TemplateCreateInput {
  name: String!
  mall: ID!
}

type TemplateDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  template: Template
  templateError: [TemplateError!]!
}

type TemplateDuplicate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  template: Template
  taskAreaError: [TaskAreaError!]!
}

type TemplateError {
  field: String
  message: String
  code: TemplateErrorCode!
}

enum TemplateErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

type TemplateFinalize {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  template: Template
  templateError: [TemplateError!]!
}

input TemplateInput {
  name: String
  mall: ID
  status: TemplateStatusEnum
}

type TemplateRename {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  template: Template
  taskAreaError: [TaskAreaError!]!
}

enum TemplateSortField {
  TEMPLATE_NAME
  STATUS
  CREATION_DATE
  DRAFT_STATUS
}

input TemplateSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: TemplateSortField!
}

enum TemplateStatus {
  ACTIVE
  INACTIVE
  DRAFT
  DELETED
}

enum TemplateStatusEnum {
  ACTIVE
  INACTIVE
  DRAFT
  DELETED
}

type TemplateUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  template: Template
  templateError: [TemplateError!]!
}

input TemplateUpdateInput {
  name: String!
  mall: ID!
  status: TemplateStatusEnum!
}

type Tenant implements Node & ObjectWithMetadata {
  id: ID!
  brand: Brand
  mall: Mall
  legalName: String
  unitNo: String
  code: String
  leaseNo: String
  contractId: String
  tenantType: String
  description: String
  isFeatured: Boolean!
  status: SmopStatusEnum
  operationStatus: SmopOpStatusEnum
  operationStartTime: Time
  operationEndTime: Time
  operationScheduleMeta: JSONString
  dateCreated: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  location: String
  cluster: Cluster
  isUseTenantCluster: Boolean
  isUseTenantOperatingHours: Boolean
  color: String
  withReservation: Boolean
  isPausable: Boolean
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  storeName: String
  activePromoRibbon: String
  promoRibbonDescription: String
  promoRibbonStart: DateTime
  promoRibbonEnd: DateTime
  firstLevelCategories: [Category] @deprecated(reason: "Use `firstLevelCategoriesPaginated` instead for improved performance with pagination. This field will be removed after 2024-11-26.")
  secondLevelCategories(parent: ID, onlyWithVisibleProducts: Boolean): [Category] @deprecated(reason: "Use `secondLevelCategoriesPaginated` instead for improved performance with pagination. This field will be removed after 2024-11-26.")
  firstLevelCategoriesPaginated(offset: Int, before: String, after: String, first: Int, last: Int): CategoryCountableConnection
  secondLevelCategoriesPaginated(parent: ID, onlyWithVisibleProducts: Boolean, offset: Int, before: String, after: String, first: Int, last: Int): CategoryCountableConnection
  products(category: ID, offset: Int, before: String, after: String, first: Int, last: Int): ProductCountableConnection
  storeId: String
  isExpressLongDistanceDeliveryAllowed: Boolean
  isSameDayDeliveryAllowed: Boolean
  taskAreas(offset: Int, before: String, after: String, first: Int, last: Int): TaskAreaCountableConnection
  bannerImage(size: Int): Image
  iconImage(size: Int): Image
  isOfShopsm: Boolean
  hasVoucher(voucherId: ID!): Boolean
}

type TenantCountableConnection {
  pageInfo: PageInfo!
  edges: [TenantCountableEdge!]!
  totalCount: Int
}

type TenantCountableEdge {
  node: Tenant!
  cursor: String!
}

type TenantCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  tenantErrors: [TenantError!]!
  tenant: TenantPrivate
}

input TenantCreateInput {
  legalName: String
  unitNo: String
  code: String
  leaseNo: String
  contractId: String!
  tenantType: StoreTypeEnum
  description: String
  status: SmopStatusEnum!
  brand: ID!
  mall: ID!
  operationEndTime: Time
  operationStartTime: Time
  operationScheduleMeta: JSONString
  operationStatus: SmopOpStatusEnum!
  isOtherBusiness: Boolean
  tinNo: String
  completeAddress: String
  signatoryName: String
  signatoryEmail: String
  signatoryDesignation: String
  signatoryMobileNo: String
  bankName: String
  bankAccountName: String
  bankAccountNo: String
  financeName: String
  financeEmail: String
  financeMobileNo: String
  paymentFeeRate: Decimal!
  rentalType: SmopRentalTypeEnum
  isFeatured: Boolean
  ipay88SubMid: String
  isExpressLongDistanceDeliveryAllowed: Boolean
  isSameDayDeliveryAllowed: Boolean
  location: String
  isUseTenantOperatingHours: Boolean
  cluster: ID
  isUseTenantCluster: Boolean
  color: String
  bannerImage: Upload
  bannerImageAlt: String
  iconImage: Upload
  iconImageAlt: String
  subTenantType: SubTenantTypeEnum
  withReservation: Boolean
}

type TenantEnableReservation {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  tenant: Tenant
  reservationErrors: [ReservationError!]!
}

type TenantError {
  field: String
  message: String
  code: TenantErrorCode!
}

enum TenantErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input TenantInput {
  search: String
  isFeatured: Boolean
  id: [ID]
  mallId: [ID]
  brandId: [ID]
  storeType: StoreTypeEnum
  status: String
  isFollowed: Boolean
  taskAreaId: [ID]
  category: ID
  isAssignedToTaskArea: Boolean
  isAssignedInTemplates: [ID]
  isNotAssignedInTemplates: [ID]
  hasActivePause: Boolean
  pauseStartedAt: DateRangeInput
  pauseReasonIds: [ID]
}

type TenantPrivate implements Node & ObjectWithMetadata {
  id: ID!
  brand: BrandPrivate
  mall: Mall
  legalName: String
  unitNo: String
  code: String
  leaseNo: String
  contractId: String
  tenantType: String
  description: String
  isFeatured: Boolean!
  status: SmopStatusEnum
  operationStatus: SmopOpStatusEnum
  operationStartTime: Time
  operationEndTime: Time
  operationScheduleMeta: JSONString
  dateCreated: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  location: String
  cluster: Cluster
  isUseTenantCluster: Boolean
  isUseTenantOperatingHours: Boolean
  color: String
  withReservation: Boolean
  isPausable: Boolean
  isOtherBusiness: String
  tinNo: String
  completeAddress: String
  signatoryName: String
  signatoryEmail: String
  signatoryDesignation: String
  signatoryMobileNo: String
  bankName: String
  bankAccountName: String
  bankAccountNo: String
  financeName: String
  financeEmail: String
  financeMobileNo: String
  paymentFeeRate: Decimal
  rentalType: SmopRentalTypeEnum
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  storeName: String
  storeId: String
  activePromoRibbon: String
  promoRibbonDescription: String
  promoRibbonStart: DateTime
  promoRibbonEnd: DateTime
  ipay88SubMid: String
  isExpressLongDistanceDeliveryAllowed: Boolean
  isSameDayDeliveryAllowed: Boolean
  bannerImage(size: Int): Image
  iconImage(size: Int): Image
  isOfShopsm: Boolean
  hasVoucher(voucherId: ID!): Boolean
  subTenantType: SubTenantTypeEnum
  activePauseReasons: [ServicePauseReason]
}

type TenantPrivateCountableConnection {
  pageInfo: PageInfo!
  edges: [TenantPrivateCountableEdge!]!
  totalCount: Int
}

type TenantPrivateCountableEdge {
  node: TenantPrivate!
  cursor: String!
}

input TenantPromotionalRibbonInput {
  promoRibbonDescription: String
  promoRibbonStart: DateTime
  promoRibbonEnd: DateTime
  location: String
  operationEndTime: Time
  operationStartTime: Time
  isExpressLongDistanceDeliveryAllowed: Boolean
  isSameDayDeliveryAllowed: Boolean
  isUseTenantOperatingHours: Boolean
  status: SmopStatusEnum!
  cluster: ID
  isUseTenantCluster: Boolean
  bannerImage: Upload
  bannerImageAlt: String
}

type TenantPromotionalRibbonUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  tenantErrors: [TenantError!]!
  tenant: TenantPrivate
}

enum TenantSortField {
  NUMBER
  CREATION_DATE
  NAME
  TENANT_NAME
  NAME_WITH_FEATURED
  LATEST_FEATURED
  MALL_DISTANCE
  MOST_POPULAR
  BRAND_NAME
}

input TenantSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: TenantSortField!
}

type TenantUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  tenantErrors: [TenantError!]!
  tenant: TenantPrivate
}

input TenantUpdateInput {
  legalName: String
  unitNo: String
  code: String
  leaseNo: String
  contractId: String
  tenantType: StoreTypeEnum
  description: String
  status: SmopStatusEnum
  brand: ID
  mall: ID
  operationEndTime: Time
  operationStartTime: Time
  operationScheduleMeta: JSONString
  operationStatus: SmopOpStatusEnum
  isOtherBusiness: Boolean
  tinNo: String
  completeAddress: String
  signatoryName: String
  signatoryEmail: String
  signatoryDesignation: String
  signatoryMobileNo: String
  bankName: String
  bankAccountName: String
  bankAccountNo: String
  financeName: String
  financeEmail: String
  financeMobileNo: String
  paymentFeeRate: Decimal!
  rentalType: SmopRentalTypeEnum
  isFeatured: Boolean
  ipay88SubMid: String
  isExpressLongDistanceDeliveryAllowed: Boolean
  isSameDayDeliveryAllowed: Boolean
  location: String
  isUseTenantOperatingHours: Boolean
  cluster: ID
  isUseTenantCluster: Boolean
  color: String
  bannerImage: Upload
  bannerImageAlt: String
  iconImage: Upload
  iconImageAlt: String
  subTenantType: SubTenantTypeEnum
  withReservation: Boolean
}

type TenantsSetIsPausable {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  tenants: [Tenant]
  tenantErrors: [TenantError!]!
}

input TenantsSetIsPausableInput {
  tenants: [ID]!
  isPausable: Boolean!
}

type ThirdPartyRider implements Node {
  id: ID!
  order: Order
  firstName: String
  lastName: String
  contactNo: String
  deliveryCourier: DeliveryCourier
}

scalar Time

type Transaction implements Node {
  id: ID!
  created: DateTime!
  payment: Payment!
  token: String!
  kind: TransactionKind!
  isSuccess: Boolean!
  error: TransactionError
  amount: Money
}

enum TransactionError {
  TRANSACTIONERROR_INCORRECT_NUMBER
  TRANSACTIONERROR_INVALID_NUMBER
  TRANSACTIONERROR_INCORRECT_CVV
  TRANSACTIONERROR_INVALID_CVV
  TRANSACTIONERROR_INCORRECT_ZIP
  TRANSACTIONERROR_INCORRECT_ADDRESS
  TRANSACTIONERROR_INVALID_EXPIRY_DATE
  TRANSACTIONERROR_EXPIRED
  TRANSACTIONERROR_PROCESSING_ERROR
  TRANSACTIONERROR_DECLINED
}

enum TransactionKind {
  AUTH
  PENDING
  ACTION_TO_CONFIRM
  REFUND
  REFUND_ONGOING
  CAPTURE
  VOID
  CONFIRM
  CANCEL
}

enum TransactionStatusEnum {
  SUCCESS
  FAILED
}

union TranslatableItem = ProductTranslatableContent | CollectionTranslatableContent | CategoryTranslatableContent | AttributeTranslatableContent | AttributeValueTranslatableContent | ProductVariantTranslatableContent | PageTranslatableContent | ShippingMethodTranslatableContent | SaleTranslatableContent | VoucherTranslatableContent | MenuItemTranslatableContent

type TranslatableItemConnection {
  pageInfo: PageInfo!
  edges: [TranslatableItemEdge!]!
  totalCount: Int
}

type TranslatableItemEdge {
  node: TranslatableItem!
  cursor: String!
}

enum TranslatableKinds {
  ATTRIBUTE
  ATTRIBUTE_VALUE
  CATEGORY
  COLLECTION
  MENU_ITEM
  PAGE
  PRODUCT
  SALE
  SHIPPING_METHOD
  VARIANT
  VOUCHER
}

type TranslationError {
  field: String
  message: String
  code: TranslationErrorCode!
}

enum TranslationErrorCode {
  GRAPHQL_ERROR
  NOT_FOUND
  REQUIRED
}

input TranslationInput {
  seoTitle: String
  seoDescription: String
  name: String
  description: String
  descriptionJson: JSONString
}

type TravelTime {
  canRefresh: Boolean
  travelDurDay: Int
  travelDurHour: Int
  travelDurMin: Int
  expiration: DateTime
  distance: Decimal
  lastUpdate: DateTime
  clusterLowerDay: Int
  clusterLowerHour: Int
  clusterLowerMin: Int
  clusterUpperDay: Int
  clusterUpperHour: Int
  clusterUpperMin: Int
}

input TravelTimeInput {
  travelDurDay: Int!
  travelDurHour: Int!
  travelDurMin: Int!
  distance: Decimal!
}

scalar UUID

type UnassignRunnerFromTaskAreas {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  runner: User
  taskAreaError: [TaskAreaError!]!
}

type UnfollowBrand {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  brand: Brand
  brandErrors: [BrandError!]!
}

type Update2GoShipmentStatus {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  orderErrors: [OrderError!]!
}

type UpdateBrandStatus {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  brand: BrandPrivate
  brandErrors: [BrandError!]!
}

input UpdateInvoiceInput {
  number: String
  url: String
}

type UpdateMallOrderTimeframe {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  mall: Mall
  mallErrors: [MallError!]!
}

type UpdateMallStatus {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  mall: Mall
  mallErrors: [MallError!]!
}

type UpdateMetadata {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  metadataErrors: [MetadataError!]!
  item: ObjectWithMetadata
}

type UpdateOrderFulfillmentRemarks {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  event: OrderEvent
  orderErrors: [OrderError!]!
}

type UpdateOrderStatus {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  orderErrors: [OrderError!]!
}

type UpdatePrivateMetadata {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  metadataErrors: [MetadataError!]!
  item: ObjectWithMetadata
}

type UpdateRemittanceManualAdjustmentStatus {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  order: Order
  event: OrderEvent
  orderErrors: [OrderError!]!
}

type UpdateSaleStatus {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  sale: Sale
  discountErrors: [DiscountError!]!
}

type UpdateServiceMall {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  accountErrors: [AccountError!]!
}

type UpdateStoreOrderStatus {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  storeOrder: StoreOrder
  event: OrderEvent
  orderErrors: [OrderError!]!
}

type UpdateTenantStatus {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  tenant: TenantPrivate
  tenantErrors: [TenantError!]!
}

type UpdateVoucherGroupStatus {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  voucherJobBulk: VoucherJobBulk
  discountErrors: [DiscountError!]!
}

type UpdateVoucherStatus {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  voucher: Voucher
  discountErrors: [DiscountError!]!
}

scalar Upload

enum UploadEventsEnum {
  UPLOAD_PENDING
  UPLOAD_SUCCESS
  UPLOAD_FAILED
  UPLOAD_ERROR_FILE_SENT
}

type User implements Node & ObjectWithMetadata {
  id: ID!
  lastLogin: DateTime
  email: String
  firstName: String!
  lastName: String!
  isStaff: Boolean!
  isActive: Boolean!
  note: String
  dateJoined: DateTime!
  defaultShippingAddress: Address
  defaultBillingAddress: Address
  homeAddress: Address
  isVerifiedEmail: Boolean
  age: UserAgeEnum
  gender: Gender
  dateOfBirth: Date
  osUsed: String
  customerSegment: CustomerSegment
  lastOnlineDate: DateTime
  lastOrderDate: DateTime
  lastOrderStatus: OrderStatusFilter
  newCustomerStatus: CustomerStatus
  riskCustomer: Boolean
  mapPlaceId: String
  defaultMall: Mall
  distanceFromMall: Decimal
  status: LockStatus
  contactNo: String
  companyName: String
  smMarketEmail: String
  smMarketPassword: String
  isConnectedToSmMarket: Boolean
  firebaseRegistrationId: String
  freshdeskRestoreId: String
  travelTime: TravelTime
  smac: String
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  addresses: [Address]
  checkout: Checkout
  giftCards(offset: Int, before: String, after: String, first: Int, last: Int): GiftCardCountableConnection
  orders(filter: MeOrderFilterInput, sortBy: OrderSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): OrderCountableConnection
  carriedOverOrders(filter: MeOrderFilterInput, sortBy: OrderSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): OrderCountableConnection
  birthMonth: UserBirthMonthEnum
  prefix: UserPrefixEnum
  permissions: [Permission] @deprecated(reason: "Will be removed in Saleor 2.11.Use the `userPermissions` instead.")
  userPermissions: [UserPermission]
  accessGroup: AccessGroup
  followedBrands(offset: Int, before: String, after: String, first: Int, last: Int): BrandCountableConnection
  businessDetails: Brand
  permissionGroups: [Group]
  editableGroups: [Group]
  avatar(size: Int): Image
  events: [CustomerEvent]
  storedPaymentSources: [PaymentSource]
  longitude: Decimal
  latitude: Decimal
  wishlist: Wishlist
  carts(sortBy: CartSortingInput, filter: CartFilterInput, offset: Int, before: String, after: String, first: Int, last: Int): CartCountableConnection
  creditCards(sortBy: CreditCardSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): UserCreditCardCountableConnection
  paymentMethods(filter: UserPaymentMethodFilterInput, sortBy: UserPaymentMethodSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): UserPaymentMethodCountableConnection
  promoCreator: StaffPromoCreatorEnum
  couponRedemptions(filter: CouponRedemptionFilterInput, sortBy: CouponRedemptionSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): CouponRedemptionCountableConnection
  malls(filter: MallInput, sortBy: MallSortingInput, status: SmopStatusEnum, offset: Int, before: String, after: String, first: Int, last: Int): MallCountableConnection
  hasForRedemptionOrNearExpiryCoupon: Boolean
  userType: UserTypesEnum
  taskAreas: [TaskArea]
  hasForRedemptionCoupon: Boolean
  hasNearExpiryCoupon: Boolean
}

enum UserAgeEnum {
  EARLY_ADULT
  EARLY_20
  LATE_20
  EARLY_30
  LATE_30
  EARLY_40
  LATE_40
  EARLY_50
  LATE_50
  ABOVE_60
  PREFER_NOT_TO_SAY
}

type UserAvatarDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  accountErrors: [AccountError!]!
}

type UserAvatarUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  accountErrors: [AccountError!]!
}

enum UserBirthMonthEnum {
  JANUARY
  FEBRUARY
  MARCH
  APRIL
  MAY
  JUNE
  JULY
  AUGUST
  SEPTEMBER
  OCTOBER
  NOVEMBER
  DECEMBER
  PREFER_NOT_TO_SAY
}

type UserBulkBlock {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  accountErrors: [AccountError!]!
}

type UserBulkSetActive {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  accountErrors: [AccountError!]!
}

type UserClearMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

type UserClearPrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

type UserCountableConnection {
  pageInfo: PageInfo!
  edges: [UserCountableEdge!]!
  totalCount: Int
}

type UserCountableEdge {
  node: User!
  cursor: String!
}

input UserCreateInput {
  defaultBillingAddress: AddressInput
  defaultShippingAddress: AddressInput
  firstName: String
  lastName: String
  email: String
  isActive: Boolean
  note: String
  accessGroup: ID
  gender: Gender
  dateOfBirth: Date
  osUsed: String
  lastOnlineDate: DateTime
  status: LockStatus
  firebaseRegistrationId: String
  lastOrderDate: DateTime
  lastOrderStatus: OrderStatusFilter
  riskCustomer: Boolean
  distanceFromMall: Decimal
  customerSegment: CustomerSegment
  redirectUrl: String
}

type UserCreditCard implements Node & ObjectWithMetadata {
  id: ID!
  tokenId: String
  cardName: String
  cardType: String
  cardNumber: String
  expirationDate: Date
  createdAt: DateTime
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
}

type UserCreditCardCountableConnection {
  pageInfo: PageInfo!
  edges: [UserCreditCardCountableEdge!]!
  totalCount: Int
}

type UserCreditCardCountableEdge {
  node: UserCreditCard!
  cursor: String!
}

input UserLocationInput {
  lat: Decimal!
  long: Decimal!
}

type UserPaymentMethod implements Node & ObjectWithMetadata {
  id: ID!
  gateway: String
  token: String
  channelCode: UserPaymentMethodChannelCode
  maskedAccountNumber: String
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  privateMeta: [MetaStore]! @deprecated(reason: "Use the `privetaMetadata` field. This field will be removed after 2020-07-31.")
  meta: [MetaStore]! @deprecated(reason: "Use the `metadata` field. This field will be removed after 2020-07-31.")
  isEnabled: Boolean
}

enum UserPaymentMethodChannelCode {
  BPI
  CHINABANK
  RCBC
  UBP
  SHOPEEPAY
  PAYMAYA
  GRABPAY
}

type UserPaymentMethodCountableConnection {
  pageInfo: PageInfo!
  edges: [UserPaymentMethodCountableEdge!]!
  totalCount: Int
}

type UserPaymentMethodCountableEdge {
  node: UserPaymentMethod!
  cursor: String!
}

input UserPaymentMethodFilterInput {
  gateway: String
}

enum UserPaymentMethodSortField {
  CREATED
}

input UserPaymentMethodSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: UserPaymentMethodSortField!
}

type UserPermission {
  code: PermissionEnum!
  name: String!
  sourcePermissionGroups(userId: ID!): [Group!]
}

enum UserPrefixEnum {
  MR
  MS
  PREFER_NOT_TO_SAY
}

enum UserSortField {
  FIRST_NAME
  LAST_NAME
  EMAIL
  ORDER_COUNT
}

input UserSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: UserSortField!
}

enum UserTypesEnum {
  STANDARD
  SERVICE
}

type UserUpdateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

type UserUpdatePrivateMeta {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  accountErrors: [AccountError!]!
  user: User
}

type VAT {
  countryCode: String!
  standardRate: Float
  reducedRates: [ReducedRate]!
}

type VariantImageAssign {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productVariant: ProductVariant
  image: ProductImage
  productErrors: [ProductError!]!
}

type VariantImageUnassign {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  productVariant: ProductVariant
  image: ProductImage
  productErrors: [ProductError!]!
}

type VariantPricingInfo {
  onSale: Boolean
  discount: TaxedMoney
  discountLocalCurrency: TaxedMoney
  price: TaxedMoney
  priceUndiscounted: TaxedMoney
  priceLocalCurrency: TaxedMoney
}

type VerifyToken {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  user: User
  isValid: Boolean!
  payload: GenericScalar
  accountErrors: [AccountError!]!
}

type Voucher implements Node {
  id: ID!
  name: String
  type: VoucherTypeEnum!
  code: String!
  usageLimit: Int
  used: Int!
  startDate: DateTime!
  endDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  applyOncePerOrder: Boolean!
  applyOncePerCustomer: Boolean!
  isLimitToNewCustomer: Boolean!
  isHidden: Boolean
  discountValueType: DiscountValueTypeEnum!
  discountValue: Float
  smopDiscountShare: Float
  tenantDiscountShare: Float
  minSpent: Money
  minCheckoutItemsQuantity: Int
  isAppliedOnEligibleItems: Boolean!
  isMinEligibleOnly: Boolean!
  maxDiscountValue: Float
  deliveryType: DiscountDeliveryTypeEnum
  paymentMethod: DiscountPaymentMethodEnum
  isCashOnly: Boolean!
  categories(offset: Int, before: String, after: String, first: Int, last: Int): CategoryCountableConnection
  verticalType: VoucherClassificationEnum
  collections(offset: Int, before: String, after: String, first: Int, last: Int): CollectionCountableConnection
  products(filter: ProductFilterInput, offset: Int, before: String, after: String, first: Int, last: Int): ProductCountableConnection
  productVariants(filter: ProductVariantFilterInput, sortBy: ProductVariantSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): ProductVariantCountableConnection
  countries: [CountryDisplay]
  malls(offset: Int, before: String, after: String, first: Int, last: Int): MallCountableConnection
  isAppliedToAllMalls: Boolean
  description: String
  translation(languageCode: LanguageCodeEnum!): VoucherTranslation
  minTenants: Int
  status: DiscountStatusEnum
  eligibleCustomers(offset: Int, before: String, after: String, first: Int, last: Int): UserCountableConnection
  isApplicable: Boolean
  deliveryTypes: [DiscountDeliveryTypeEnum]
  imageUrl(size: Int): Image
  user: User
  isSpecificCustomer: Boolean
  group: VoucherGroup
  voucherTenants: [VoucherTenant]
}

type VoucherAddBrandGroups {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  voucher: Voucher
  discountErrors: [DiscountError!]!
}

type VoucherAddCatalogues {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  voucher: Voucher
  discountErrors: [DiscountError!]!
}

type VoucherAddCustomers {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  voucher: Voucher
  discountErrors: [DiscountError!]!
}

type VoucherAddMalls {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  voucher: Voucher
  discountErrors: [DiscountError!]!
}

input VoucherBrandGroupInput {
  brandGroup: ID!
  smoDiscountShare: Decimal
  tenantDiscountShare: Decimal
  tenants: [VoucherTenantInput]
  isAppliedToAllTenants: Boolean!
}

input VoucherBrandGroupsInput {
  smoDiscountShare: Decimal
  tenantDiscountShare: Decimal
  brandGroups: [VoucherBrandGroupInput]
  isAppliedToAllBrandGroups: Boolean!
}

type VoucherBulkActivate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  discountErrors: [DiscountError!]!
}

type VoucherBulkCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  voucherJob: VoucherJob
  discountErrors: [DiscountError!]!
}

type VoucherBulkDeactivate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  discountErrors: [DiscountError!]!
}

type VoucherBulkDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  count: Int!
  discountErrors: [DiscountError!]!
}

input VoucherCatalogueInput {
  products: [ID]
  product_variants: [ID]
  categories: [ID]
  collections: [ID]
  tenants: [ID]
  productsWithSubsidy: [VoucherProductInput]
  productVariantsWithSubsidy: [VoucherProductVariantInput]
  brandGroupsWithSubsidy: VoucherBrandGroupsInput
}

enum VoucherClassificationEnum {
  ALL
  FOOD_AND_BEVERAGES
  GENERAL_MERCHANDISE
  GROCERY
  SM_FULFILLED
  NATIONWIDE_STORES
}

type VoucherCountableConnection {
  pageInfo: PageInfo!
  edges: [VoucherCountableEdge!]!
  totalCount: Int
}

type VoucherCountableEdge {
  node: Voucher!
  cursor: String!
}

type VoucherCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  discountErrors: [DiscountError!]!
  voucher: Voucher
}

type VoucherDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  discountErrors: [DiscountError!]!
  voucher: Voucher
}

enum VoucherDiscountType {
  FIXED
  PERCENTAGE
  SHIPPING
  PERCENTAGE_AND_CAPPED
  E_VOUCHER
}

input VoucherEligibleCustomerInput {
  customers: [ID]
}

input VoucherFilterInput {
  status: [DiscountStatusEnum]
  timesUsed: IntRangeInput
  discountType: [VoucherDiscountType]
  started: DateTimeRangeInput
  search: String
  isHidden: Boolean
  groupId: ID
  hasGroup: Boolean
  malls: [ID]
  verticalType: VoucherClassificationEnum
  voucherType: [VoucherTypeEnum]
}

type VoucherGroup implements Node {
  id: ID!
  code: String!
  createdAt: DateTime
  deletedAt: DateTime
  updatedAt: DateTime
  createdBy: User
  status: DiscountStatusEnum
  vouchers(sortBy: VoucherSortingInput, offset: Int, before: String, after: String, first: Int, last: Int): VoucherCountableConnection
}

type VoucherGroupCountableConnection {
  pageInfo: PageInfo!
  edges: [VoucherGroupCountableEdge!]!
  totalCount: Int
}

type VoucherGroupCountableEdge {
  node: VoucherGroup!
  cursor: String!
}

type VoucherGroupCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  discountErrors: [DiscountError!]!
  voucherGroup: VoucherGroup
}

type VoucherGroupDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  discountErrors: [DiscountError!]!
  voucherGroup: VoucherGroup
}

input VoucherGroupFilterInput {
  createdBy: ID
  search: String
  status: [DiscountStatusEnum]
}

input VoucherGroupInput {
  code: String
  status: DiscountStatusEnum
}

enum VoucherGroupSortField {
  CODE
  CREATE_DATE
  UPDATE_DATE
  DELETE_DATE
}

input VoucherGroupSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: VoucherGroupSortField!
}

type VoucherImageCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  voucher: Voucher
  discountErrors: [DiscountError!]!
}

input VoucherImageCreateInput {
  image: Upload!
  voucher: ID!
}

type VoucherImageDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  voucher: Voucher
  discountErrors: [DiscountError!]!
}

input VoucherInput {
  type: VoucherTypeEnum
  minTenants: Int
  name: String
  code: String
  verticalType: VoucherClassificationEnum
  startDate: DateTime!
  endDate: DateTime!
  discountValueType: DiscountValueTypeEnum
  discountValue: PositiveDecimal
  smopDiscountShare: PositiveDecimal
  tenantDiscountShare: PositiveDecimal
  products: [ID]
  collections: [ID]
  categories: [ID]
  malls: [ID]
  isAppliedToAllMalls: Boolean!
  minAmountSpent: PositiveDecimal
  minCheckoutItemsQuantity: Int
  countries: [String]
  applyOncePerOrder: Boolean
  applyOncePerCustomer: Boolean
  usageLimit: Int
  maxDiscountValue: PositiveDecimal
  description: String
  isLimitToNewCustomer: Boolean
  isHidden: Boolean
  deliveryTypes: [DiscountDeliveryTypeEnum]
  paymentMethod: DiscountPaymentMethodEnum
  isSpecificCustomer: Boolean
  isCashOnly: Boolean
  isAppliedOnEligibleItems: Boolean
  isMinEligibleOnly: Boolean
  groupCode: String
}

type VoucherJob implements Node & Job {
  id: ID!
  status: JobStatusEnum!
  message: String
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User
  processedCount: Int
  totalCount: Int
  voucherGroup: VoucherGroup
}

type VoucherJobBulk implements Node & Job {
  id: ID!
  status: JobStatusEnum!
  message: String
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User
  processedCount: Int
  totalCount: Int
  voucherGroups: [VoucherGroup]
}

input VoucherMallInput {
  malls: [ID]
  isAppliedToAllMalls: Boolean!
}

input VoucherProductInput {
  product: ID!
  smoShare: Decimal
  tenantShare: Decimal
}

input VoucherProductVariantInput {
  product_variant: ID!
  smoShare: Decimal
  tenantShare: Decimal
}

type VoucherRemoveCatalogues {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  voucher: Voucher
  discountErrors: [DiscountError!]!
}

type VoucherRemoveCustomers {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  voucher: Voucher
  discountErrors: [DiscountError!]!
}

type VoucherRemoveMalls {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  voucher: Voucher
  discountErrors: [DiscountError!]!
}

enum VoucherSortField {
  CODE
  START_DATE
  END_DATE
  VOUCHER_VALUE
  TYPE
  USAGE_LIMIT
  MINIMUM_SPENT_AMOUNT
  APPLICABILITY
  CREATION_DATE
  UPDATE_DATE
}

input VoucherSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: VoucherSortField!
}

type VoucherTenant implements Node {
  tenant: TenantPrivate!
  voucher: Voucher!
  smoDiscountShare: Float
  tenantDiscountShare: Float
  id: ID!
}

type VoucherTenantBulkUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  voucherTenantsCount: Int
  discountErrors: [DiscountError!]!
}

input VoucherTenantBulkUpdateInput {
  smoDiscountShare: Decimal!
  tenantDiscountShare: Decimal!
  id: ID!
}

type VoucherTenantCountableConnection {
  pageInfo: PageInfo!
  edges: [VoucherTenantCountableEdge!]!
  totalCount: Int
}

type VoucherTenantCountableEdge {
  node: VoucherTenant!
  cursor: String!
}

type VoucherTenantDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  voucherTenant: VoucherTenant
  discountErrors: [DiscountError!]!
}

input VoucherTenantFilterInput {
  tenantIds: [ID]
  voucherIds: [ID]
}

input VoucherTenantInput {
  smoDiscountShare: Decimal!
  tenantDiscountShare: Decimal!
  tenant: ID!
}

enum VoucherTenantSortField {
  TENANT_STORE_NAME
  VOUCHER_NAME
  VOUCHER_CODE
  CREATED_AT
  UPDATED_AT
}

input VoucherTenantSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: VoucherTenantSortField!
}

input VoucherTenantSubsidyInput {
  smoDiscountShare: Decimal!
  tenantDiscountShare: Decimal!
}

type VoucherTenantUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  voucherTenant: VoucherTenant
  discountErrors: [DiscountError!]!
}

type VoucherTranslatableContent implements Node {
  id: ID!
  name: String
  translation(languageCode: LanguageCodeEnum!): VoucherTranslation
  voucher: Voucher
}

type VoucherTranslate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  translationErrors: [TranslationError!]!
  voucher: Voucher
}

type VoucherTranslation implements Node {
  id: ID!
  name: String
  language: LanguageDisplay!
}

enum VoucherTypeEnum {
  SHIPPING
  ENTIRE_ORDER
  SPECIFIC_PRODUCT
  E_VOUCHER
}

type VoucherUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  discountErrors: [DiscountError!]!
  voucher: Voucher
}

type Warehouse implements Node {
  id: ID!
  name: String!
  slug: String!
  companyName: String!
  shippingZones(offset: Int, before: String, after: String, first: Int, last: Int): ShippingZoneCountableConnection!
  address: Address
  email: String!
  mall: Mall
  homeLocations: [HomeLocation]
}

input WarehouseAddressInput {
  streetAddress1: String!
  streetAddress2: String
  city: String!
  cityArea: String
  postalCode: String
  country: CountryCode!
  countryArea: String
  phone: String
  areaCode: String
}

type WarehouseCountableConnection {
  pageInfo: PageInfo!
  edges: [WarehouseCountableEdge!]!
  totalCount: Int
}

type WarehouseCountableEdge {
  node: Warehouse!
  cursor: String!
}

type WarehouseCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  warehouseErrors: [WarehouseError!]!
  warehouse: Warehouse
}

input WarehouseCreateInput {
  slug: String
  companyName: String
  email: String
  tenant: ID
  name: String!
  address: WarehouseAddressInput!
  shippingZones: [ID]
  mall: ID
}

type WarehouseDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  warehouseErrors: [WarehouseError!]!
  warehouse: Warehouse
}

type WarehouseError {
  field: String
  message: String
  code: WarehouseErrorCode!
}

enum WarehouseErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input WarehouseFilterInput {
  search: String
  ids: [ID]
  malls: [ID]
  tenant: ID
}

type WarehouseShippingZoneAssign {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  warehouseErrors: [WarehouseError!]!
  warehouse: Warehouse
}

type WarehouseShippingZoneUnassign {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  warehouseErrors: [WarehouseError!]!
  warehouse: Warehouse
}

enum WarehouseSortField {
  WAREHOUSE_NAME
}

input WarehouseSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: WarehouseSortField!
}

type WarehouseUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  warehouseErrors: [WarehouseError!]!
  warehouse: Warehouse
}

input WarehouseUpdateInput {
  slug: String
  companyName: String
  email: String
  tenant: ID
  name: String
  address: WarehouseAddressInput
}

type Webhook implements Node {
  name: String!
  targetUrl: String!
  isActive: Boolean!
  secretKey: String
  id: ID!
  events: [WebhookEvent!]!
  serviceAccount: ServiceAccount! @deprecated(reason: "Use the `app` field instead. This field will be removed after 2020-07-31.")
  app: App!
}

type WebhookCountableConnection {
  pageInfo: PageInfo!
  edges: [WebhookCountableEdge!]!
  totalCount: Int
}

type WebhookCountableEdge {
  node: Webhook!
  cursor: String!
}

type WebhookCreate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  webhookErrors: [WebhookError!]!
  webhook: Webhook
}

input WebhookCreateInput {
  name: String
  targetUrl: String
  events: [WebhookEventTypeEnum]
  serviceAccount: ID
  app: ID
  isActive: Boolean
  secretKey: String
}

type WebhookDelete {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  webhookErrors: [WebhookError!]!
  webhook: Webhook
}

type WebhookError {
  field: String
  message: String
  code: WebhookErrorCode!
}

enum WebhookErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

type WebhookEvent {
  eventType: WebhookEventTypeEnum!
  name: String!
}

enum WebhookEventTypeEnum {
  ANY_EVENTS
  ORDER_CREATED
  ORDER_FULLY_PAID
  ORDER_UPDATED
  ORDER_CANCELLED
  ORDER_FULFILLED
  INVOICE_REQUESTED
  INVOICE_DELETED
  INVOICE_SENT
  CUSTOMER_CREATED
  PRODUCT_CREATED
  PRODUCT_UPDATED
  CHECKOUT_QUANTITY_CHANGED
  CHECKOUT_CREATED
  CHECKOUT_UPDATED
  FULFILLMENT_CREATED
  MALL_CREATED
  MALL_UPDATED
  BRAND_CREATED
  BRAND_UPDATED
  TENANT_CREATED
  TENANT_UPDATED
}

input WebhookFilterInput {
  search: String
  isActive: Boolean
}

enum WebhookSampleEventTypeEnum {
  ORDER_CREATED
  ORDER_FULLY_PAID
  ORDER_UPDATED
  ORDER_CANCELLED
  ORDER_FULFILLED
  INVOICE_REQUESTED
  INVOICE_DELETED
  INVOICE_SENT
  CUSTOMER_CREATED
  PRODUCT_CREATED
  PRODUCT_UPDATED
  CHECKOUT_QUANTITY_CHANGED
  CHECKOUT_CREATED
  CHECKOUT_UPDATED
  FULFILLMENT_CREATED
  MALL_CREATED
  MALL_UPDATED
  BRAND_CREATED
  BRAND_UPDATED
  TENANT_CREATED
  TENANT_UPDATED
}

enum WebhookSortField {
  WEBHOOK_NAME
  SERVICE_ACCOUNT
  TARGET_URL
  APP
}

input WebhookSortingInput {
  direction: OrderDirection!
  behavior: OrderBehavior = ""
  field: WebhookSortField!
}

type WebhookUpdate {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  webhookErrors: [WebhookError!]!
  webhook: Webhook
}

input WebhookUpdateInput {
  name: String
  targetUrl: String
  events: [WebhookEventTypeEnum]
  serviceAccount: ID
  app: ID
  isActive: Boolean
  secretKey: String
}

type Weight {
  unit: WeightUnitsEnum!
  value: Float!
}

scalar WeightScalar

enum WeightUnitsEnum {
  KG
  LB
  OZ
  G
}

type Wishlist implements Node {
  id: ID!
  createdAt: DateTime!
  items(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, mallId: ID): WishlistItemCountableConnection!
}

type WishlistAddProductMutation {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  wishlistItems: [WishlistItem]
  wishlistErrors: [WishlistError!]!
}

type WishlistAddProductVariantMutation {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  wishlistItems: [WishlistItem]
  wishlistErrors: [WishlistError!]!
}

type WishlistError {
  field: String
  message: String
  code: WishlistErrorCode!
}

enum WishlistErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

type WishlistItem implements Node {
  id: ID!
  wishlist: Wishlist!
  product: Product!
  variants(offset: Int, before: String, after: String, first: Int, last: Int): ProductVariantCountableConnection!
  mall: Mall
}

type WishlistItemCountableConnection {
  pageInfo: PageInfo!
  edges: [WishlistItemCountableEdge!]!
  totalCount: Int
}

type WishlistItemCountableEdge {
  node: WishlistItem!
  cursor: String!
}

type WishlistRemoveProductMutation {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  wishlistItems: [WishlistItem]
  wishlistErrors: [WishlistError!]!
}

type WishlistRemoveProductVariantMutation {
  errors: [Error!]! @deprecated(reason: "Use typed errors with error codes. This field will be removed after 2020-07-31.")
  wishlistItems: [WishlistItem]
  wishlistErrors: [WishlistError!]!
}

scalar _Any

union _Entity = Address | User | Group | ServiceAccount | ProductVariant | Product | ProductType | Collection | Category | ProductImage | Choice | ProductUploadJob | App

type _Service {
  sdl: String
}
